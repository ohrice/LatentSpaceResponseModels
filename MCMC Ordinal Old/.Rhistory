start_index=2
}
proposal_sigs
varname='tau'
out=update_vector(varname)
out
varname
current_vector=current_values[[varname]]
n1=dim(current_vector)[1]
n2=dim(current_vector)[2]
proposal_sig=proposal_sigs[[varname]]
proposed_vector=matrix(rnorm(n=n1*n2,mean=current_vector,sd=proposal_sig),n1,n2)
if(varname=='tau'){proposed_vector[,1]=0}
likelihood_fun<-function(x) {likelihood_funs[[varname]](x)}
prior_fun<-function(x) {prior_funs[[varname]](x)}
logdiff_likelihood=likelihood_fun(proposed_vector)-likelihood_fun(current_vector)
logdiff_prior=prior_fun(proposed_vector)-prior_fun(current_vector)
logdiff_likelihood
logdiff_prior
proposed_vector
current_vector
likelihood_fun
given_tau=current_tau
given_tau=current_vector
tau_mat=aperm(array(rep(current_values$tau,nz),dim=c(nw,ntau,nz)),perm=c(3,1,2))
tau_mat
current_values$tau
tau_mat=aperm(array(rep(current_values$tau,nz),dim=c(nw,ntau,nz)),perm=c(3,1,2))
tau_mat
rep(current_values$tau,nz)
array(rep(current_values$tau,nz),dim=c(nw,ntau,nz))
help(v)
aperm(array(rep(current_values$tau,nz),dim=c(nw,ntau,nz)),perm=c(3,1,2))
summary(aperm(array(rep(current_values$tau,nz),dim=c(nw,ntau,nz)),perm=c(3,1,2)))
tau_mat
dim(tau_mat)
wz_dist=euc_dist_ordinal(current_values$z,current_values$w)
bt_mat=array(rep(outer(c(current_values$theta),c(current_values$beta),'+'),ntau),dim=c(nz,nw,ntau))
dim(wz_dist)
dim(bt_mat)
tau_mat=aperm(array(rep(current_values$tau,nz),dim=c(nw,ntau,nz)),perm=c(3,1,2))
wz_dist=euc_dist_ordinal(current_values$z,current_values$w)
bt_mat=array(rep(outer(c(current_values$theta),c(current_values$beta),'+'),ntau),dim=c(nz,nw,ntau))
term_mat_unnorm=sigmoid(tau_mat+bt_mat-wz_dist)
dim(term_mat_unnorm)
term_mat_norm=aperm(apply(term_mat_unnorm,c(1,2),function(r) r/sum(r)),c(2,3,1)) #normalize
dim(term_mat_norm)
retval=sapply(1:ntau,function(k) {r=term_mat_norm[,,k]
r*(X==k)+(1-(X==k))*(1-r)},simplify="array")
dim(retval)
apply(log(retval),c(2,3),sum)
likelihood_tau<-function(given_tau)
{
tau_mat=aperm(array(rep(current_values$tau,nz),dim=c(nw,ntau,nz)),perm=c(3,1,2))
wz_dist=euc_dist_ordinal(current_values$z,current_values$w)
bt_mat=array(rep(outer(c(current_values$theta),c(current_values$beta),'+'),ntau),dim=c(nz,nw,ntau))
term_mat_unnorm=sigmoid(tau_mat+bt_mat-wz_dist)
term_mat_norm=aperm(apply(term_mat_unnorm,c(1,2),function(r) r/sum(r)),c(2,3,1)) #normalize
retval=sapply(1:ntau,function(k) {r=term_mat_norm[,,k]
r*(X==k)+(1-(X==k))*(1-r)},simplify="array")
return(apply(log(retval),c(2,3),sum))
##end likelihood section
}
likelihood_funs$tau=likelihood_tau
likelihood_fun<-function(x) {likelihood_funs[[varname]](x)}
likelihood_fun(current_vector)
likelihood_fun(proposed_vector)
logdiff_likelihood=likelihood_fun(proposed_vector)-likelihood_fun(current_vector)
proposed_vector
current_vector
r
retval=sapply(1:ntau,function(k) {r=term_mat_norm[,,k];
r*(X==k)+(1-(X==k))*(1-r)},simplify="array")
term_mat_unnorm
term_mat_norm
tau_mat
tau_mat[,,1]
tau_mat[,,2]
tau_mat[,,3]
tau_mat[,,4]
tau_mat[,,5]
likelihood_tau<-function(given_tau)
{
tau_mat=aperm(array(rep(given_tau,nz),dim=c(nw,ntau,nz)),perm=c(3,1,2))
wz_dist=euc_dist_ordinal(current_values$z,current_values$w)
bt_mat=array(rep(outer(c(current_values$theta),c(current_values$beta),'+'),ntau),dim=c(nz,nw,ntau))
term_mat_unnorm=sigmoid(tau_mat+bt_mat-wz_dist)
term_mat_norm=aperm(apply(term_mat_unnorm,c(1,2),function(r) r/sum(r)),c(2,3,1)) #normalize
retval=sapply(1:ntau,function(k) {r=term_mat_norm[,,k];
r*(X==k)+(1-(X==k))*(1-r)},simplify="array")
return(apply(log(retval),c(2,3),sum))
##end likelihood section
}
likelihood_funs$tau=likelihood_tau
prior_fun
given_vector=proposed_tau
given_vector=proposed_vector
varname='tau'
-(given_vector^2)/(2*current_values[[paste('sigma',varname,sep='_')]]^2)
source('C:/Users/samjb/Dropbox/LatentSpaceResponseModels/MCMC Ordinal/make_config.R', echo=TRUE)
source('C:/Users/samjb/Dropbox/LatentSpaceResponseModels/MCMC Ordinal/make_config.R', echo=TRUE)
source('C:/Users/samjb/Dropbox/LatentSpaceResponseModels/MCMC Ordinal/mcmc_sampler_ordinal.R', echo=TRUE)
stored_parameters$K_w[[1]]
stored_parameters$K_w[[2]]
set.seed(myseed)
#load_data
data_out=load_data()
X<<-data_out[['data']]
dataname<<-data_out[['dataname']]
nz<<-dim(X)[1]
nw<<-dim(X)[2]
ndim<<-2
ncluster<<-2
ordinals<<-unique(c(as.matrix(X)))
ordinals<<-ordinals[!is.na(ordinals)]
minord<<-min(ordinals)
maxord<<-max(ordinals)
ntau<<-length(ordinals)
store_iter=1
batch_size<<-1000
plot_dirname=file.path(paste('Images/plots_config_',config_number,'_seed_',myseed,'_data_',dataname,sep=''))
if(!file.exists(plot_dirname)) {dir.create(plot_dirname)}
save_filename=file.path(paste('Saved_output/saved_output_config_',config_number,'_seed_',myseed,'_data_',dataname,sep=''))
varname_list<<-c("z","w","theta","beta","tau")
overwrite=F
if(file.exists(save_filename) & !overwrite)
{
load(save_filename,verb=T)
start_index=length(stored_parameters$z)
print(paste('Continuing from previous run at iteration:',start_index))
set.seed(current_seed)
assign("current_values",current_values,envir = .GlobalEnv)
assign("stored_vars",stored_vars,envir = .GlobalEnv)
assign("hyperparameters",hyperparameters,envir = .GlobalEnv)
assign("proposal_sigs",proposal_sigs,envir = .GlobalEnv)
}else
{
print('Starting from scratch.')
#initalize
set.seed(myseed)
init_out=initialize_ordinal_cluster_sampler(config_number)
assign("current_values",init_out[['init_values']],envir = .GlobalEnv)
assign("stored_vars",init_out[['stored_vars']],envir = .GlobalEnv)
assign("hyperparameters",init_out[['hyperparameters']],envir = .GlobalEnv)
assign("proposal_sigs",init_out[['proposal_sigs']],envir = .GlobalEnv)
acceptance_rates=list()
for(varname in varname_list)
{
acceptance_rates[[varname]]=rep(NA,M)
}
update_sigma_tf=list("z"=FALSE,"w"=FALSE,"theta"=TRUE,"beta"=FALSE,"tau"=TRUE)
stored_parameters=list()
for(varname in names(current_values))
{
stored_parameters[[varname]]=list()
stored_parameters[[varname]][[1]]=current_values[[varname]]
}
stored_likelihoods=rep(NA,M)
stored_likelihoods[1]=calculate_full_likelihood(stored_parameters,1)
###sample
plot_latent_ordinal_cluster(stored_parameters,1,mytitle='Initial Configuration',save=T,save_filename=paste(plot_dirname,'/initial_configuration.png',sep=''))
start_index=2
}
pb <- txtProgressBar(max = M, style = 3)
for(jj in start_index:M)
{
current_seed=runif(1)*1e9 #for continuation purposes
set.seed(current_seed)
store=jj%%store_iter==0
storej=floor(jj/store_iter)
setTxtProgressBar(pb, jj)
for(varname in varname_list)
{
out=update_vector(varname)
current_values[[varname]]=out$newvalue
assign("current_values",current_values,envir = .GlobalEnv)
if(store) {stored_parameters[[varname]][[storej]]=out$newvalue}
acceptance_rates[[varname]][jj]=mean(out$accepts)
if(update_sigma_tf[[varname]])
{
newsigma=update_sigma(varname)
sig_varname=paste("sigma",varname,sep="_")
if(store) {stored_parameters[[sig_varname]][[storej]]=newsigma}
current_values[[sig_varname]]=newsigma
}
}
newK=update_K()
current_values$K_z=newK$K_z
assign("current_values",current_values,envir = .GlobalEnv)
current_values$K_w=newK$K_w
assign("current_values",current_values,envir = .GlobalEnv)
#store values for new Ks:
assign("stored_vars",update_stored_vars(),envir = .GlobalEnv)
current_values$mu=update_mu_clusters()
assign("current_values",current_values,envir = .GlobalEnv)
current_values$sigma=update_sigma_clusters()
assign("current_values",current_values,envir = .GlobalEnv)
current_values$lambda=update_lambda()
assign("current_values",current_values,envir = .GlobalEnv)
current_values$omega=update_omega()
assign("current_values",current_values,envir = .GlobalEnv)
stored_likelihoods[jj]=calculate_full_likelihood(stored_parameters,jj)
if(store) {
stored_parameters$K_z[[storej]]=current_values$K_z
stored_parameters$mu[[storej]]=current_values$mu
stored_parameters$sigma[[storej]]=current_values$sigma
stored_parameters$lambda[[storej]]=current_values$lambda
stored_parameters$omega[[storej]]=current_values$omega
}
mi=max(1,jj-batch_size)
for(varname in varname_list)
{
#rosenthall and roberts algorithm
delta=ifelse(mean(acceptance_rates[[varname]][1:jj],na.rm=T)>.44,min(.01,1/sqrt(jj)),-min(.01,1/sqrt(jj)))
proposal_sigs[[varname]]=proposal_sigs[[varname]]*exp(delta)
}
assign("proposal_sigs",proposal_sigs,envir = .GlobalEnv)
if(jj%%plot_iter==0)
{
print('acceptance rates:')
print(sapply(acceptance_rates,function(x) mean(x,na.rm=T)))
print(data.frame(proposal_sigs))
plot_latent_ordinal_cluster(stored_parameters,storej,mytitle=toString(jj),save=T,save_filename=paste(plot_dirname,'/iteration_',jj,'.png',sep=''))
save(stored_parameters,current_values,stored_likelihoods,stored_vars,hyperparameters,proposal_sigs,acceptance_rates,current_seed,file=save_filename)
}
}
storej
jj
length(stored_parameters$z)
length(stored_parameters$K_w)
update_mu_clusters
source('C:/Users/samjb/Dropbox/LatentSpaceResponseModels/MCMC Ordinal/mcmc_sampler_ordinal.R', echo=TRUE)
source('C:/Users/samjb/Dropbox/LatentSpaceResponseModels/MCMC Ordinal/mcmc_sampler_ordinal.R', echo=TRUE)
set.seed(myseed)
#load_data
data_out=load_data()
X<<-data_out[['data']]
dataname<<-data_out[['dataname']]
nz<<-dim(X)[1]
nw<<-dim(X)[2]
ndim<<-2
ncluster<<-2
ordinals<<-unique(c(as.matrix(X)))
ordinals<<-ordinals[!is.na(ordinals)]
minord<<-min(ordinals)
maxord<<-max(ordinals)
ntau<<-length(ordinals)
store_iter=1
batch_size<<-1000
plot_dirname=file.path(paste('Images/plots_config_',config_number,'_seed_',myseed,'_data_',dataname,sep=''))
if(!file.exists(plot_dirname)) {dir.create(plot_dirname)}
save_filename=file.path(paste('Saved_output/saved_output_config_',config_number,'_seed_',myseed,'_data_',dataname,sep=''))
varname_list<<-c("z","w","theta","beta","tau")
overwrite=F
if(file.exists(save_filename) & !overwrite)
{
load(save_filename,verb=T)
start_index=length(stored_parameters$z)
print(paste('Continuing from previous run at iteration:',start_index))
set.seed(current_seed)
assign("current_values",current_values,envir = .GlobalEnv)
assign("stored_vars",stored_vars,envir = .GlobalEnv)
assign("hyperparameters",hyperparameters,envir = .GlobalEnv)
assign("proposal_sigs",proposal_sigs,envir = .GlobalEnv)
}else
{
print('Starting from scratch.')
#initalize
set.seed(myseed)
init_out=initialize_ordinal_cluster_sampler(config_number)
assign("current_values",init_out[['init_values']],envir = .GlobalEnv)
assign("stored_vars",init_out[['stored_vars']],envir = .GlobalEnv)
assign("hyperparameters",init_out[['hyperparameters']],envir = .GlobalEnv)
assign("proposal_sigs",init_out[['proposal_sigs']],envir = .GlobalEnv)
acceptance_rates=list()
for(varname in varname_list)
{
acceptance_rates[[varname]]=rep(NA,M)
}
update_sigma_tf=list("z"=FALSE,"w"=FALSE,"theta"=TRUE,"beta"=FALSE,"tau"=TRUE)
stored_parameters=list()
for(varname in names(current_values))
{
stored_parameters[[varname]]=list()
stored_parameters[[varname]][[1]]=current_values[[varname]]
}
stored_likelihoods=rep(NA,M)
stored_likelihoods[1]=calculate_full_likelihood(stored_parameters,1)
###sample
plot_latent_ordinal_cluster(stored_parameters,1,mytitle='Initial Configuration',save=T,save_filename=paste(plot_dirname,'/initial_configuration.png',sep=''))
start_index=2
}
pb <- txtProgressBar(max = M, style = 3)
for(jj in start_index:M)
{
current_seed=runif(1)*1e9 #for continuation purposes
set.seed(current_seed)
store=jj%%store_iter==0
storej=floor(jj/store_iter)
setTxtProgressBar(pb, jj)
for(varname in varname_list)
{
out=update_vector(varname)
current_values[[varname]]=out$newvalue
assign("current_values",current_values,envir = .GlobalEnv)
if(store) {stored_parameters[[varname]][[storej]]=out$newvalue}
acceptance_rates[[varname]][jj]=mean(out$accepts)
if(update_sigma_tf[[varname]])
{
newsigma=update_sigma(varname)
sig_varname=paste("sigma",varname,sep="_")
if(store) {stored_parameters[[sig_varname]][[storej]]=newsigma}
current_values[[sig_varname]]=newsigma
}
}
newK=update_K()
current_values$K_z=newK$K_z
current_values$K_w=newK$K_w
#store values for new Ks:
assign("stored_vars",update_stored_vars(),envir = .GlobalEnv)
current_values$mu=update_mu_clusters()
current_values$sigma=update_sigma_clusters()
current_values$lambda=update_lambda()
current_values$omega=update_omega()
stored_likelihoods[jj]=calculate_full_likelihood(stored_parameters,jj)
if(store) {
stored_parameters$K_z[[storej]]=current_values$K_z
stored_parameters$K_w[[storej]]=current_values$K_z
stored_parameters$mu[[storej]]=current_values$mu
stored_parameters$sigma[[storej]]=current_values$sigma
stored_parameters$lambda[[storej]]=current_values$lambda
stored_parameters$omega[[storej]]=current_values$omega
}
mi=max(1,jj-batch_size)
for(varname in varname_list)
{
#rosenthall and roberts algorithm
delta=ifelse(mean(acceptance_rates[[varname]][1:jj],na.rm=T)>.44,min(.01,1/sqrt(jj)),-min(.01,1/sqrt(jj)))
proposal_sigs[[varname]]=proposal_sigs[[varname]]*exp(delta)
}
assign("proposal_sigs",proposal_sigs,envir = .GlobalEnv)
if(jj%%plot_iter==0)
{
print('acceptance rates:')
print(sapply(acceptance_rates,function(x) mean(x,na.rm=T)))
print(data.frame(proposal_sigs))
plot_latent_ordinal_cluster(stored_parameters,storej,mytitle=toString(jj),save=T,save_filename=paste(plot_dirname,'/iteration_',jj,'.png',sep=''))
save(stored_parameters,current_values,stored_likelihoods,stored_vars,hyperparameters,proposal_sigs,acceptance_rates,current_seed,file=save_filename)
}
}
kk=jj
jj
z=data.frame(stored_parameters$z[[kk]]) #data.frame(matrix(stored_parameters$z[M,],nz,2))
w=data.frame(matrix(stored_parameters$w[[kk]],nw*ntau,2)) #data.frame(matrix(stored_parameters$w[M,],nw,2))
names(z)<-c('coord1','coord2')
names(w)<-c('coord1','coord2')
temp_z=sapply(stored_parameters$K_z[[kk]],function(x) paste(toString(x)))
z$K=as.factor(temp_z)
z$wz="z"
temp_w=sapply(stored_parameters$K_w[[kk]],function(x) paste(toString(x)))
w$K=as.factor(temp_w)
w$wz=c(rep("w k=1",nw),rep("w k=2",nw),rep("w k=3",nw),rep("w k=4",nw))
mu=data.frame(stored_parameters$mu[[kk]])
colnames(mu)<-c('coord1','coord2')
mu$wz="mu"
mu$K=sapply(1:ncluster,function(x) paste(toString(x)))
mu$r=stored_parameters$sigma[[kk]]
toplot=rbind(z,w)
p0<-ggplot()+geom_point(aes(x=coord1,y=coord2,col=K,pch=wz),toplot,cex=2)
p0<-p0+xlab('coordinate 1')+ylab('coordinate 2')+ggtitle(paste('Latent space sample at M=',mytitle,sep=''))
p0<-p0+geom_point(aes(x=coord1,y=coord2,col=K,pch=wz),data=mu)
p0<-p0+geom_circle(aes(x0=coord1,y0=coord2,col=K,r=r),data=mu)
p0<-p0+scale_shape_manual(values=c("z"=16,"w k=1"=8,"w k=2"=9,"w k=3"=10,"w k=4"=11,"mu"=4))
# p1=p0+geom_point(aes(x=current_values[['mu_z']][,1],y=current_values[['mu_z']][,2],col=c("1_z","2_z","3_z","4_z","5_z"),pch="cluster mu z"),cex=4)
if(save_tf)
{
png(save_filename)
print(p0)
dev.off()
}else
{
print(p0)
}
save_tf=F
z=data.frame(stored_parameters$z[[kk]]) #data.frame(matrix(stored_parameters$z[M,],nz,2))
w=data.frame(matrix(stored_parameters$w[[kk]],nw*ntau,2)) #data.frame(matrix(stored_parameters$w[M,],nw,2))
names(z)<-c('coord1','coord2')
names(w)<-c('coord1','coord2')
temp_z=sapply(stored_parameters$K_z[[kk]],function(x) paste(toString(x)))
z$K=as.factor(temp_z)
z$wz="z"
temp_w=sapply(stored_parameters$K_w[[kk]],function(x) paste(toString(x)))
w$K=as.factor(temp_w)
w$wz=c(rep("w k=1",nw),rep("w k=2",nw),rep("w k=3",nw),rep("w k=4",nw))
mu=data.frame(stored_parameters$mu[[kk]])
colnames(mu)<-c('coord1','coord2')
mu$wz="mu"
mu$K=sapply(1:ncluster,function(x) paste(toString(x)))
mu$r=stored_parameters$sigma[[kk]]
toplot=rbind(z,w)
p0<-ggplot()+geom_point(aes(x=coord1,y=coord2,col=K,pch=wz),toplot,cex=2)
p0<-p0+xlab('coordinate 1')+ylab('coordinate 2')+ggtitle(paste('Latent space sample at M=',mytitle,sep=''))
p0<-p0+geom_point(aes(x=coord1,y=coord2,col=K,pch=wz),data=mu)
p0<-p0+geom_circle(aes(x0=coord1,y0=coord2,col=K,r=r),data=mu)
p0<-p0+scale_shape_manual(values=c("z"=16,"w k=1"=8,"w k=2"=9,"w k=3"=10,"w k=4"=11,"mu"=4))
# p1=p0+geom_point(aes(x=current_values[['mu_z']][,1],y=current_values[['mu_z']][,2],col=c("1_z","2_z","3_z","4_z","5_z"),pch="cluster mu z"),cex=4)
if(save_tf)
{
png(save_filename)
print(p0)
dev.off()
}else
{
print(p0)
}
dim(z)
dim(w)
z=data.frame(stored_parameters$z[[kk]]) #data.frame(matrix(stored_parameters$z[M,],nz,2))
w=data.frame(matrix(stored_parameters$w[[kk]],nw*ntau,2)) #data.frame(matrix(stored_parameters$w[M,],nw,2))
names(z)<-c('coord1','coord2')
names(w)<-c('coord1','coord2')
stored_parameters$z[[4]]-stored_parameters$z[[9]]
stored_parameters$z[[4]]-stored_parameters$z[[8]]
stored_parameters$z[[5]]-stored_parameters$z[[8]]
z=data.frame(stored_parameters$z[[kk]]) #data.frame(matrix(stored_parameters$z[M,],nz,2))
w=data.frame(matrix(stored_parameters$w[[kk]],nw*ntau,2)) #data.frame(matrix(stored_parameters$w[M,],nw,2))
names(z)<-c('coord1','coord2')
names(w)<-c('coord1','coord2')
temp_z=sapply(stored_parameters$K_z[[kk]],function(x) paste(toString(x)))
z$K=as.factor(temp_z)
z$wz="z"
temp_w=sapply(stored_parameters$K_w[[kk]],function(x) paste(toString(x)))
w$K=as.factor(temp_w)
w$wname=c(rep("w k=1",nw),rep("w k=2",nw),rep("w k=3",nw),rep("w k=4",nw))
mu=data.frame(stored_parameters$mu[[kk]])
colnames(mu)<-c('coord1','coord2')
mu$wz="mu"
mu$K=sapply(1:ncluster,function(x) paste(toString(x)))
mu$r=stored_parameters$sigma[[kk]]
p0<-ggplot()
p0<-p0++geom_point(aes(x=coord1,y=coord2,col=K,pch='z'),data=z,cex=2)
p0<-p0++geom_point(aes(x=coord1,y=coord2,col=K,pch=wname),data=w,cex=2)
p0<-p0+geom_point(aes(x=coord1,y=coord2,col=K,pch='mu'),data=mu)
p0<-p0+xlab('coordinate 1')+ylab('coordinate 2')+ggtitle(paste('Latent space sample at M=',mytitle,sep=''))
p0<-p0+geom_circle(aes(x0=coord1,y0=coord2,col=K,r=r),data=mu)
p0<-p0+scale_shape_manual(values=c("z"=16,"w k=1"=8,"w k=2"=9,"w k=3"=10,"w k=4"=11,"mu"=4))
z=data.frame(stored_parameters$z[[kk]]) #data.frame(matrix(stored_parameters$z[M,],nz,2))
w=data.frame(matrix(stored_parameters$w[[kk]],nw*ntau,2)) #data.frame(matrix(stored_parameters$w[M,],nw,2))
names(z)<-c('coord1','coord2')
names(w)<-c('coord1','coord2')
temp_z=sapply(stored_parameters$K_z[[kk]],function(x) paste(toString(x)))
z$K=as.factor(temp_z)
z$wz="z"
temp_w=sapply(stored_parameters$K_w[[kk]],function(x) paste(toString(x)))
w$K=as.factor(temp_w)
w$wname=c(rep("w k=1",nw),rep("w k=2",nw),rep("w k=3",nw),rep("w k=4",nw))
z=data.frame(stored_parameters$z[[kk]]) #data.frame(matrix(stored_parameters$z[M,],nz,2))
w=data.frame(matrix(stored_parameters$w[[kk]],nw*ntau,2)) #data.frame(matrix(stored_parameters$w[M,],nw,2))
names(z)<-c('coord1','coord2')
names(w)<-c('coord1','coord2')
temp_z=sapply(stored_parameters$K_z[[kk]],function(x) paste(toString(x)))
z$K=as.factor(temp_z)
z$wz="z"
temp_w=sapply(stored_parameters$K_w[[kk]],function(x) paste(toString(x)))
w$K=as.factor(temp_w)
w$wname=c(rep("w k=1",nw),rep("w k=2",nw),rep("w k=3",nw),rep("w k=4",nw))
temp_z=sapply(stored_parameters$K_z[[kk]],function(x) paste(toString(x)))
z$K=as.factor(temp_z)
temp_w=sapply(stored_parameters$K_w[[kk]],function(x) paste(toString(x)))
w$K=as.factor(temp_w)
w$wname=c(rep("w k=1",nw),rep("w k=2",nw),rep("w k=3",nw),rep("w k=4",nw))
mu=data.frame(stored_parameters$mu[[kk]])
colnames(mu)<-c('coord1','coord2')
temp_z=sapply(stored_parameters$K_z[[kk]],function(x) paste(toString(x)))
z$K=as.factor(temp_z)
temp_w=sapply(stored_parameters$K_w[[kk]],function(x) paste(toString(x)))
w$K=as.factor(temp_w)
w$wname=c(rep("w k=1",nw),rep("w k=2",nw),rep("w k=3",nw),rep("w k=4",nw))
temp_z=sapply(stored_parameters$K_z[[kk]],function(x) paste(toString(x)))
z$K=as.factor(temp_z)
temp_w=sapply(stored_parameters$K_w[[kk]],function(x) paste(toString(x)))
w$K=as.factor(temp_w)
w$wname=c(rep("w k=1",nw),rep("w k=2",nw),rep("w k=3",nw),rep("w k=4",nw))
temp_z=sapply(stored_parameters$K_z[[kk]],function(x) paste(toString(x)))
z$K=as.factor(temp_z)
temp_w=sapply(stored_parameters$K_w[[kk]],function(x) paste(toString(x)))
w$K=as.factor(temp_w)
z=data.frame(stored_parameters$z[[kk]]) #data.frame(matrix(stored_parameters$z[M,],nz,2))
w=data.frame(matrix(stored_parameters$w[[kk]],nw*ntau,2)) #data.frame(matrix(stored_parameters$w[M,],nw,2))
names(z)<-c('coord1','coord2')
names(w)<-c('coord1','coord2')
temp_z=sapply(stored_parameters$K_z[[kk]],function(x) paste(toString(x)))
z$K=as.factor(temp_z)
temp_w=sapply(stored_parameters$K_w[[kk]],function(x) paste(toString(x)))
w$K=as.factor(temp_w)
z=data.frame(stored_parameters$z[[kk]]) #data.frame(matrix(stored_parameters$z[M,],nz,2))
w=data.frame(matrix(stored_parameters$w[[kk]],nw*ntau,2)) #data.frame(matrix(stored_parameters$w[M,],nw,2))
names(z)<-c('coord1','coord2')
names(w)<-c('coord1','coord2')
temp_z=sapply(stored_parameters$K_z[[kk]],function(x) paste(toString(x)))
z$K=as.factor(temp_z)
temp_w=sapply(stored_parameters$K_w[[kk]],function(x) paste(toString(x)))
w$K=as.factor(temp_w)
temp_w
dim(w)
newK=update_K()
newK$K_w
newK$K_z
current_values$K_w
current_values$K_z
source('C:/Users/samjb/Dropbox/LatentSpaceResponseModels/MCMC Ordinal/mcmc_sampler_ordinal.R', echo=TRUE)
source('C:/Users/samjb/Dropbox/LatentSpaceResponseModels/MCMC Ordinal/mcmc_sampler_ordinal.R', echo=TRUE)
