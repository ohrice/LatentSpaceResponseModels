for(varname in varname_list)
{
acceptance_rates[[varname]]=rep(NA,M)
signame=paste('sigma',varname,sep='_')
global_vars[[paste('proposal_sig_',varname,sep='')]]=initial_proposal_densities[[varname]]
}
#make global
global_vars<<-global_vars
stored_parameters<<-stored_parameters
#initialize likelihood storage
stored_likelihoods=rep(NA,M)
stored_likelihoods[1]=calculate_full_likelihood(stored_parameters,1)
#initialize progress bar
pb <- txtProgressBar(max = M, style = 3)
#plot initial configuration
plot_latent_ordinal_cluster(stored_parameters,1,save_tf=T,save_filename=paste(plot_dirname,'/iteration_',1,'.png',sep=''))
store_iter=1
start_index=2
runtimes=system.time({
for(jj in start_index:M)
{
store=jj%%store_iter==0
storej=floor(jj/store_iter)
setTxtProgressBar(pb, jj)
for(varname in varname_list)
{
out=update_vector(varname)
current_values[[varname]]=out$newvalue
if(store) {stored_parameters[[varname]][[storej]]=out$newvalue}
acceptance_rates[[varname]][jj]=mean(out$accepts)
if(update_sigma_tf[[varname]])
{
newsigma=update_sigma(varname)
sig_varname=paste("sigma",varname,sep="_")
if(store) {stored_parameters[[sig_varname]][[storej]]=newsigma}
current_values[[sig_varname]]=newsigma
}
}
newK=update_K()
current_values$K_z=newK$K_z
current_values$K_w=newK$K_w
stored_vars=update_stored_vars()
newmu=update_mu_clusters()
current_values$mu=newmu
newsigma=update_sigma_clusters()
current_values$sigma=newsigma
newlambda=update_lambda()
current_values$lambda=newlambda
newomega=update_omega()
current_values$omega=newomega
stored_likelihoods[jj]=calculate_full_likelihood(stored_parameters,jj)
if(store) {
stored_parameters$K_z[[storej]]=newK$K_z
stored_parameters$K_w[[storej]]=newK$K_w
stored_parameters$mu[[storej]]=newmu
stored_parameters$sigma[[storej]]=newsigma
stored_parameters$lambda[[storej]]=newlambda
stored_parameters$omega[[storej]]=newomega
}
mi=max(1,jj-batch_size)
for(varname in varname_list)
{
#rosenthall and roberts algorithm
delta=ifelse(mean(acceptance_rates[[varname]][mi:jj],na.rm=T)>.44,min(1.01,1/sqrt(jj)),-min(1.01,1/sqrt(jj)))
global_vars[[paste('proposal_sig_',varname,sep='')]]=global_vars[[paste('proposal_sig_',varname,sep='')]]*exp(delta)
}
if(jj%%plot_iter==0)
{
plot_latent_ordinal_cluster(stored_parameters,1,save_tf=T,save_filename=paste(plot_dirname,'/iteration_',jj,'.png',sep=''))
save(stored_parameters,stored_likelihoods,global_vars,acceptance_rates,file=save_filename)
}
}})
current_values$omega
varname
update_mu_clusters()
source('C:/Users/samjb/Dropbox/MCMC Project/MCMC Ordinal Cluster/update_functions_ordinal_cluster.R', echo=TRUE)
set.seed(myseed)
#load_data
X<<-load_data()
nz<<-dim(X)[1]
nw<<-dim(X)[2]
ndim<<-2
ncluster<<-2
ordinals<<-unique(c(as.matrix(X)))
ordinals<<-ordinals[!is.na(ordinals)]
minord<<-min(ordinals)
maxord<<-max(ordinals)
ntau<<-length(ordinals)
varname_list=c("z","w","theta","beta","tau")
update_sigma_tf=list("z"=FALSE,"w"=FALSE,"theta"=TRUE,"beta"=FALSE,"tau"=TRUE)
#initalize parameters
init_out=initialize_ordinal_cluster_sampler(config_number)
current_values<<-init_out[['init_values']]
stored_vars<<-init_out[['stored_vars']]
hyperparameters<<-init_out[['hyperparameters']]
#initialize plot directory
plot_dirname=file.path(paste('Images/plots_config_',config_number,'_seed_',myseed,sep=''))
if(!file.exists(plot_dirname)) {dir.create(plot_dirname)}
save_filename=file.path(paste('Saved_output/saved_output_config_',config_number,'_seed_',myseed,sep=''))
#initialize storage, acceptance rates, and global variables
stored_parameters=list()
global_vars=list()
acceptance_rates=list()
initial_proposal_densities=list('z'=2,'w'=2,'beta'=2,'theta'=2,'tau'=2)
for(varname in names(current_values))
{
stored_parameters[[varname]][[1]]=current_values[[varname]]
}
for(varname in varname_list)
{
acceptance_rates[[varname]]=rep(NA,M)
signame=paste('sigma',varname,sep='_')
global_vars[[paste('proposal_sig_',varname,sep='')]]=initial_proposal_densities[[varname]]
}
#make global
global_vars<<-global_vars
stored_parameters<<-stored_parameters
#initialize likelihood storage
stored_likelihoods=rep(NA,M)
stored_likelihoods[1]=calculate_full_likelihood(stored_parameters,1)
#initialize progress bar
pb <- txtProgressBar(max = M, style = 3)
#plot initial configuration
plot_latent_ordinal_cluster(stored_parameters,1,save_tf=T,save_filename=paste(plot_dirname,'/iteration_',1,'.png',sep=''))
store_iter=1
start_index=2
runtimes=system.time({
for(jj in start_index:M)
{
store=jj%%store_iter==0
storej=floor(jj/store_iter)
setTxtProgressBar(pb, jj)
for(varname in varname_list)
{
out=update_vector(varname)
current_values[[varname]]=out$newvalue
if(store) {stored_parameters[[varname]][[storej]]=out$newvalue}
acceptance_rates[[varname]][jj]=mean(out$accepts)
if(update_sigma_tf[[varname]])
{
newsigma=update_sigma(varname)
sig_varname=paste("sigma",varname,sep="_")
if(store) {stored_parameters[[sig_varname]][[storej]]=newsigma}
current_values[[sig_varname]]=newsigma
}
}
newK=update_K()
current_values$K_z=newK$K_z
current_values$K_w=newK$K_w
stored_vars=update_stored_vars()
newmu=update_mu_clusters()
current_values$mu=newmu
newsigma=update_sigma_clusters()
current_values$sigma=newsigma
newlambda=update_lambda()
current_values$lambda=newlambda
newomega=update_omega()
current_values$omega=newomega
stored_likelihoods[jj]=calculate_full_likelihood(stored_parameters,jj)
if(store) {
stored_parameters$K_z[[storej]]=newK$K_z
stored_parameters$K_w[[storej]]=newK$K_w
stored_parameters$mu[[storej]]=newmu
stored_parameters$sigma[[storej]]=newsigma
stored_parameters$lambda[[storej]]=newlambda
stored_parameters$omega[[storej]]=newomega
}
mi=max(1,jj-batch_size)
for(varname in varname_list)
{
#rosenthall and roberts algorithm
delta=ifelse(mean(acceptance_rates[[varname]][mi:jj],na.rm=T)>.44,min(1.01,1/sqrt(jj)),-min(1.01,1/sqrt(jj)))
global_vars[[paste('proposal_sig_',varname,sep='')]]=global_vars[[paste('proposal_sig_',varname,sep='')]]*exp(delta)
}
if(jj%%plot_iter==0)
{
plot_latent_ordinal_cluster(stored_parameters,1,save_tf=T,save_filename=paste(plot_dirname,'/iteration_',jj,'.png',sep=''))
save(stored_parameters,stored_likelihoods,global_vars,acceptance_rates,file=save_filename)
}
}})
set.seed(myseed)
#load_data
X<<-load_data()
nz<<-dim(X)[1]
nw<<-dim(X)[2]
ndim<<-2
ncluster<<-2
ordinals<<-unique(c(as.matrix(X)))
ordinals<<-ordinals[!is.na(ordinals)]
minord<<-min(ordinals)
maxord<<-max(ordinals)
ntau<<-length(ordinals)
varname_list=c("z","w","theta","beta","tau")
update_sigma_tf=list("z"=FALSE,"w"=FALSE,"theta"=TRUE,"beta"=FALSE,"tau"=TRUE)
#initalize parameters
init_out=initialize_ordinal_cluster_sampler(config_number)
current_values<<-init_out[['init_values']]
stored_vars<<-init_out[['stored_vars']]
hyperparameters<<-init_out[['hyperparameters']]
#initialize plot directory
plot_dirname=file.path(paste('Images/plots_config_',config_number,'_seed_',myseed,sep=''))
if(!file.exists(plot_dirname)) {dir.create(plot_dirname)}
save_filename=file.path(paste('Saved_output/saved_output_config_',config_number,'_seed_',myseed,sep=''))
#initialize storage, acceptance rates, and global variables
stored_parameters=list()
global_vars=list()
acceptance_rates=list()
initial_proposal_densities=list('z'=2,'w'=2,'beta'=2,'theta'=2,'tau'=2)
for(varname in names(current_values))
{
stored_parameters[[varname]][[1]]=current_values[[varname]]
}
for(varname in varname_list)
{
acceptance_rates[[varname]]=rep(NA,M)
signame=paste('sigma',varname,sep='_')
global_vars[[paste('proposal_sig_',varname,sep='')]]=initial_proposal_densities[[varname]]
}
#make global
global_vars<<-global_vars
stored_parameters<<-stored_parameters
#initialize likelihood storage
stored_likelihoods=rep(NA,M)
stored_likelihoods[1]=calculate_full_likelihood(stored_parameters,1)
#initialize progress bar
pb <- txtProgressBar(max = M, style = 3)
#plot initial configuration
plot_latent_ordinal_cluster(stored_parameters,1,save_tf=T,save_filename=paste(plot_dirname,'/iteration_',1,'.png',sep=''))
store_iter=1
start_index=2
runtimes=system.time({
for(jj in start_index:M)
{
store=jj%%store_iter==0
storej=floor(jj/store_iter)
setTxtProgressBar(pb, jj)
for(varname in varname_list)
{
out=update_vector(varname)
current_values[[varname]]=out$newvalue
if(store) {stored_parameters[[varname]][[storej]]=out$newvalue}
acceptance_rates[[varname]][jj]=mean(out$accepts)
if(update_sigma_tf[[varname]])
{
newsigma=update_sigma(varname)
sig_varname=paste("sigma",varname,sep="_")
if(store) {stored_parameters[[sig_varname]][[storej]]=newsigma}
current_values[[sig_varname]]=newsigma
}
}
newK=update_K()
current_values$K_z=newK$K_z
current_values$K_w=newK$K_w
stored_vars=update_stored_vars()
newmu=update_mu_clusters()
current_values$mu=newmu
newsigma=update_sigma_clusters()
current_values$sigma=newsigma
newlambda=update_lambda()
current_values$lambda=newlambda
newomega=update_omega()
current_values$omega=newomega
stored_likelihoods[jj]=calculate_full_likelihood(stored_parameters,jj)
if(store) {
stored_parameters$K_z[[storej]]=newK$K_z
stored_parameters$K_w[[storej]]=newK$K_w
stored_parameters$mu[[storej]]=newmu
stored_parameters$sigma[[storej]]=newsigma
stored_parameters$lambda[[storej]]=newlambda
stored_parameters$omega[[storej]]=newomega
}
mi=max(1,jj-batch_size)
for(varname in varname_list)
{
#rosenthall and roberts algorithm
delta=ifelse(mean(acceptance_rates[[varname]][mi:jj],na.rm=T)>.44,min(1.01,1/sqrt(jj)),-min(1.01,1/sqrt(jj)))
global_vars[[paste('proposal_sig_',varname,sep='')]]=global_vars[[paste('proposal_sig_',varname,sep='')]]*exp(delta)
}
if(jj%%plot_iter==0)
{
plot_latent_ordinal_cluster(stored_parameters,1,save_tf=T,save_filename=paste(plot_dirname,'/iteration_',jj,'.png',sep=''))
save(stored_parameters,stored_likelihoods,global_vars,acceptance_rates,file=save_filename)
}
}})
source('C:/Users/samjb/Dropbox/MCMC Project/MCMC Ordinal Cluster/update_functions_ordinal_cluster.R', echo=TRUE)
set.seed(myseed)
#load_data
X<<-load_data()
nz<<-dim(X)[1]
nw<<-dim(X)[2]
ndim<<-2
ncluster<<-2
ordinals<<-unique(c(as.matrix(X)))
ordinals<<-ordinals[!is.na(ordinals)]
minord<<-min(ordinals)
maxord<<-max(ordinals)
ntau<<-length(ordinals)
varname_list=c("z","w","theta","beta","tau")
update_sigma_tf=list("z"=FALSE,"w"=FALSE,"theta"=TRUE,"beta"=FALSE,"tau"=TRUE)
#initalize parameters
init_out=initialize_ordinal_cluster_sampler(config_number)
current_values<<-init_out[['init_values']]
stored_vars<<-init_out[['stored_vars']]
hyperparameters<<-init_out[['hyperparameters']]
#initialize plot directory
plot_dirname=file.path(paste('Images/plots_config_',config_number,'_seed_',myseed,sep=''))
if(!file.exists(plot_dirname)) {dir.create(plot_dirname)}
save_filename=file.path(paste('Saved_output/saved_output_config_',config_number,'_seed_',myseed,sep=''))
#initialize storage, acceptance rates, and global variables
stored_parameters=list()
global_vars=list()
acceptance_rates=list()
initial_proposal_densities=list('z'=2,'w'=2,'beta'=2,'theta'=2,'tau'=2)
for(varname in names(current_values))
{
stored_parameters[[varname]][[1]]=current_values[[varname]]
}
for(varname in varname_list)
{
acceptance_rates[[varname]]=rep(NA,M)
signame=paste('sigma',varname,sep='_')
global_vars[[paste('proposal_sig_',varname,sep='')]]=initial_proposal_densities[[varname]]
}
#make global
global_vars<<-global_vars
stored_parameters<<-stored_parameters
#initialize likelihood storage
stored_likelihoods=rep(NA,M)
stored_likelihoods[1]=calculate_full_likelihood(stored_parameters,1)
#initialize progress bar
pb <- txtProgressBar(max = M, style = 3)
#plot initial configuration
plot_latent_ordinal_cluster(stored_parameters,1,save_tf=T,save_filename=paste(plot_dirname,'/iteration_',1,'.png',sep=''))
store_iter=1
start_index=2
runtimes=system.time({
for(jj in start_index:M)
{
store=jj%%store_iter==0
storej=floor(jj/store_iter)
setTxtProgressBar(pb, jj)
for(varname in varname_list)
{
out=update_vector(varname)
current_values[[varname]]=out$newvalue
if(store) {stored_parameters[[varname]][[storej]]=out$newvalue}
acceptance_rates[[varname]][jj]=mean(out$accepts)
if(update_sigma_tf[[varname]])
{
newsigma=update_sigma(varname)
sig_varname=paste("sigma",varname,sep="_")
if(store) {stored_parameters[[sig_varname]][[storej]]=newsigma}
current_values[[sig_varname]]=newsigma
}
}
newK=update_K()
current_values$K_z=newK$K_z
current_values$K_w=newK$K_w
stored_vars=update_stored_vars()
newmu=update_mu_clusters()
current_values$mu=newmu
newsigma=update_sigma_clusters()
current_values$sigma=newsigma
newlambda=update_lambda()
current_values$lambda=newlambda
newomega=update_omega()
current_values$omega=newomega
stored_likelihoods[jj]=calculate_full_likelihood(stored_parameters,jj)
if(store) {
stored_parameters$K_z[[storej]]=newK$K_z
stored_parameters$K_w[[storej]]=newK$K_w
stored_parameters$mu[[storej]]=newmu
stored_parameters$sigma[[storej]]=newsigma
stored_parameters$lambda[[storej]]=newlambda
stored_parameters$omega[[storej]]=newomega
}
mi=max(1,jj-batch_size)
for(varname in varname_list)
{
#rosenthall and roberts algorithm
delta=ifelse(mean(acceptance_rates[[varname]][mi:jj],na.rm=T)>.44,min(1.01,1/sqrt(jj)),-min(1.01,1/sqrt(jj)))
global_vars[[paste('proposal_sig_',varname,sep='')]]=global_vars[[paste('proposal_sig_',varname,sep='')]]*exp(delta)
}
if(jj%%plot_iter==0)
{
plot_latent_ordinal_cluster(stored_parameters,1,save_tf=T,save_filename=paste(plot_dirname,'/iteration_',jj,'.png',sep=''))
save(stored_parameters,stored_likelihoods,global_vars,acceptance_rates,file=save_filename)
}
}})
set.seed(myseed)
#load_data
X<<-load_data()
nz<<-dim(X)[1]
nw<<-dim(X)[2]
ndim<<-2
ncluster<<-2
ordinals<<-unique(c(as.matrix(X)))
ordinals<<-ordinals[!is.na(ordinals)]
minord<<-min(ordinals)
maxord<<-max(ordinals)
ntau<<-length(ordinals)
batch_size<<-1000
varname_list=c("z","w","theta","beta","tau")
update_sigma_tf=list("z"=FALSE,"w"=FALSE,"theta"=TRUE,"beta"=FALSE,"tau"=TRUE)
#initalize parameters
init_out=initialize_ordinal_cluster_sampler(config_number)
current_values<<-init_out[['init_values']]
stored_vars<<-init_out[['stored_vars']]
hyperparameters<<-init_out[['hyperparameters']]
#initialize plot directory
plot_dirname=file.path(paste('Images/plots_config_',config_number,'_seed_',myseed,sep=''))
if(!file.exists(plot_dirname)) {dir.create(plot_dirname)}
save_filename=file.path(paste('Saved_output/saved_output_config_',config_number,'_seed_',myseed,sep=''))
#initialize storage, acceptance rates, and global variables
stored_parameters=list()
global_vars=list()
acceptance_rates=list()
initial_proposal_densities=list('z'=2,'w'=2,'beta'=2,'theta'=2,'tau'=2)
for(varname in names(current_values))
{
stored_parameters[[varname]][[1]]=current_values[[varname]]
}
for(varname in varname_list)
{
acceptance_rates[[varname]]=rep(NA,M)
signame=paste('sigma',varname,sep='_')
global_vars[[paste('proposal_sig_',varname,sep='')]]=initial_proposal_densities[[varname]]
}
#make global
global_vars<<-global_vars
stored_parameters<<-stored_parameters
#initialize likelihood storage
stored_likelihoods=rep(NA,M)
stored_likelihoods[1]=calculate_full_likelihood(stored_parameters,1)
#initialize progress bar
pb <- txtProgressBar(max = M, style = 3)
#plot initial configuration
plot_latent_ordinal_cluster(stored_parameters,1,save_tf=T,save_filename=paste(plot_dirname,'/iteration_',1,'.png',sep=''))
store_iter=1
start_index=2
runtimes=system.time({
for(jj in start_index:M)
{
store=jj%%store_iter==0
storej=floor(jj/store_iter)
setTxtProgressBar(pb, jj)
for(varname in varname_list)
{
out=update_vector(varname)
current_values[[varname]]=out$newvalue
if(store) {stored_parameters[[varname]][[storej]]=out$newvalue}
acceptance_rates[[varname]][jj]=mean(out$accepts)
if(update_sigma_tf[[varname]])
{
newsigma=update_sigma(varname)
sig_varname=paste("sigma",varname,sep="_")
if(store) {stored_parameters[[sig_varname]][[storej]]=newsigma}
current_values[[sig_varname]]=newsigma
}
}
newK=update_K()
current_values$K_z=newK$K_z
current_values$K_w=newK$K_w
stored_vars=update_stored_vars()
newmu=update_mu_clusters()
current_values$mu=newmu
newsigma=update_sigma_clusters()
current_values$sigma=newsigma
newlambda=update_lambda()
current_values$lambda=newlambda
newomega=update_omega()
current_values$omega=newomega
stored_likelihoods[jj]=calculate_full_likelihood(stored_parameters,jj)
if(store) {
stored_parameters$K_z[[storej]]=newK$K_z
stored_parameters$K_w[[storej]]=newK$K_w
stored_parameters$mu[[storej]]=newmu
stored_parameters$sigma[[storej]]=newsigma
stored_parameters$lambda[[storej]]=newlambda
stored_parameters$omega[[storej]]=newomega
}
mi=max(1,jj-batch_size)
for(varname in varname_list)
{
#rosenthall and roberts algorithm
delta=ifelse(mean(acceptance_rates[[varname]][mi:jj],na.rm=T)>.44,min(1.01,1/sqrt(jj)),-min(1.01,1/sqrt(jj)))
global_vars[[paste('proposal_sig_',varname,sep='')]]=global_vars[[paste('proposal_sig_',varname,sep='')]]*exp(delta)
}
if(jj%%plot_iter==0)
{
plot_latent_ordinal_cluster(stored_parameters,1,save_tf=T,save_filename=paste(plot_dirname,'/iteration_',jj,'.png',sep=''))
save(stored_parameters,stored_likelihoods,global_vars,acceptance_rates,file=save_filename)
}
}})
source('C:/Users/samjb/Dropbox/MCMC Project/MCMC Ordinal Cluster/mcmc_sampler_ordinal_cluster.R', echo=TRUE)
source('C:/Users/samjb/Dropbox/MCMC Project/MCMC Ordinal Cluster/mcmc_sampler_ordinal.R', echo=TRUE)
load_charity_data<-function()
{
rawdata=read.table('../Data/charity.dat')
X=rawdata[!apply(is.na(rawdata),1,any),]
return(list('data'=X,'dataname'='charity'))
}
source('C:/Users/samjb/Dropbox/MCMC Project/MCMC Ordinal/mcmc_sampler_ordinal.R', echo=TRUE)
setwd("C:/Users/samjb/Dropbox/MCMC Project/MCMC Ordinal")
source('C:/Users/samjb/Dropbox/MCMC Project/MCMC Ordinal/mcmc_sampler_ordinal.R', echo=TRUE)
setwd("C:/Users/samjb/Dropbox/MCMC Project/MCMC Ordinal")
load_charity_data()
source('C:/Users/samjb/Dropbox/MCMC Project/MCMC Ordinal/mcmc_sampler_ordinal.R', echo=TRUE)
source('C:/Users/samjb/Dropbox/MCMC Project/MCMC Ordinal/make_config.R', echo=TRUE)
source('C:/Users/samjb/Dropbox/MCMC Project/MCMC Ordinal/mcmc_sampler_ordinal.R', echo=TRUE)
source('C:/Users/samjb/Dropbox/MCMC Project/MCMC Ordinal/mcmc_sampler_ordinal.R', echo=TRUE)
source('C:/Users/samjb/Dropbox/MCMC Project/MCMC Ordinal/mcmc_sampler_ordinal.R', echo=TRUE)
