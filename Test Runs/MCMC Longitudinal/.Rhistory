update_sigma_clusters()
update_sigma_clusters()
update_sigma_clusters()
update_sigma_clusters()
source('~/Dropbox/LatentSpaceResponseModels/Test Runs/MCMC Longitudinal/mcmc_sampler.R', echo=TRUE)
source('~/Dropbox/LatentSpaceResponseModels/Test Runs/MCMC Longitudinal/mcmc_sampler.R', echo=TRUE)
source('~/Dropbox/LatentSpaceResponseModels/Test Runs/MCMC Longitudinal/mcmc_sampler.R', echo=TRUE)
source('likelihood_functions_longitudinal.R')
plot_fun=plot_latent_longitudinal
simulate_data_longitudinal(myseed)
ndim<<-2
ncluster<<-2
store_iter=1
batch_size=2000
plot_dirname=file.path(paste('Images/plots_config_',config_number,'_seed_',myseed,'_data_',dataname,sep=''))
if(!file.exists(plot_dirname)) {dir.create(plot_dirname)}
save_filename=file.path(paste('Saved_output/saved_output_config_',config_number,'_seed_',myseed,'_data_',dataname,sep=''))
overwrite=T
if(file.exists(save_filename) & !overwrite)
{
load(save_filename,verb=T)
start_index=length(stored_parameters$z)
print(paste('Continuing from previous run at iteration:',start_index))
set.seed(current_seed)
assign("current_values",current_values,envir = .GlobalEnv)
assign("stored_vars",stored_vars,envir = .GlobalEnv)
assign("hyperparameters",hyperparameters,envir = .GlobalEnv)
assign("proposal_sigs",proposal_sigs,envir = .GlobalEnv)
}else
{
print('Starting from scratch.')
#initalize
set.seed(myseed)
init_out=initialize_sampler_longitudinal(config_number,ordinal=F)
assign("current_values",init_out[['init_values']],envir = .GlobalEnv)
assign("stored_vars",init_out[['stored_vars']],envir = .GlobalEnv)
assign("hyperparameters",init_out[['hyperparameters']],envir = .GlobalEnv)
assign("proposal_sigs",init_out[['proposal_sigs']],envir = .GlobalEnv)
acceptance_rates=list()
for(varname in varname_list)
{
acceptance_rates[[varname]]=rep(NA,M)
}
stored_parameters=list()
for(varname in names(current_values))
{
stored_parameters[[varname]]=list()
stored_parameters[[varname]][[1]]=current_values[[varname]]
}
stored_likelihoods=rep(NA,M)
stored_likelihoods[1]=calculate_full_likelihood(stored_parameters,1)
###sample
plot_fun(stored_parameters,1,mytitle='Initial Configuration',save_fig=T,save_filename=paste(plot_dirname,'/initial_configuration.png',sep=''))
start_index=2
}
for(jj in start_index:M)
{
print(jj)
current_seed=runif(1)*1e9 #for continuation purposes
set.seed(current_seed)
store=jj%%store_iter==0
storej=floor(jj/store_iter)
setTxtProgressBar(pb, jj)
for(varname in varname_list)
{
out=update_vector(varname)
global_update("current_values",varname,out$newvalue)
if(store) {stored_parameters[[varname]][[storej]]=out$newvalue}
acceptance_rates[[varname]][jj]=mean(out$accepts)
if(update_sigma_tf[[varname]])
{
newsigma=update_sigma(varname)
sig_varname=paste("sigma",varname,sep="_")
if(store) {stored_parameters[[sig_varname]][[storej]]=newsigma}
global_update("current_values",sig_varname,newsigma)
}
}
assign("stored_vars",update_stored_vars(),envir = .GlobalEnv)
newK=update_K()
global_update("current_values","K_z",newK$K_z)
#store values for new Ks:
global_update("current_values","mu",update_mu_clusters())
global_update("current_values","sigma",update_sigma_clusters())
global_update("current_values","lambda",update_lambda())
global_update("current_values","omega",update_omega())
stored_likelihoods[jj]=calculate_full_likelihood(stored_parameters,jj)
if(store) {
stored_parameters$K_w[[storej]]=current_values$K_w
stored_parameters$K_z[[storej]]=current_values$K_z
stored_parameters$mu[[storej]]=current_values$mu
stored_parameters$sigma[[storej]]=current_values$sigma
stored_parameters$lambda[[storej]]=current_values$lambda
stored_parameters$omega[[storej]]=current_values$omega
save(stored_parameters,current_values,stored_likelihoods,stored_vars,hyperparameters,proposal_sigs,acceptance_rates,current_seed,varname_list,update_sigma_tf,file=save_filename)
}
mi=max(1,jj-batch_size)
for(varname in varname_list)
{
#rosenthall and roberts algorithm
delta=ifelse(mean(acceptance_rates[[varname]][batch_size:jj],na.rm=T)>.44,min(.01,1/sqrt(jj)),-min(.01,1/sqrt(jj)))
proposal_sigs[[varname]]=proposal_sigs[[varname]]*exp(delta)
}
assign("proposal_sigs",proposal_sigs,envir = .GlobalEnv)
if(jj%%plot_iter==0)
{
print('acceptance rates:')
print(sapply(acceptance_rates,function(x) mean(x,na.rm=T)))
print(data.frame(proposal_sigs))
plot_fun(stored_parameters,storej,mytitle=toString(jj),save_fig=T,save_filename=paste(plot_dirname,'/iteration_',jj,'.png',sep=''))
save(stored_parameters,current_values,stored_likelihoods,stored_vars,hyperparameters,proposal_sigs,acceptance_rates,current_seed,varname_list,update_sigma_tf,file=save_filename)
}
}
source('~/Dropbox/LatentSpaceResponseModels/Test Runs/MCMC Longitudinal/mcmc_sampler.R', echo=TRUE)
current_values$mu
names(mu)=c('coord1','coord2')
mu=data.frame(stored_parameters$mu[[store_index]])
mu=data.frame(stores$mu[[2]])
save_filename=file.path(paste('Saved_output/saved_output_config_',config_number,'_seed_',111,'_data_',dataname,sep=''))
load(save_filename,verb=T)
mu=data.frame(stores$mu[[2]])
mu=data.frame(stored_parameters$mu[[2]])
mu
names(mu)=c('coord1','coord2')
mu
source('~/Dropbox/LatentSpaceResponseModels/Test Runs/MCMC Longitudinal/mcmc_sampler.R', echo=TRUE)
source('likelihood_functions_longitudinal.R')
plot_fun=plot_latent_longitudinal
simulate_data_longitudinal(myseed)
ndim<<-2
ncluster<<-2
store_iter=1
batch_size=2000
plot_dirname=file.path(paste('Images/plots_config_',config_number,'_seed_',myseed,'_data_',dataname,sep=''))
if(!file.exists(plot_dirname)) {dir.create(plot_dirname)}
save_filename=file.path(paste('Saved_output/saved_output_config_',config_number,'_seed_',myseed,'_data_',dataname,sep=''))
overwrite=T
if(file.exists(save_filename) & !overwrite)
{
load(save_filename,verb=T)
start_index=length(stored_parameters$z)
print(paste('Continuing from previous run at iteration:',start_index))
set.seed(current_seed)
assign("current_values",current_values,envir = .GlobalEnv)
assign("stored_vars",stored_vars,envir = .GlobalEnv)
assign("hyperparameters",hyperparameters,envir = .GlobalEnv)
assign("proposal_sigs",proposal_sigs,envir = .GlobalEnv)
}else
{
print('Starting from scratch.')
#initalize
set.seed(myseed)
init_out=initialize_sampler_longitudinal(config_number,ordinal=F)
assign("current_values",init_out[['init_values']],envir = .GlobalEnv)
assign("stored_vars",init_out[['stored_vars']],envir = .GlobalEnv)
assign("hyperparameters",init_out[['hyperparameters']],envir = .GlobalEnv)
assign("proposal_sigs",init_out[['proposal_sigs']],envir = .GlobalEnv)
acceptance_rates=list()
for(varname in varname_list)
{
acceptance_rates[[varname]]=rep(NA,M)
}
stored_parameters=list()
for(varname in names(current_values))
{
stored_parameters[[varname]]=list()
stored_parameters[[varname]][[1]]=current_values[[varname]]
}
stored_likelihoods=rep(NA,M)
stored_likelihoods[1]=calculate_full_likelihood(stored_parameters,1)
###sample
plot_fun(stored_parameters,1,mytitle='Initial Configuration',save_fig=T,save_filename=paste(plot_dirname,'/initial_configuration.png',sep=''))
start_index=2
}
pb <- txtProgressBar(max = M, style = 3)
plot_fun(stored_parameters,1,mytitle='Initial Configuration',save_fig=T,save_filename=paste(plot_dirname,'/initial_configuration.png',sep=''))
jj=2
print(jj)
current_seed=runif(1)*1e9 #for continuation purposes
set.seed(current_seed)
store=jj%%store_iter==0
storej=floor(jj/store_iter)
setTxtProgressBar(pb, jj)
for(varname in varname_list)
{
out=update_vector(varname)
global_update("current_values",varname,out$newvalue)
if(store) {stored_parameters[[varname]][[storej]]=out$newvalue}
acceptance_rates[[varname]][jj]=mean(out$accepts)
if(update_sigma_tf[[varname]])
{
newsigma=update_sigma(varname)
sig_varname=paste("sigma",varname,sep="_")
if(store) {stored_parameters[[sig_varname]][[storej]]=newsigma}
global_update("current_values",sig_varname,newsigma)
}
}
assign("stored_vars",update_stored_vars(),envir = .GlobalEnv)
newK=update_K()
global_update("current_values","K_z",newK$K_z)
#store values for new Ks:
global_update("current_values","mu",update_mu_clusters())
global_update("current_values","sigma",update_sigma_clusters())
global_update("current_values","lambda",update_lambda())
global_update("current_values","omega",update_omega())
stored_likelihoods[jj]=calculate_full_likelihood(stored_parameters,jj)
if(store) {
stored_parameters$K_w[[storej]]=current_values$K_w
stored_parameters$K_z[[storej]]=current_values$K_z
stored_parameters$mu[[storej]]=current_values$mu
stored_parameters$sigma[[storej]]=current_values$sigma
stored_parameters$lambda[[storej]]=current_values$lambda
stored_parameters$omega[[storej]]=current_values$omega
save(stored_parameters,current_values,stored_likelihoods,stored_vars,hyperparameters,proposal_sigs,acceptance_rates,current_seed,varname_list,update_sigma_tf,file=save_filename)
}
mi=max(1,jj-batch_size)
for(varname in varname_list)
{
#rosenthall and roberts algorithm
delta=ifelse(mean(acceptance_rates[[varname]][batch_size:jj],na.rm=T)>.44,min(.01,1/sqrt(jj)),-min(.01,1/sqrt(jj)))
proposal_sigs[[varname]]=proposal_sigs[[varname]]*exp(delta)
}
plot_fun(stored_parameters,storej,mytitle=toString(jj),save_fig=T,save_filename=paste(plot_dirname,'/iteration_',jj,'.png',sep=''))
source('~/Dropbox/LatentSpaceResponseModels/Test Runs/MCMC Longitudinal/mcmc_sampler.R', echo=TRUE)
current_values$mu
source('~/Dropbox/LatentSpaceResponseModels/Test Runs/MCMC Longitudinal/mcmc_sampler.R', echo=TRUE)
source('~/Dropbox/LatentSpaceResponseModels/Test Runs/MCMC Longitudinal/mcmc_sampler.R', echo=TRUE)
source('~/Dropbox/LatentSpaceResponseModels/Test Runs/MCMC Longitudinal/mcmc_sampler.R', echo=TRUE)
source('likelihood_functions_longitudinal.R')
plot_fun=plot_latent_longitudinal
simulate_data_longitudinal(myseed)
ndim<<-2
ncluster<<-2
store_iter=1
batch_size=2000
plot_dirname=file.path(paste('Images/plots_config_',config_number,'_seed_',myseed,'_data_',dataname,sep=''))
if(!file.exists(plot_dirname)) {dir.create(plot_dirname)}
save_filename=file.path(paste('Saved_output/saved_output_config_',config_number,'_seed_',myseed,'_data_',dataname,sep=''))
overwrite=T
if(file.exists(save_filename) & !overwrite)
{
load(save_filename,verb=T)
start_index=length(stored_parameters$z)
print(paste('Continuing from previous run at iteration:',start_index))
set.seed(current_seed)
assign("current_values",current_values,envir = .GlobalEnv)
assign("stored_vars",stored_vars,envir = .GlobalEnv)
assign("hyperparameters",hyperparameters,envir = .GlobalEnv)
assign("proposal_sigs",proposal_sigs,envir = .GlobalEnv)
}else
{
print('Starting from scratch.')
#initalize
set.seed(myseed)
init_out=initialize_sampler_longitudinal(config_number,ordinal=F)
assign("current_values",init_out[['init_values']],envir = .GlobalEnv)
assign("stored_vars",init_out[['stored_vars']],envir = .GlobalEnv)
assign("hyperparameters",init_out[['hyperparameters']],envir = .GlobalEnv)
assign("proposal_sigs",init_out[['proposal_sigs']],envir = .GlobalEnv)
acceptance_rates=list()
for(varname in varname_list)
{
acceptance_rates[[varname]]=rep(NA,M)
}
stored_parameters=list()
for(varname in names(current_values))
{
stored_parameters[[varname]]=list()
stored_parameters[[varname]][[1]]=current_values[[varname]]
}
stored_likelihoods=rep(NA,M)
stored_likelihoods[1]=calculate_full_likelihood(stored_parameters,1)
###sample
plot_fun(stored_parameters,1,mytitle='Initial Configuration',save_fig=T,save_filename=paste(plot_dirname,'/initial_configuration.png',sep=''))
start_index=2
}
current_values
source('~/Dropbox/LatentSpaceResponseModels/Test Runs/MCMC Longitudinal/mcmc_sampler.R', echo=TRUE)
source('~/Dropbox/LatentSpaceResponseModels/Test Runs/MCMC Longitudinal/mcmc_sampler.R', echo=TRUE)
source('~/Dropbox/LatentSpaceResponseModels/Test Runs/MCMC Longitudinal/mcmc_sampler.R', echo=TRUE)
source('~/Dropbox/LatentSpaceResponseModels/Test Runs/MCMC Longitudinal/mcmc_sampler.R', echo=TRUE)
source('~/Dropbox/LatentSpaceResponseModels/Test Runs/MCMC Longitudinal/make_config.R', echo=TRUE)
source('~/Dropbox/LatentSpaceResponseModels/Test Runs/MCMC Longitudinal/mcmc_sampler.R', echo=TRUE)
source('~/Dropbox/LatentSpaceResponseModels/Test Runs/MCMC Longitudinal/mcmc_sampler.R', echo=TRUE)
gmz=sum(K_z_init==ii)
if(!file.exists('Saved_output')) {dir.create('Saved_output')}
if(!file.exists('Images')) {dir.create('Images')}
load(paste('Run_configs/config_',config_number,'.Rdat',sep=''))
#hyperparameters
hyperparameters=list()
hyperparameters$nu=nu_config
hyperparameters$invgam_shape_all=shape_all_config
hyperparameters$invgam_rate_all=rate_all_config
#configurable initialization parameters
omega_init=omega_init_config
sigma_theta_init=sigma_theta_config #sqrt(rinvgamma(1,shape=invgam_shape_additive,rate=invgam_rate_additive))
theta_init=matrix(rnorm(nz,0,sigma_theta_init),nz,1)
#initialize z:
lambda_init=rdirichlet(1,rep(hyperparameters$nu,ncluster))
K_z_init=sample(1:ncluster,nz,rep=T,prob=lambda_init)
if(ordinal)
{
K_w_init=sample(1:ncluster,nw*ntau,rep=T,prob=lambda_init)
}else{
K_w_init=sample(1:ncluster,nw,rep=T,prob=lambda_init)
}
mu_init=matrix(rnorm(2*ncluster,sd=sigma_mu_config),ncluster,2)
sigma_init=rep(cluster_sigma_config,ncluster) #sqrt(rinvgamma(ncluster,shape=invgam_shape_latent,rate=invgam_rate_latent))
z_init=matrix(NA,nz,2)
colnames(z_init)<-c('coord1','coord2')
if(ordinal)
{
w_init=matrix(NA,nw*ntau,2)
}
colnames(w_init)<-c('coord1','coord2')
gms=rep(NA,ncluster)
gmeans=matrix(NA,ncluster,2)
gsd=rep(NA,ncluster)
for(ii in 1:ncluster)
{
gmw=sum(K_w_init==ii)
gmz=sum(K_z_init==ii)
gm=gmw+gmz
wii=cbind(rnorm(gmw,mean=mu_init[ii,1],sd=sigma_init[ii]),
rnorm(gmw,mean=mu_init[ii,2],sd=sigma_init[ii]))
zii=cbind(rnorm(gmz,mean=mu_init[ii,1],sd=sigma_init[ii]),
rnorm(gmz,mean=mu_init[ii,2],sd=sigma_init[ii]))
w_init[K_w_init==ii,]=wii
z_init[K_z_init==ii,]=zii
temp=rbind(wii,zii)
gms[ii]=gm
gmeans[ii,]=apply(temp,2,mean)
gsd[ii]=sqrt(sum((temp-gmeans[ii,])^2)/2)
}
stored_vars_init=list()
stored_vars_init$gm=gms
stored_vars_init$gmeans=gmeans
stored_vars_init$gsd=gsd
#init beta
if(ordinal)
{
sigma_beta=0
beta_init=matrix(0,nw,1)
}else{
sigma_beta=sigma_beta_config
beta_init=matrix(rnorm(nw,0,sigma_beta),nw,1)
}
init_values=list("z"=z_init,
"w"=w_init,
"theta"=theta_init,
"sigma_theta"=sigma_theta_init,
"beta"=beta_init,
"sigma_beta"=sigma_beta,
"mu"=mu_init,
"sigma"=sigma_init,
"lambda"=lambda_init,
"K_z"=K_z_init,
"K_w"=K_w_init,
"omega"=omega_init)
if(ordinal)
{
sigma_tau_init=sigma_tau_config
tau_init=matrix(rnorm(nw*ntau,0,sigma_tau_init),nw,ntau)
tau_init[,1]=0
tau_mat=aperm(array(rep(tau_init,nz),dim=c(nw,ntau,nz)),perm=c(3,1,2))
stored_vars_init$tau_mat=tau_mat
init_values$tau=tau_init
init_values$sigma_tau=sigma_tau_init
assign("varname_list",c("z","w","theta","tau"),envir=.GlobalEnv)
assign("update_sigma_tf",list("z"=FALSE,"w"=FALSE,"theta"=TRUE,"tau"=TRUE),envir=.GlobalEnv)
}
vanilla=!ordinal
if(vanilla)
{
assign("varname_list",c("z","w","theta","beta"),envir=.GlobalEnv)
assign("update_sigma_tf",list("z"=FALSE,"w"=FALSE,"theta"=TRUE,"beta"=FALSE),envir=.GlobalEnv)
}
proposal_sigs=list()
for(varname in varname_list)
{
proposal_sigs[[varname]]=2
}
return(list('init_values'=init_values,'stored_vars'=stored_vars_init,'hyperparameters'=hyperparameters,'proposal_sigs'=proposal_sigs))
}
########################################
##########LONGITUDINAL VERSION##########
########################################
initialize_sampler_longitudinal<-function(config_number,ordinal=F)
{
if(!file.exists('Saved_output')) {dir.create('Saved_output')}
if(!file.exists('Images')) {dir.create('Images')}
load(paste('Run_configs/config_',config_number,'.Rdat',sep=''))
hyperparameters=list()
init_values=list()
stored_vars_init=list()
######init hyperparameters######
hyperparameters$nu=nu_config
hyperparameters$invgam_shape_all=shape_all_config
hyperparameters$invgam_rate_all=rate_all_config
######init cluser params######
omega_init=omega_init_config
init_values[['omega']]=omega_init
lambda_init=rdirichlet(1,rep(hyperparameters$nu,ncluster))
init_values[['lambda']]=lambda_init
######init theta######
sigma_theta1_init=sigma_theta_config #sqrt(rinvgamma(1,shape=invgam_shape_additive,rate=invgam_rate_additive))
sigma_theta2_init=sigma_theta_config #sqrt(rinvgamma(1,shape=invgam_shape_additive,rate=invgam_rate_additive))
theta1_init=matrix(rnorm(nz,0,sigma_theta1_init),nz,1)
theta2_init=matrix(rnorm(nz,0,sigma_theta2_init),nz,1)
init_values[['sigma_theta1']]=sigma_theta1_init
init_values[['theta1']]=theta1_init
init_values[['sigma_theta2']]=sigma_theta2_init
init_values[['theta2']]=theta2_init
######init z######
K_z_init=sample(1:ncluster,nz,rep=T,prob=lambda_init)
mu_init=matrix(rnorm(2*ncluster,sd=sigma_mu_config),ncluster,2)
sigma_init=rep(cluster_sigma_config,ncluster) #sqrt(rinvgamma(ncluster,shape=invgam_shape_latent,rate=invgam_rate_latent))
init_values[['K_z']]=K_z_init
init_values[['mu']]=mu_init
init_values[['sigma']]=sigma_init
z1_init=matrix(NA,nz,2)
colnames(z1_init)<-c('coord1','coord2')
z2_init=matrix(NA,nz,2)
colnames(z2_init)<-c('coord1','coord2')
gms=rep(NA,ncluster)
gmeans=matrix(NA,ncluster,2)
gsd=array(NA,ncluster,2,2)
gsd
if(!file.exists('Saved_output')) {dir.create('Saved_output')}
if(!file.exists('Images')) {dir.create('Images')}
load(paste('Run_configs/config_',config_number,'.Rdat',sep=''))
#hyperparameters
hyperparameters=list()
hyperparameters$nu=nu_config
hyperparameters$invgam_shape_all=shape_all_config
hyperparameters$invgam_rate_all=rate_all_config
#configurable initialization parameters
omega_init=omega_init_config
sigma_theta_init=sigma_theta_config #sqrt(rinvgamma(1,shape=invgam_shape_additive,rate=invgam_rate_additive))
theta_init=matrix(rnorm(nz,0,sigma_theta_init),nz,1)
#initialize z:
lambda_init=rdirichlet(1,rep(hyperparameters$nu,ncluster))
K_z_init=sample(1:ncluster,nz,rep=T,prob=lambda_init)
if(ordinal)
{
K_w_init=sample(1:ncluster,nw*ntau,rep=T,prob=lambda_init)
}else{
K_w_init=sample(1:ncluster,nw,rep=T,prob=lambda_init)
}
mu_init=matrix(rnorm(2*ncluster,sd=sigma_mu_config),ncluster,2)
sigma_init=rep(cluster_sigma_config,ncluster) #sqrt(rinvgamma(ncluster,shape=invgam_shape_latent,rate=invgam_rate_latent))
z_init=matrix(NA,nz,2)
colnames(z_init)<-c('coord1','coord2')
if(ordinal)
{
w_init=matrix(NA,nw*ntau,2)
}
colnames(w_init)<-c('coord1','coord2')
gms=rep(NA,ncluster)
gmeans=matrix(NA,ncluster,2)
gsd=rep(NA,ncluster)
if(!file.exists('Saved_output')) {dir.create('Saved_output')}
if(!file.exists('Images')) {dir.create('Images')}
load(paste('Run_configs/config_',config_number,'.Rdat',sep=''))
hyperparameters=list()
init_values=list()
stored_vars_init=list()
######init hyperparameters######
hyperparameters$nu=nu_config
hyperparameters$invgam_shape_all=shape_all_config
hyperparameters$invgam_rate_all=rate_all_config
######init cluser params######
omega_init=omega_init_config
init_values[['omega']]=omega_init
lambda_init=rdirichlet(1,rep(hyperparameters$nu,ncluster))
init_values[['lambda']]=lambda_init
######init theta######
sigma_theta1_init=sigma_theta_config #sqrt(rinvgamma(1,shape=invgam_shape_additive,rate=invgam_rate_additive))
sigma_theta2_init=sigma_theta_config #sqrt(rinvgamma(1,shape=invgam_shape_additive,rate=invgam_rate_additive))
theta1_init=matrix(rnorm(nz,0,sigma_theta1_init),nz,1)
theta2_init=matrix(rnorm(nz,0,sigma_theta2_init),nz,1)
init_values[['sigma_theta1']]=sigma_theta1_init
init_values[['theta1']]=theta1_init
init_values[['sigma_theta2']]=sigma_theta2_init
init_values[['theta2']]=theta2_init
######init z######
K_z_init=sample(1:ncluster,nz,rep=T,prob=lambda_init)
mu_init=matrix(rnorm(2*ncluster,sd=sigma_mu_config),ncluster,2)
sigma_init=rep(cluster_sigma_config,ncluster) #sqrt(rinvgamma(ncluster,shape=invgam_shape_latent,rate=invgam_rate_latent))
init_values[['K_z']]=K_z_init
init_values[['mu']]=mu_init
init_values[['sigma']]=sigma_init
z1_init=matrix(NA,nz,2)
colnames(z1_init)<-c('coord1','coord2')
z2_init=matrix(NA,nz,2)
colnames(z2_init)<-c('coord1','coord2')
gms=rep(NA,ncluster)
gmeans=matrix(NA,ncluster,2)
gsd=array(NA,ncluster,2,2)
gsd
gms=rep(NA,ncluster)
gmeans=matrix(NA,ncluster,2)
gmz=sum(K_z_init==ii)
gm=gmz
source('~/Dropbox/LatentSpaceResponseModels/Test Runs/MCMC Longitudinal/mcmc_sampler.R', echo=TRUE)
myseed
simulate_data_longitudinal(myseed)
source('~/Dropbox/LatentSpaceResponseModels/Test Runs/MCMC Longitudinal/mcmc_sampler.R', echo=TRUE)
source('~/Dropbox/LatentSpaceResponseModels/Test Runs/MCMC Longitudinal/mcmc_sampler.R', echo=TRUE)
source('~/Dropbox/LatentSpaceResponseModels/Test Runs/MCMC Longitudinal/make_config.R', echo=TRUE)
source('~/Dropbox/LatentSpaceResponseModels/Test Runs/MCMC Longitudinal/mcmc_sampler.R', echo=TRUE)
source('~/Dropbox/LatentSpaceResponseModels/Test Runs/MCMC Longitudinal/make_config.R', echo=TRUE)
source('~/Dropbox/LatentSpaceResponseModels/Test Runs/MCMC Longitudinal/mcmc_sampler.R', echo=TRUE)
