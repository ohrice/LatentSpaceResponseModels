assign("stored_vars",stored_vars,envir = .GlobalEnv)
assign("hyperparameters",hyperparameters,envir = .GlobalEnv)
assign("proposal_sigs",proposal_sigs,envir = .GlobalEnv)
}else
{
#initalize
set.seed(myseed)
init_out=initialize_cluster_sampler(config_number)
assign("current_values",init_out[['init_values']],envir = .GlobalEnv)
assign("stored_vars",init_out[['stored_vars']],envir = .GlobalEnv)
assign("hyperparameters",init_out[['hyperparameters']],envir = .GlobalEnv)
assign("proposal_sigs",init_out[['proposal_sigs']],envir = .GlobalEnv)
stored_parameters=list()
acceptance_rates=list()
for(varname in varname_list)
{
stored_parameters[[varname]][[1]]=current_values[[varname]]
stored_parameters[[paste('sigma',varname,sep='_')]][[1]]=current_values[[paste('sigma',varname,sep='_')]]
acceptance_rates[[varname]]=rep(NA,M)
}
update_sigma_tf=list("z"=FALSE,"w"=FALSE,"theta"=TRUE,"beta"=FALSE)
for(varname in names(current_values))
{
stored_parameters[[varname]]=list()
stored_parameters[[varname]][[1]]=current_values[[varname]]
}
stored_likelihoods=rep(NA,M)
stored_likelihoods[1]=calculate_full_likelihood(stored_parameters,1)
###sample
plot_latent_cluster(stored_parameters,1,mytitle=toString(1),plot_pie=F,save=T,save_filename=paste(plot_dirname,'/iteration_',1,'.png',sep=''))
start_index=2
}
pb <- txtProgressBar(max = M, style = 3)
for(jj in start_index:M)
{
current_seed=runif(1)*1e9 #for continuation purposes
set.seed(current_seed)
store=jj%%store_iter==0
storej=floor(jj/store_iter)
setTxtProgressBar(pb, jj)
for(varname in varname_list)
{
out=update_vector(varname)
current_values[[varname]]=out$newvalue
assign("current_values",current_values,envir = .GlobalEnv)
if(store) {stored_parameters[[varname]][[storej]]=out$newvalue}
acceptance_rates[[varname]][jj]=mean(out$accepts)
if(update_sigma_tf[[varname]])
{
newsigma=update_sigma(varname)
sig_varname=paste("sigma",varname,sep="_")
if(store) {stored_parameters[[sig_varname]][[storej]]=newsigma}
current_values[[sig_varname]]=newsigma
}
}
newK=update_K()
current_values$K_z=newK$K_z
current_values$K_w=newK$K_w
#store values for new Ks:
stored_vars=update_stored_vars()
newmu=update_mu_clusters()
current_values$mu=newmu
newsigma=update_sigma_clusters()
current_values$sigma=newsigma
newlambda=update_lambda()
current_values$lambda=newlambda
newomega=update_omega()
current_values$omega=newomega
stored_likelihoods[jj]=calculate_full_likelihood(stored_parameters,jj)
if(store) {
stored_parameters$K_z[[storej]]=newK$K_z
stored_parameters$K_w[[storej]]=newK$K_w
stored_parameters$mu[[storej]]=newmu
stored_parameters$sigma[[storej]]=newsigma
stored_parameters$lambda[[storej]]=newlambda
stored_parameters$omega[[storej]]=newomega
}
mi=max(1,jj-batch_size)
for(varname in varname_list)
{
#rosenthall and roberts algorithm
delta=ifelse(mean(acceptance_rates[[varname]][mi:jj],na.rm=T)>.44,min(1.01,1/sqrt(jj)),-min(1.01,1/sqrt(jj)))
proposal_sigs[[varname]]=proposal_sigs[[varname]]*exp(delta)
}
assign("proposal_sigs",proposal_sigs,envir = .GlobalEnv)
if(jj%%plot_iter==0)
{
plot_latent_cluster(stored_parameters,storej,mytitle=toString(jj),plot_pie=F,save=T,save_filename=paste(plot_dirname,'/iteration_',jj,'.png',sep=''))
save(stored_parameters,current_values,stored_likelihoods,stored_vars,hyperparameters,proposal_sigs,acceptance_rates,current_seed,file=save_filename)
}
}
source('C:/Users/samjb/Dropbox/LatentSpaceResponseModels/MCMC Cluster/mcmc_sampler_cluster.R', echo=TRUE)
source('C:/Users/samjb/Dropbox/LatentSpaceResponseModels/MCMC Cluster/mcmc_sampler_cluster.R', echo=TRUE)
data_out=load_data()
X<<-data_out[['data']]
dataname<<-data_out[['dataname']]
gender<<-data_out[['gender']]
nz<<-dim(X)[1]
nw<<-dim(X)[2]
ndim<<-2
ncluster<<-2
store_iter=1
batch_size=2000
plot_dirname=file.path(paste('Images/plots_config_',config_number,'_seed_',myseed,'_data_',dataname,sep=''))
if(!file.exists(plot_dirname)) {dir.create(plot_dirname)}
save_filename=file.path(paste('Saved_output/saved_output_config_',config_number,'_seed_',myseed,'_data_',dataname,sep=''))
varname_list=c("z","w","theta","beta")
overwrite=T
if(file.exists(save_filename) & !overwrite)
{
load(save_filename,verb=T)
start_index=length(stored_parameters$z)
print(paste('Continuing from previous run at iteration:',starti))
set.seed(current_seed)
assign("current_values",stored_parameters[[kk]],envir = .GlobalEnv)
assign("stored_vars",stored_vars,envir = .GlobalEnv)
assign("hyperparameters",hyperparameters,envir = .GlobalEnv)
assign("proposal_sigs",proposal_sigs,envir = .GlobalEnv)
}else
{
#initalize
set.seed(myseed)
init_out=initialize_cluster_sampler(config_number)
assign("current_values",init_out[['init_values']],envir = .GlobalEnv)
assign("stored_vars",init_out[['stored_vars']],envir = .GlobalEnv)
assign("hyperparameters",init_out[['hyperparameters']],envir = .GlobalEnv)
assign("proposal_sigs",init_out[['proposal_sigs']],envir = .GlobalEnv)
stored_parameters=list()
acceptance_rates=list()
for(varname in varname_list)
{
stored_parameters[[varname]][[1]]=current_values[[varname]]
stored_parameters[[paste('sigma',varname,sep='_')]][[1]]=current_values[[paste('sigma',varname,sep='_')]]
acceptance_rates[[varname]]=rep(NA,M)
}
update_sigma_tf=list("z"=FALSE,"w"=FALSE,"theta"=TRUE,"beta"=FALSE)
for(varname in names(current_values))
{
stored_parameters[[varname]]=list()
stored_parameters[[varname]][[1]]=current_values[[varname]]
}
stored_likelihoods=rep(NA,M)
stored_likelihoods[1]=calculate_full_likelihood(stored_parameters,1)
###sample
plot_latent_cluster(stored_parameters,1,mytitle=toString(1),plot_pie=F,save=T,save_filename=paste(plot_dirname,'/iteration_',1,'.png',sep=''))
start_index=2
}
plot_latent_cluster(stored_parameters,1,mytitle=toString(1),plot_pie=F,save=T,save_filename=paste(plot_dirname,'/iteration_',1,'.png',sep=''))
stored_parameters[[1]]$z
stored_parameters=list()
acceptance_rates=list()
for(varname in varname_list)
{
stored_parameters[[varname]][[1]]=current_values[[varname]]
stored_parameters[[paste('sigma',varname,sep='_')]][[1]]=current_values[[paste('sigma',varname,sep='_')]]
acceptance_rates[[varname]]=rep(NA,M)
}
stored_parameters$z[[1]]
plot_latent_cluster(stored_parameters,1,mytitle=toString('Initial Configuration'),plot_pie=F,save=T,save_filename=paste(plot_dirname,'/iteration_',1,'.png',sep=''))
source('C:/Users/samjb/Dropbox/LatentSpaceResponseModels/MCMC Cluster/update_functions_cluster.R', echo=TRUE)
plot_latent_cluster(stored_parameters,1,mytitle=toString('Initial Configuration'),plot_pie=F,save=T,save_filename=paste(plot_dirname,'/iteration_',1,'.png',sep=''))
kk=1
z=data.frame(stored_parameters$z[[kk]]) #data.frame(matrix(stored_parameters$z[M,],nz,2))
names(z)<-c('coord1','coord2')
w=data.frame(stored_parameters$w[[kk]]) #data.frame(matrix(stored_parameters$w[M,],nw,2))
names(w)<-c('coord1','coord2')
nz=dim(z)[1]
nw=dim(w)[1]
ncluster=2 #max(c(stored_parameters$K_z[[kk]],stored_parameters$K_w[[kk]]))
temp_z=sapply(stored_parameters$K_z[[kk]][z_indices],function(x) paste(toString(x)))
z$K=as.factor(temp_z)
w=data.frame(stored_parameters$w[[kk]]) #data.frame(matrix(stored_parameters$w[M,],nw,2))
names(w)<-c('coord1','coord2')
nz=dim(z)[1]
nw=dim(w)[1]
ncluster=2 #max(c(stored_parameters$K_z[[kk]],stored_parameters$K_w[[kk]]))
temp_z=sapply(stored_parameters$K_z[[kk]][z_indices],function(x) paste(toString(x)))
z$K=as.factor(temp_z)
stored_parameters$K_z
stored_parameters=list()
for(varname in names(current_values))
{
stored_parameters[[varname]]=list()
stored_parameters[[varname]][[1]]=current_values[[varname]]
}
temp_z=sapply(stored_parameters$K_z[[kk]][z_indices],function(x) paste(toString(x)))
temp_z=sapply(stored_parameters$K_z[[kk]],function(x) paste(toString(x)))
z$K=as.factor(temp_z)
temp_w=sapply(stored_parameters$K_w[[kk]],function(x) paste(toString(x)))
w$K=as.factor(temp_w)
w$name=sapply(1:nw,toString)
total=length(stored_parameters$K_w)
mu=data.frame(stored_parameters$mu[[kk]])
colnames(mu)<-c('coord1','coord2')
mu$K=sapply(1:ncluster,function(x) paste(toString(x)))
mu$r=stored_parameters$sigma[[kk]]
p0<-ggplot()+geom_point(aes(x=coord1,y=coord2,pch=K,col=gender),z,cex=2)
p0<-p0+xlab('coordinate 1')+ylab('coordinate 2')+ggtitle(paste('Latent space sample at k=',mytitle,sep=''))
p0<-p0+geom_point(aes(x=coord1,y=coord2),data=mu)
p0<-p0+geom_circle(aes(x0=coord1,y0=coord2,r=r),data=mu)
p0<-p0+geom_text(aes(x=coord1,y=coord2,label=name),hjust=2,vjust=2,data=w,fontface="bold")
mytitle=""
p0<-ggplot()+geom_point(aes(x=coord1,y=coord2,pch=K,col=gender),z,cex=2)
p0<-p0+xlab('coordinate 1')+ylab('coordinate 2')+ggtitle(paste('Latent space sample at k=',mytitle,sep=''))
p0<-p0+geom_point(aes(x=coord1,y=coord2),data=mu)
p0<-p0+geom_circle(aes(x0=coord1,y0=coord2,r=r),data=mu)
p0<-p0+geom_text(aes(x=coord1,y=coord2,label=name),hjust=2,vjust=2,data=w,fontface="bold")
p0
gender
source('C:/Users/samjb/Dropbox/LatentSpaceResponseModels/MCMC Cluster/data_funs.R', echo=TRUE)
data_out=load_data()
X<<-data_out[['data']]
dataname<<-data_out[['dataname']]
gender<<-data_out[['gender']]
nz<<-dim(X)[1]
nw<<-dim(X)[2]
ndim<<-2
ncluster<<-2
store_iter=1
batch_size=2000
plot_dirname=file.path(paste('Images/plots_config_',config_number,'_seed_',myseed,'_data_',dataname,sep=''))
if(!file.exists(plot_dirname)) {dir.create(plot_dirname)}
save_filename=file.path(paste('Saved_output/saved_output_config_',config_number,'_seed_',myseed,'_data_',dataname,sep=''))
varname_list=c("z","w","theta","beta")
overwrite=T
if(file.exists(save_filename) & !overwrite)
{
load(save_filename,verb=T)
start_index=length(stored_parameters$z)
print(paste('Continuing from previous run at iteration:',starti))
set.seed(current_seed)
assign("current_values",stored_parameters[[kk]],envir = .GlobalEnv)
assign("stored_vars",stored_vars,envir = .GlobalEnv)
assign("hyperparameters",hyperparameters,envir = .GlobalEnv)
assign("proposal_sigs",proposal_sigs,envir = .GlobalEnv)
}else
{
#initalize
set.seed(myseed)
init_out=initialize_cluster_sampler(config_number)
assign("current_values",init_out[['init_values']],envir = .GlobalEnv)
assign("stored_vars",init_out[['stored_vars']],envir = .GlobalEnv)
assign("hyperparameters",init_out[['hyperparameters']],envir = .GlobalEnv)
assign("proposal_sigs",init_out[['proposal_sigs']],envir = .GlobalEnv)
acceptance_rates=list()
for(varname in varname_list)
{
acceptance_rates[[varname]]=rep(NA,M)
}
stored_parameters=list()
for(varname in names(current_values))
{
stored_parameters[[varname]]=list()
stored_parameters[[varname]][[1]]=current_values[[varname]]
}
stored_likelihoods=rep(NA,M)
stored_likelihoods[1]=calculate_full_likelihood(stored_parameters,1)
###sample
plot_latent_cluster(stored_parameters,1,mytitle=toString('Initial Configuration'),plot_pie=F,save=T,save_filename=paste(plot_dirname,'/iteration_',1,'.png',sep=''))
start_index=2
}
z=data.frame(stored_parameters$z[[kk]]) #data.frame(matrix(stored_parameters$z[M,],nz,2))
names(z)<-c('coord1','coord2')
w=data.frame(stored_parameters$w[[kk]]) #data.frame(matrix(stored_parameters$w[M,],nw,2))
names(w)<-c('coord1','coord2')
nz=dim(z)[1]
nw=dim(w)[1]
ncluster=2 #max(c(stored_parameters$K_z[[kk]],stored_parameters$K_w[[kk]]))
temp_z=sapply(stored_parameters$K_z[[kk]],function(x) paste(toString(x)))
z$K=as.factor(temp_z)
temp_w=sapply(stored_parameters$K_w[[kk]],function(x) paste(toString(x)))
w$K=as.factor(temp_w)
w$name=sapply(1:nw,toString)
# total=length(stored_parameters$K_w)
# if(plot_pie)
# {
#   clust_dist <- function(wnum) {return(c("1"=mean(sapply(stored_parameters$K_w[burn_in:total],function(x) x[wnum]==1)),"2"=mean(sapply(stored_parameters$K_w[burn_in:total],function(x) x[wnum]==2)),"3"=mean(sapply(stored_parameters$K_w[burn_in:total],function(x) x[wnum]==3))))}
#   clust_totals <- sapply(1:nw,clust_dist)
#   w$cluster1=clust_totals[1,]
#   w$cluster2=clust_totals[2,]
#   w$cluster3=clust_totals[3,]
# }
mu=data.frame(stored_parameters$mu[[kk]])
colnames(mu)<-c('coord1','coord2')
mu$K=sapply(1:ncluster,function(x) paste(toString(x)))
mu$r=stored_parameters$sigma[[kk]]
p0<-ggplot()+geom_point(aes(x=coord1,y=coord2,pch=K,col=gender),z,cex=2)
p0<-p0+xlab('coordinate 1')+ylab('coordinate 2')+ggtitle(paste('Latent space sample at k=',mytitle,sep=''))
p0<-p0+geom_point(aes(x=coord1,y=coord2),data=mu)
p0<-p0+geom_circle(aes(x0=coord1,y0=coord2,r=r),data=mu)
p0<-p0+geom_text(aes(x=coord1,y=coord2,label=name),hjust=2,vjust=2,data=w,fontface="bold")
p0
gender
source('C:/Users/samjb/Dropbox/LatentSpaceResponseModels/MCMC Cluster/data_funs.R', echo=TRUE)
data_out=load_data()
X<<-data_out[['data']]
dataname<<-data_out[['dataname']]
gender<<-data_out[['gender']]
nz<<-dim(X)[1]
nw<<-dim(X)[2]
ndim<<-2
ncluster<<-2
store_iter=1
batch_size=2000
plot_dirname=file.path(paste('Images/plots_config_',config_number,'_seed_',myseed,'_data_',dataname,sep=''))
if(!file.exists(plot_dirname)) {dir.create(plot_dirname)}
save_filename=file.path(paste('Saved_output/saved_output_config_',config_number,'_seed_',myseed,'_data_',dataname,sep=''))
varname_list=c("z","w","theta","beta")
overwrite=T
if(file.exists(save_filename) & !overwrite)
{
load(save_filename,verb=T)
start_index=length(stored_parameters$z)
print(paste('Continuing from previous run at iteration:',starti))
set.seed(current_seed)
assign("current_values",stored_parameters[[kk]],envir = .GlobalEnv)
assign("stored_vars",stored_vars,envir = .GlobalEnv)
assign("hyperparameters",hyperparameters,envir = .GlobalEnv)
assign("proposal_sigs",proposal_sigs,envir = .GlobalEnv)
}else
{
#initalize
set.seed(myseed)
init_out=initialize_cluster_sampler(config_number)
assign("current_values",init_out[['init_values']],envir = .GlobalEnv)
assign("stored_vars",init_out[['stored_vars']],envir = .GlobalEnv)
assign("hyperparameters",init_out[['hyperparameters']],envir = .GlobalEnv)
assign("proposal_sigs",init_out[['proposal_sigs']],envir = .GlobalEnv)
acceptance_rates=list()
for(varname in varname_list)
{
acceptance_rates[[varname]]=rep(NA,M)
}
stored_parameters=list()
for(varname in names(current_values))
{
stored_parameters[[varname]]=list()
stored_parameters[[varname]][[1]]=current_values[[varname]]
}
stored_likelihoods=rep(NA,M)
stored_likelihoods[1]=calculate_full_likelihood(stored_parameters,1)
###sample
plot_latent_cluster(stored_parameters,1,mytitle=toString('Initial Configuration'),plot_pie=F,save=T,save_filename=paste(plot_dirname,'/iteration_',1,'.png',sep=''))
start_index=2
}
z=data.frame(stored_parameters$z[[kk]]) #data.frame(matrix(stored_parameters$z[M,],nz,2))
names(z)<-c('coord1','coord2')
w=data.frame(stored_parameters$w[[kk]]) #data.frame(matrix(stored_parameters$w[M,],nw,2))
names(w)<-c('coord1','coord2')
nz=dim(z)[1]
nw=dim(w)[1]
ncluster=2 #max(c(stored_parameters$K_z[[kk]],stored_parameters$K_w[[kk]]))
temp_z=sapply(stored_parameters$K_z[[kk]],function(x) paste(toString(x)))
z$K=as.factor(temp_z)
temp_w=sapply(stored_parameters$K_w[[kk]],function(x) paste(toString(x)))
w$K=as.factor(temp_w)
w$name=sapply(1:nw,toString)
# total=length(stored_parameters$K_w)
# if(plot_pie)
# {
#   clust_dist <- function(wnum) {return(c("1"=mean(sapply(stored_parameters$K_w[burn_in:total],function(x) x[wnum]==1)),"2"=mean(sapply(stored_parameters$K_w[burn_in:total],function(x) x[wnum]==2)),"3"=mean(sapply(stored_parameters$K_w[burn_in:total],function(x) x[wnum]==3))))}
#   clust_totals <- sapply(1:nw,clust_dist)
#   w$cluster1=clust_totals[1,]
#   w$cluster2=clust_totals[2,]
#   w$cluster3=clust_totals[3,]
# }
mu=data.frame(stored_parameters$mu[[kk]])
colnames(mu)<-c('coord1','coord2')
mu$K=sapply(1:ncluster,function(x) paste(toString(x)))
mu$r=stored_parameters$sigma[[kk]]
p0<-ggplot()+geom_point(aes(x=coord1,y=coord2,pch=K,col=gender),z,cex=2)
p0<-p0+xlab('coordinate 1')+ylab('coordinate 2')+ggtitle(paste('Latent space sample at k=',mytitle,sep=''))
p0<-p0+geom_point(aes(x=coord1,y=coord2),data=mu)
p0<-p0+geom_circle(aes(x0=coord1,y0=coord2,r=r),data=mu)
p0<-p0+geom_text(aes(x=coord1,y=coord2,label=name),hjust=2,vjust=2,data=w,fontface="bold")
p0
gender
source('C:/Users/samjb/Dropbox/LatentSpaceResponseModels/MCMC Cluster/data_funs.R', echo=TRUE)
load_data=load_spelling_data()
load_data=load_spelling_data
data_out=load_data()
X<<-data_out[['data']]
dataname<<-data_out[['dataname']]
gender<<-data_out[['gender']]
nz<<-dim(X)[1]
nw<<-dim(X)[2]
ndim<<-2
ncluster<<-2
store_iter=1
batch_size=2000
plot_dirname=file.path(paste('Images/plots_config_',config_number,'_seed_',myseed,'_data_',dataname,sep=''))
if(!file.exists(plot_dirname)) {dir.create(plot_dirname)}
save_filename=file.path(paste('Saved_output/saved_output_config_',config_number,'_seed_',myseed,'_data_',dataname,sep=''))
varname_list=c("z","w","theta","beta")
overwrite=T
if(file.exists(save_filename) & !overwrite)
{
load(save_filename,verb=T)
start_index=length(stored_parameters$z)
print(paste('Continuing from previous run at iteration:',starti))
set.seed(current_seed)
assign("current_values",stored_parameters[[kk]],envir = .GlobalEnv)
assign("stored_vars",stored_vars,envir = .GlobalEnv)
assign("hyperparameters",hyperparameters,envir = .GlobalEnv)
assign("proposal_sigs",proposal_sigs,envir = .GlobalEnv)
}else
{
#initalize
set.seed(myseed)
init_out=initialize_cluster_sampler(config_number)
assign("current_values",init_out[['init_values']],envir = .GlobalEnv)
assign("stored_vars",init_out[['stored_vars']],envir = .GlobalEnv)
assign("hyperparameters",init_out[['hyperparameters']],envir = .GlobalEnv)
assign("proposal_sigs",init_out[['proposal_sigs']],envir = .GlobalEnv)
acceptance_rates=list()
for(varname in varname_list)
{
acceptance_rates[[varname]]=rep(NA,M)
}
stored_parameters=list()
for(varname in names(current_values))
{
stored_parameters[[varname]]=list()
stored_parameters[[varname]][[1]]=current_values[[varname]]
}
stored_likelihoods=rep(NA,M)
stored_likelihoods[1]=calculate_full_likelihood(stored_parameters,1)
###sample
plot_latent_cluster(stored_parameters,1,mytitle=toString('Initial Configuration'),plot_pie=F,save=T,save_filename=paste(plot_dirname,'/iteration_',1,'.png',sep=''))
start_index=2
}
z=data.frame(stored_parameters$z[[kk]]) #data.frame(matrix(stored_parameters$z[M,],nz,2))
names(z)<-c('coord1','coord2')
w=data.frame(stored_parameters$w[[kk]]) #data.frame(matrix(stored_parameters$w[M,],nw,2))
names(w)<-c('coord1','coord2')
nz=dim(z)[1]
nw=dim(w)[1]
ncluster=2 #max(c(stored_parameters$K_z[[kk]],stored_parameters$K_w[[kk]]))
temp_z=sapply(stored_parameters$K_z[[kk]],function(x) paste(toString(x)))
z$K=as.factor(temp_z)
temp_w=sapply(stored_parameters$K_w[[kk]],function(x) paste(toString(x)))
w$K=as.factor(temp_w)
w$name=sapply(1:nw,toString)
# total=length(stored_parameters$K_w)
# if(plot_pie)
# {
#   clust_dist <- function(wnum) {return(c("1"=mean(sapply(stored_parameters$K_w[burn_in:total],function(x) x[wnum]==1)),"2"=mean(sapply(stored_parameters$K_w[burn_in:total],function(x) x[wnum]==2)),"3"=mean(sapply(stored_parameters$K_w[burn_in:total],function(x) x[wnum]==3))))}
#   clust_totals <- sapply(1:nw,clust_dist)
#   w$cluster1=clust_totals[1,]
#   w$cluster2=clust_totals[2,]
#   w$cluster3=clust_totals[3,]
# }
mu=data.frame(stored_parameters$mu[[kk]])
colnames(mu)<-c('coord1','coord2')
mu$K=sapply(1:ncluster,function(x) paste(toString(x)))
mu$r=stored_parameters$sigma[[kk]]
p0<-ggplot()+geom_point(aes(x=coord1,y=coord2,pch=K,col=gender),z,cex=2)
p0<-p0+xlab('coordinate 1')+ylab('coordinate 2')+ggtitle(paste('Latent space sample at k=',mytitle,sep=''))
p0<-p0+geom_point(aes(x=coord1,y=coord2),data=mu)
p0<-p0+geom_circle(aes(x0=coord1,y0=coord2,r=r),data=mu)
p0<-p0+geom_text(aes(x=coord1,y=coord2,label=name),hjust=2,vjust=2,data=w,fontface="bold")
p0
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
z=data.frame(stored_parameters$z[[kk]]) #data.frame(matrix(stored_parameters$z[M,],nz,2))
names(z)<-c('coord1','coord2')
w=data.frame(stored_parameters$w[[kk]]) #data.frame(matrix(stored_parameters$w[M,],nw,2))
names(w)<-c('coord1','coord2')
nz=dim(z)[1]
nw=dim(w)[1]
ncluster=2 #max(c(stored_parameters$K_z[[kk]],stored_parameters$K_w[[kk]]))
temp_z=sapply(stored_parameters$K_z[[kk]],function(x) paste(toString(x)))
z$K=as.factor(temp_z)
temp_w=sapply(stored_parameters$K_w[[kk]],function(x) paste(toString(x)))
w$K=as.factor(temp_w)
w$name=sapply(1:nw,toString)
# total=length(stored_parameters$K_w)
# if(plot_pie)
# {
#   clust_dist <- function(wnum) {return(c("1"=mean(sapply(stored_parameters$K_w[burn_in:total],function(x) x[wnum]==1)),"2"=mean(sapply(stored_parameters$K_w[burn_in:total],function(x) x[wnum]==2)),"3"=mean(sapply(stored_parameters$K_w[burn_in:total],function(x) x[wnum]==3))))}
#   clust_totals <- sapply(1:nw,clust_dist)
#   w$cluster1=clust_totals[1,]
#   w$cluster2=clust_totals[2,]
#   w$cluster3=clust_totals[3,]
# }
mu=data.frame(stored_parameters$mu[[kk]])
colnames(mu)<-c('coord1','coord2')
mu$K=sapply(1:ncluster,function(x) paste(toString(x)))
mu$r=stored_parameters$sigma[[kk]]
p0<-ggplot()+geom_point(aes(x=coord1,y=coord2,pch=K,col=gender),z,cex=2)
p0<-p0+xlab('coordinate 1')+ylab('coordinate 2')+ggtitle(paste('Latent space sample at k=',mytitle,sep=''))
p0<-p0+geom_point(aes(x=coord1,y=coord2),data=mu)
p0<-p0+geom_circle(aes(x0=coord1,y0=coord2,r=r),data=mu)
p0<-p0+geom_text(aes(x=coord1,y=coord2,label=name),hjust=2,vjust=2,data=w,fontface="bold")
p0
source('C:/Users/samjb/Dropbox/LatentSpaceResponseModels/MCMC Cluster/mcmc_sampler_cluster.R', echo=TRUE)
source('C:/Users/samjb/Dropbox/LatentSpaceResponseModels/MCMC Cluster/mcmc_sampler_cluster.R', echo=TRUE)
source('C:/Users/samjb/Dropbox/LatentSpaceResponseModels/MCMC Cluster/mcmc_sampler_cluster.R', echo=TRUE)
source('C:/Users/samjb/Dropbox/LatentSpaceResponseModels/MCMC Cluster/mcmc_sampler_cluster.R', echo=TRUE)
dev.off()
dev.off()
dev.off()
source('C:/Users/samjb/Dropbox/LatentSpaceResponseModels/MCMC Cluster/mcmc_sampler_cluster.R', echo=TRUE)
