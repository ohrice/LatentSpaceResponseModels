logistu <- glm(track ~ RACETHC + ESCS + IMMIG, data = merged_dat, family = binomial("logit"))
summary(logistu)
match_stu <- function(X){
stu_pair <- filter(merged_dat, CNTSCHID %in% X$CNTSCHID)
stu_pair_out <- matchit(track ~ ESCS, data = stu_pair, method = "subclass", subclass = 4)
stu_pair_out
}
stu_match_pairs <- lapply(pairs, match_stu)
str(stu_match_pairs)
stu_match_pairs[[1]]
library(tidyverse)
library(magrittr)
library(knitr)
library(car)
library(lme4)
library(lmerTest)
library(MatchIt)
library(Zelig)
setwd("C:/Users/erich/OneDrive/Documents/UCLA/Tracking/PISA Project/Script")
load("school_US.RData")
load("student_US.RData")
load("teacher_US.RData")
load("merged_US.RData")
#student-level
names(merged_SCST)[names(merged_SCST)=="ST064Q02NA"] <- "tracking"
merged_SCST$tracking <- as.numeric(merged_SCST$tracking)
merged_SCST <- merged_SCST %>% filter(!is.na(tracking) & tracking < 4)
merged_SCST$tracking <- dplyr::recode(merged_SCST$tracking, `1` = "No choice",
`2` = "Some choice", `3` = "Complete choice")
merged_SCST$tracking <- as.factor(merged_SCST$tracking)
#school-level
names(merged_SCST)[names(merged_SCST)=="SC042Q01TA"] <- "sch_tracking"
merged_SCST$sch_tracking <- as.numeric(merged_SCST$sch_tracking)
merged_SCST <- merged_SCST %>% filter(!is.na(sch_tracking) & sch_tracking < 4)
merged_SCST$sch_tracking <- dplyr::recode(merged_SCST$sch_tracking, `1` = "All",
`2` = "Some", `3` = "None")
merged_SCST$sch_tracking <- as.factor(merged_SCST$sch_tracking)
tab <- table(merged_SCST$tracking)
prop <- prop.table(tab)
rownames(tab) <- c("Yes, I can choose freely", "No, not at all", "Yes, to a certain degree")
kable(tab, col.names = c("Response", "Frequency (Students)"))
rownames(prop) <- c("Yes, I can choose freely", "No, not at all", "Yes, to a certain degree")
kable(prop, col.names = c("Response", "Proportion (Students)"))
tab2 <- table(merged_SCST$sch_tracking)
prop2 <- prop.table(tab2)
rownames(tab2) <- c("For all subjects", "Not for any subject", "For some subjects")
kable(tab2, col.names = c("Response", "Frequency (students)"))
rownames(prop2) <- c("For all subjects", "Not for any subject", "For some subjects")
kable(prop2, col.names = c("Response", "Proportion (students)"))
school_US <- filter(school_US, SC042Q01TA != 9)
tab3 <- table(school_US$SC042Q01TA)
prop3 <- prop.table(tab3)
rownames(tab3) <- c("For all subjects", "For some subjects", "Not for any subject")
kable(tab3, col.names = c("Response", "Frequency (schools)"))
rownames(prop3) <- c("For all subjects", "For some subjects", "Not for any subject")
kable(prop3, col.names = c("Response", "Proportion (schools)"))
temp <- table(merged_SCST$tracking, merged_SCST$sch_tracking)
rownames(temp) <- c("Yes, I can choose freely", "No, not at all", "Yes, to a certain degree")
colnames(temp) <- c("For all subjects", "Not for any subject", "For some subjects")
kable(temp)
#race
merged_SCST <- merged_SCST %>% filter(!is.na(RACETHC) & RACETHC < 7)
merged_SCST$RACETHC <- dplyr::recode(merged_SCST$RACETHC, `1` = "White",
`2` = "Black",
`3` = "Hispanic",
`4` = "Asian",
`5` = "Multi-Racial",
`6` = "Other")
merged_SCST$RACETHC <- as.factor(merged_SCST$RACETHC)
tab <- table(merged_SCST$RACETHC)
prop <- prop.table(tab)
kable(prop, col.names = c("Race", "Proportion"))
#immigrant status
merged_SCST <- merged_SCST %>% filter(!is.na(IMMIG) & IMMIG < 4)
merged_SCST$IMMIG <- dplyr::recode(merged_SCST$IMMIG, `1` = "Native",
`2` = "SecGen",
`3` = "FirstGen")
merged_SCST$IMMIG <- as.factor(merged_SCST$IMMIG)
tab <- table(merged_SCST$IMMIG)
prop <- prop.table(tab)
kable(prop, col.names = c("Immigrant Status", "Proportion"))
kable(table(merged_SCST$RACETHC, merged_SCST$IMMIG))
sch_dif <- filter(school_US, SC042Q01TA != 2, STRATIO != 99999999,
SC048Q01NA != 999, SC048Q02NA != 999, SC048Q03NA != 999, SCIERES != 99) %>%
select(CNTSCHID, FRPL, SC042Q01TA, STRATIO,
SC048Q01NA, SC048Q02NA, SC048Q03NA, SCIERES)
#Reponse of 3 signifies schools that do not track for any subject. I recode as 0 for the
#regression to work. This makes sense if you think of tracking as a treatment.
sch_dif$SC042Q01TA[sch_dif$SC042Q01TA == 3] <- 0
sch_dif <- rename(sch_dif, track = SC042Q01TA, No_Eng = SC048Q01NA, SPED = SC048Q02NA,
SES = SC048Q03NA)
logist <- glm(track ~ FRPL + STRATIO + No_Eng + SPED
+ SES + SCIERES, data = sch_dif, family = binomial("logit"))
summary(logist)
pdata <- as.data.frame(cbind(logist$y, logist$fitted.values))
colnames(pdata) <- c("y", "fitted.values")
hist(pdata[pdata$y==1,]$fitted.values,main = "PScores of Tracked Schools",
xlab = "Propensity score")
hist(pdata[pdata$y==0,]$fitted.values,main = "PScores of Detracked Schools",
xlab = "Propensity score")
sch_dif %>%
group_by(track) %>%
summarise_each(mean, -CNTSCHID)
sch_dif %>%
group_by(track) %>%
summarise_each(sd, -CNTSCHID)
sch_dif %>% filter(track == 1) %>% arrange(CNTSCHID, SCIERES, FRPL, STRATIO, No_Eng, SPED, SES) %>%
print(n = nrow(.))
sch_dif %>% filter(track == 0) %>% arrange(CNTSCHID, SCIERES, FRPL, STRATIO, No_Eng, SPED, SES) %>%
print(n = nrow(.))
m.out <- matchit(track ~ SCIERES + FRPL, data = sch_dif, method = "exact")
summary(m.out)
m2.out <- matchit(track ~ FRPL + STRATIO + No_Eng + SPED
+ SES + SCIERES, data = sch_dif, method = "nearest")
summary(m2.out)
match.data <- match.data(m2.out)
match.data.treat <- match.data(m2.out, group = "treat")
match.data.control <- match.data(m2.out, group = "control")
match.matrix <- m2.out$match.matrix
match.data.control2 <- match.data.control[match.matrix,]
pairs <- list()
for(i in 1:nrow(match.matrix)){
pairs[[i]] <- rbind(match.data.treat[i,], match.data.control2[i,])
}
pairs
stu_dif <- filter(merged_SCST, CNTSCHID %in% match.data$CNTSCHID, ESCS != "BLANK", TEACHSUP !=
9999999, ADINST != 9999999, PERFEED != 9999999) %>%
select(CNTSCHID, CNTSTUID, RACETHC, ESCS, IMMIG, ADINST, PERFEED, TEACHSUP)
stu_dif$RACETHC <- as.factor(stu_dif$RACETHC)
stu_dif$IMMIG <- as.factor(stu_dif$IMMIG)
merged_dat <- merge(match.data, stu_dif)
logistu <- glm(track ~ RACETHC + ESCS + IMMIG, data = merged_dat, family = binomial("logit"))
summary(logistu)
match_stu <- function(X){
stu_pair <- filter(merged_dat, CNTSCHID %in% X$CNTSCHID)
stu_pair_out <- matchit(track ~ ESCS, data = stu_pair, method = "subclass", subclass = 4)
stu_pair_out
}
stu_match_pairs <- lapply(pairs, match_stu)
test <- stu_match_pairs[[1]]
matchdat <- match.data(test)
str(test)
summary(test)
match.data(test)
str(stu_match_pairs)
str(test)
match.data(test)
m.out <- stu_match_pairs[[1]]
m.out
summary(m.out)
match.data(m.ot)
match.data(m.out)
?match.data
match.data(m.out, distance = "dist")
match.data(m.out, distance = "dist", subclass = "sub", weights = "we")
library(tidyverse)
library(magrittr)
library(knitr)
library(car)
library(lme4)
library(lmerTest)
library(MatchIt)
library(Zelig)
setwd("C:/Users/erich/OneDrive/Documents/UCLA/Tracking/PISA Project/Script")
load("school_US.RData")
load("student_US.RData")
load("teacher_US.RData")
load("merged_US.RData")
#student-level
names(merged_SCST)[names(merged_SCST)=="ST064Q02NA"] <- "tracking"
merged_SCST$tracking <- as.numeric(merged_SCST$tracking)
merged_SCST <- merged_SCST %>% filter(!is.na(tracking) & tracking < 4)
merged_SCST$tracking <- dplyr::recode(merged_SCST$tracking, `1` = "No choice",
`2` = "Some choice", `3` = "Complete choice")
merged_SCST$tracking <- as.factor(merged_SCST$tracking)
#school-level
names(merged_SCST)[names(merged_SCST)=="SC042Q01TA"] <- "sch_tracking"
merged_SCST$sch_tracking <- as.numeric(merged_SCST$sch_tracking)
merged_SCST <- merged_SCST %>% filter(!is.na(sch_tracking) & sch_tracking < 4)
merged_SCST$sch_tracking <- dplyr::recode(merged_SCST$sch_tracking, `1` = "All",
`2` = "Some", `3` = "None")
merged_SCST$sch_tracking <- as.factor(merged_SCST$sch_tracking)
tab <- table(merged_SCST$tracking)
prop <- prop.table(tab)
rownames(tab) <- c("Yes, I can choose freely", "No, not at all", "Yes, to a certain degree")
kable(tab, col.names = c("Response", "Frequency (Students)"))
rownames(prop) <- c("Yes, I can choose freely", "No, not at all", "Yes, to a certain degree")
kable(prop, col.names = c("Response", "Proportion (Students)"))
tab2 <- table(merged_SCST$sch_tracking)
prop2 <- prop.table(tab2)
rownames(tab2) <- c("For all subjects", "Not for any subject", "For some subjects")
kable(tab2, col.names = c("Response", "Frequency (students)"))
rownames(prop2) <- c("For all subjects", "Not for any subject", "For some subjects")
kable(prop2, col.names = c("Response", "Proportion (students)"))
school_US <- filter(school_US, SC042Q01TA != 9)
tab3 <- table(school_US$SC042Q01TA)
prop3 <- prop.table(tab3)
rownames(tab3) <- c("For all subjects", "For some subjects", "Not for any subject")
kable(tab3, col.names = c("Response", "Frequency (schools)"))
rownames(prop3) <- c("For all subjects", "For some subjects", "Not for any subject")
kable(prop3, col.names = c("Response", "Proportion (schools)"))
temp <- table(merged_SCST$tracking, merged_SCST$sch_tracking)
rownames(temp) <- c("Yes, I can choose freely", "No, not at all", "Yes, to a certain degree")
colnames(temp) <- c("For all subjects", "Not for any subject", "For some subjects")
kable(temp)
#race
merged_SCST <- merged_SCST %>% filter(!is.na(RACETHC) & RACETHC < 7)
merged_SCST$RACETHC <- dplyr::recode(merged_SCST$RACETHC, `1` = "White",
`2` = "Black",
`3` = "Hispanic",
`4` = "Asian",
`5` = "Multi-Racial",
`6` = "Other")
merged_SCST$RACETHC <- as.factor(merged_SCST$RACETHC)
tab <- table(merged_SCST$RACETHC)
prop <- prop.table(tab)
kable(prop, col.names = c("Race", "Proportion"))
#immigrant status
merged_SCST <- merged_SCST %>% filter(!is.na(IMMIG) & IMMIG < 4)
merged_SCST$IMMIG <- dplyr::recode(merged_SCST$IMMIG, `1` = "Native",
`2` = "SecGen",
`3` = "FirstGen")
merged_SCST$IMMIG <- as.factor(merged_SCST$IMMIG)
tab <- table(merged_SCST$IMMIG)
prop <- prop.table(tab)
kable(prop, col.names = c("Immigrant Status", "Proportion"))
kable(table(merged_SCST$RACETHC, merged_SCST$IMMIG))
sch_dif <- filter(school_US, SC042Q01TA != 2, STRATIO != 99999999,
SC048Q01NA != 999, SC048Q02NA != 999, SC048Q03NA != 999, SCIERES != 99) %>%
select(CNTSCHID, FRPL, SC042Q01TA, STRATIO,
SC048Q01NA, SC048Q02NA, SC048Q03NA, SCIERES)
#Reponse of 3 signifies schools that do not track for any subject. I recode as 0 for the
#regression to work. This makes sense if you think of tracking as a treatment.
sch_dif$SC042Q01TA[sch_dif$SC042Q01TA == 3] <- 0
sch_dif <- rename(sch_dif, track = SC042Q01TA, No_Eng = SC048Q01NA, SPED = SC048Q02NA,
SES = SC048Q03NA)
logist <- glm(track ~ FRPL + STRATIO + No_Eng + SPED
+ SES + SCIERES, data = sch_dif, family = binomial("logit"))
summary(logist)
pdata <- as.data.frame(cbind(logist$y, logist$fitted.values))
colnames(pdata) <- c("y", "fitted.values")
hist(pdata[pdata$y==1,]$fitted.values,main = "PScores of Tracked Schools",
xlab = "Propensity score")
hist(pdata[pdata$y==0,]$fitted.values,main = "PScores of Detracked Schools",
xlab = "Propensity score")
sch_dif %>%
group_by(track) %>%
summarise_each(mean, -CNTSCHID)
sch_dif %>%
group_by(track) %>%
summarise_each(sd, -CNTSCHID)
sch_dif %>% filter(track == 1) %>% arrange(CNTSCHID, SCIERES, FRPL, STRATIO, No_Eng, SPED, SES) %>%
print(n = nrow(.))
sch_dif %>% filter(track == 0) %>% arrange(CNTSCHID, SCIERES, FRPL, STRATIO, No_Eng, SPED, SES) %>%
print(n = nrow(.))
m.out <- matchit(track ~ SCIERES + FRPL, data = sch_dif, method = "exact")
summary(m.out)
m2.out <- matchit(track ~ FRPL + STRATIO + No_Eng + SPED
+ SES + SCIERES, data = sch_dif, method = "nearest")
summary(m2.out)
match.data <- match.data(m2.out)
match.data.treat <- match.data(m2.out, group = "treat")
match.data.control <- match.data(m2.out, group = "control")
match.matrix <- m2.out$match.matrix
match.data.control2 <- match.data.control[match.matrix,]
pairs <- list()
for(i in 1:nrow(match.matrix)){
pairs[[i]] <- rbind(match.data.treat[i,], match.data.control2[i,])
}
pairs
stu_dif <- filter(merged_SCST, CNTSCHID %in% match.data$CNTSCHID, ESCS != "BLANK", TEACHSUP !=
9999999, ADINST != 9999999, PERFEED != 9999999) %>%
select(CNTSCHID, CNTSTUID, RACETHC, ESCS, IMMIG, ADINST, PERFEED, TEACHSUP)
stu_dif$RACETHC <- as.factor(stu_dif$RACETHC)
stu_dif$IMMIG <- as.factor(stu_dif$IMMIG)
merged_dat <- merge(match.data, stu_dif)
logistu <- glm(track ~ RACETHC + ESCS + IMMIG, data = merged_dat, family = binomial("logit"))
summary(logistu)
match_stu <- function(X){
stu_pair <- filter(merged_dat, CNTSCHID %in% X$CNTSCHID)
stu_pair_out <- matchit(track ~ ESCS, data = stu_pair, method = "subclass", subclass = 4)
stu_pair_out
}
stu_match_pairs <- lapply(pairs, match_stu)
test <- stu_match_pairs[[1]]
matdat <- match.data(test, distance = "d", weights = "w", subclass = "s")
matdat
z.out <- zelig(ADINST ~ track + ESCS, model = "ls", data = matdat)
z.out
summary(z.out)
x.out <- setx(z.out, treat=0)
x1.out <- setx(z.out, treat=1)
x.out <- setx(z.out, track=0)
x1.out <- setx(z.out, track=1)
x.out
x1.out
s.out <- sim(z.out, x = x.out, x1 = x1.out)
summary(s.out)
library(tidyverse)
library(magrittr)
library(knitr)
library(car)
library(lme4)
library(lmerTest)
library(MatchIt)
library(Zelig)
setwd("C:/Users/erich/OneDrive/Documents/UCLA/Tracking/PISA Project/Script")
load("school_US.RData")
load("student_US.RData")
load("teacher_US.RData")
load("merged_US.RData")
#student-level
names(merged_SCST)[names(merged_SCST)=="ST064Q02NA"] <- "tracking"
merged_SCST$tracking <- as.numeric(merged_SCST$tracking)
merged_SCST <- merged_SCST %>% filter(!is.na(tracking) & tracking < 4)
merged_SCST$tracking <- dplyr::recode(merged_SCST$tracking, `1` = "No choice",
`2` = "Some choice", `3` = "Complete choice")
merged_SCST$tracking <- as.factor(merged_SCST$tracking)
#school-level
names(merged_SCST)[names(merged_SCST)=="SC042Q01TA"] <- "sch_tracking"
merged_SCST$sch_tracking <- as.numeric(merged_SCST$sch_tracking)
merged_SCST <- merged_SCST %>% filter(!is.na(sch_tracking) & sch_tracking < 4)
merged_SCST$sch_tracking <- dplyr::recode(merged_SCST$sch_tracking, `1` = "All",
`2` = "Some", `3` = "None")
merged_SCST$sch_tracking <- as.factor(merged_SCST$sch_tracking)
tab <- table(merged_SCST$tracking)
prop <- prop.table(tab)
rownames(tab) <- c("Yes, I can choose freely", "No, not at all", "Yes, to a certain degree")
kable(tab, col.names = c("Response", "Frequency (Students)"))
rownames(prop) <- c("Yes, I can choose freely", "No, not at all", "Yes, to a certain degree")
kable(prop, col.names = c("Response", "Proportion (Students)"))
tab2 <- table(merged_SCST$sch_tracking)
prop2 <- prop.table(tab2)
rownames(tab2) <- c("For all subjects", "Not for any subject", "For some subjects")
kable(tab2, col.names = c("Response", "Frequency (students)"))
rownames(prop2) <- c("For all subjects", "Not for any subject", "For some subjects")
kable(prop2, col.names = c("Response", "Proportion (students)"))
school_US <- filter(school_US, SC042Q01TA != 9)
tab3 <- table(school_US$SC042Q01TA)
prop3 <- prop.table(tab3)
rownames(tab3) <- c("For all subjects", "For some subjects", "Not for any subject")
kable(tab3, col.names = c("Response", "Frequency (schools)"))
rownames(prop3) <- c("For all subjects", "For some subjects", "Not for any subject")
kable(prop3, col.names = c("Response", "Proportion (schools)"))
temp <- table(merged_SCST$tracking, merged_SCST$sch_tracking)
rownames(temp) <- c("Yes, I can choose freely", "No, not at all", "Yes, to a certain degree")
colnames(temp) <- c("For all subjects", "Not for any subject", "For some subjects")
kable(temp)
#race
merged_SCST <- merged_SCST %>% filter(!is.na(RACETHC) & RACETHC < 7)
merged_SCST$RACETHC <- dplyr::recode(merged_SCST$RACETHC, `1` = "White",
`2` = "Black",
`3` = "Hispanic",
`4` = "Asian",
`5` = "Multi-Racial",
`6` = "Other")
merged_SCST$RACETHC <- as.factor(merged_SCST$RACETHC)
tab <- table(merged_SCST$RACETHC)
prop <- prop.table(tab)
kable(prop, col.names = c("Race", "Proportion"))
#immigrant status
merged_SCST <- merged_SCST %>% filter(!is.na(IMMIG) & IMMIG < 4)
merged_SCST$IMMIG <- dplyr::recode(merged_SCST$IMMIG, `1` = "Native",
`2` = "SecGen",
`3` = "FirstGen")
merged_SCST$IMMIG <- as.factor(merged_SCST$IMMIG)
tab <- table(merged_SCST$IMMIG)
prop <- prop.table(tab)
kable(prop, col.names = c("Immigrant Status", "Proportion"))
kable(table(merged_SCST$RACETHC, merged_SCST$IMMIG))
sch_dif <- filter(school_US, SC042Q01TA != 2, STRATIO != 99999999,
SC048Q01NA != 999, SC048Q02NA != 999, SC048Q03NA != 999, SCIERES != 99) %>%
select(CNTSCHID, FRPL, SC042Q01TA, STRATIO,
SC048Q01NA, SC048Q02NA, SC048Q03NA, SCIERES)
#Reponse of 3 signifies schools that do not track for any subject. I recode as 0 for the
#regression to work. This makes sense if you think of tracking as a treatment.
sch_dif$SC042Q01TA[sch_dif$SC042Q01TA == 3] <- 0
sch_dif <- rename(sch_dif, track = SC042Q01TA, No_Eng = SC048Q01NA, SPED = SC048Q02NA,
SES = SC048Q03NA)
logist <- glm(track ~ FRPL + STRATIO + No_Eng + SPED
+ SES + SCIERES, data = sch_dif, family = binomial("logit"))
summary(logist)
pdata <- as.data.frame(cbind(logist$y, logist$fitted.values))
colnames(pdata) <- c("y", "fitted.values")
hist(pdata[pdata$y==1,]$fitted.values,main = "PScores of Tracked Schools",
xlab = "Propensity score")
hist(pdata[pdata$y==0,]$fitted.values,main = "PScores of Detracked Schools",
xlab = "Propensity score")
sch_dif %>%
group_by(track) %>%
summarise_each(mean, -CNTSCHID)
sch_dif %>%
group_by(track) %>%
summarise_each(sd, -CNTSCHID)
sch_dif %>% filter(track == 1) %>% arrange(CNTSCHID, SCIERES, FRPL, STRATIO, No_Eng, SPED, SES) %>%
print(n = nrow(.))
sch_dif %>% filter(track == 0) %>% arrange(CNTSCHID, SCIERES, FRPL, STRATIO, No_Eng, SPED, SES) %>%
print(n = nrow(.))
m.out <- matchit(track ~ SCIERES + FRPL, data = sch_dif, method = "exact")
summary(m.out)
m2.out <- matchit(track ~ FRPL + STRATIO + No_Eng + SPED
+ SES + SCIERES, data = sch_dif, method = "nearest")
summary(m2.out)
match.data <- match.data(m2.out)
match.data.treat <- match.data(m2.out, group = "treat")
match.data.control <- match.data(m2.out, group = "control")
match.matrix <- m2.out$match.matrix
match.data.control2 <- match.data.control[match.matrix,]
pairs <- list()
for(i in 1:nrow(match.matrix)){
pairs[[i]] <- rbind(match.data.treat[i,], match.data.control2[i,])
}
pairs
stu_dif <- filter(merged_SCST, CNTSCHID %in% match.data$CNTSCHID, ESCS != "BLANK", TEACHSUP !=
9999999, ADINST != 9999999, PERFEED != 9999999) %>%
select(CNTSCHID, CNTSTUID, RACETHC, ESCS, IMMIG, ADINST, PERFEED, TEACHSUP)
stu_dif$RACETHC <- as.factor(stu_dif$RACETHC)
stu_dif$IMMIG <- as.factor(stu_dif$IMMIG)
merged_dat <- merge(match.data, stu_dif)
logistu <- glm(track ~ RACETHC + ESCS + IMMIG, data = merged_dat, family = binomial("logit"))
summary(logistu)
match_stu <- function(X){
stu_pair <- filter(merged_dat, CNTSCHID %in% X$CNTSCHID)
stu_pair_out <- matchit(track ~ ESCS, data = stu_pair, method = "subclass", subclass = 4)
stu_pair_out
}
stu_match_pairs <- lapply(pairs, match_stu)
test <- stu_match_pairs[[1]]
matdat <- match.data(test, distance = "d", subclass = "s", weights = "w")
z.out3 <- zelig(ADINST ~ tracking + ESCS,
data = match.data(matdat, "control"),
model = "ls", by = "subclass")
z.out3 <- zelig(ADINST ~ tracking + ESCS,
data = match.data(matdat, "control"),
model = "ls", by = "s")
matdat
names(matdat)
z.out3 <- zelig(ADINST ~ tracking + ESCS,
data = matdat,
model = "ls", by = "s")
z.out3 <- zelig(ADINST ~ track + ESCS,
data = matdat,
model = "ls", by = "s")
z.out3 <- zelig(ADINST ~ track + ESCS,
data = match.data(test, "control"),
model = "ls", by = "s")
z.out3 <- zelig(ADINST ~ track + ESCS,
data = match.data(test, distance = "d", subclass = "s", weights = "w"),
model = "ls", by = "s")
x.out3 <- setx(z.out3, data = match.data(test, distance = "d", subclass = "s", weights = "w", "treat"), fn = NULL,
cond = TRUE)
s.out3 <- sim(z.out3, x = x.out3)
summary(s.out3)
setwd("C:/Users/erich/OneDrive/Documents/UCLA/Fall 2019/STAT 201A/Week 7")
library(tidyverse)
library(knitr)
library(magrittr)
samples <- c("(9,1)","(1,9)","(1,1)","(9,9)")
N <- 2
n <- 2
estimates <- function(p1, p2){
y <- c(9,1)
ps <- c(p1*p2, p2*p1, p2^2, p1^2)
pi <- c(1-(1-p1)^n, 1-(1-p2)^n)
pij <- 2*p1*p2
yp <- c(9/p1,1/p2)
ypi <- c(9/pi[1], 1/pi[2])
tau_p <- c(mean(yp),mean(yp),mean(yp[2]),mean(yp[1]))
tau_pi <- c(sum(ypi),sum(ypi),ypi[2],ypi[1])
denom <- c(sum(1/pi),sum(1/pi),1/pi[2],1/pi[1])
tau_g <- N*(tau_pi/denom)
E_tau_p <- crossprod(tau_p,ps)
E_tau_pi <- crossprod(tau_pi,ps)
E_tau_g <- crossprod(tau_g,ps)
E <- c("E_tau_p" = E_tau_p, "E_tau_pi" = E_tau_pi, "E_tau_g" = E_tau_g)
V_tau_p <- (1/n)*sum(pi*(yp-E_tau_p)^2)
V_tau_pi <- sum(((1-pi)/pi)*y^2)+((pij - prod(pi))/prod(pi))*prod(y)
V_tau_g <- sum(ps*(tau_g - E_tau_g)^2)
V <- c("V_tau_p" = V_tau_p, "V_tau_pi" = V_tau_pi, "V_tau_g" = V_tau_g)
MSE_tau_p <- V_tau_p
MSE_tau_pi <- V_tau_pi
MSE_tau_g <- sum(ps*(tau_g - E_tau_p)^2)
M <- c("MSE_tau_p" = MSE_tau_p, "MSE_tau_pi" = MSE_tau_pi, "MSE_tau_g" = MSE_tau_g)
final <- list("Samples" = samples, "P(s)" = ps, "tau_p" = tau_p, "tau_pi" = tau_pi,
"tau_g" = tau_g, "Expectations" = E, "Variances" = V, "MSE" = M)
final
}
res <- estimates(.2,.8)
str(res)
res$tau_pi
2*0.16*((1/.36)+(1/.96))+0.04*(1/.36)+0.64*(1/0.96)
setwd("C:/Users/erich/Desktop/LatentSpaceResponseModels/MCMC_Template/Saved_output")
load("saved_output_config_1_seed_102595_data_abortion")
load("saved_output_config_1_seed_102095_data_abortion")
View(X)
raw_data=read.table('../../Data/abortion.txt')
assign("X",raw_data[!apply(is.na(raw_data),1,any),],envir=.GlobalEnv)
assign("dataname","abortion",envir=.GlobalEnv)
assign('nz',dim(X)[1],envir=.GlobalEnv)
assign('nw',dim(X)[2],envir=.GlobalEnv)
View(X)
sum <- rowSums(X)
View(sum)
cor(current_values$theta, sum)
View(X)
?boxplot
boxplot(theta ~ sum)
boxplot(current_values$theta ~ sum)
boxplot(current_values$theta ~ sum, xlab = "Number of endorsed questions", ylab = "Theta", main = "Person ability vs. Number of endorsed questions")
colsum <- colSums(X)
colsum
cor(colsum, current_values$beta)
