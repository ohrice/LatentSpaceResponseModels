erf(rnorm(1))
erf(rnorm(1))
system.time({for(i in 1:10000){a=a+erf(rnorm(1))}})
system.time({for(i in 1:10000){a=a+erf(rnorm(1))}})
erf
help('qnorm')
help('pnorm')
system.time({for(i in 1:1000){a=a+erf(rnorm(1))}})
system.time({for(i in 1:1000){a=a+(rnorm(1))}})
nums=rep(rnorm(1),100)
nums
nums=rnorm(1000)
system.time({for(i in 1:1000){a=a+nums[i]}})
system.time({for(i in 1:1000){a=a+erf(nums[i])}})
nums
system.time({for(i in 1:1000){a=a+nums[i]}})
system.time({for(i in 1:1000){a=a+erf(nums[i])}})
system.time({for(i in 1:1000){a=exp(-nums[i])}})
system.time({for(i in 1:10000){a=exp(-nums[i])}})
system.time({for(i in 1:100000){a=exp(-nums[i])}})
nums[1]
nums[2]
nums[10000]
nums=rep(rnorm(1),100000)
system.time({for(i in 1:100000){a=erf(nums[i])}})
system.time({for(i in 1:100000){a=exp(-nums[i])}})
erf(Inf)
??erf
require('VGAM')
erf(Inf)
erf(0)
erf(-Inf)
matrix(c(c(1,0,0,0),c(0,1,0,0),c(0,0,1,0),c(0,0,0,1)))
matrix(c(c(1,0,0,0),c(0,1,0,0),c(0,0,1,0),c(0,0,0,1)),4,4)
matrix(c(c(1,0,0,0),c(0,1,0,0),c(0,0,1,0),c(0,0,0,1)),4,4)
cbind(c(cos(gamma),-sin(gamma)),c(sin(gamma),cos(gamma)))
gamma=base::pi/2
sin(gamma)
cbind(c(cos(gamma),-sin(gamma)),c(sin(gamma),cos(gamma)))
rbind(c(cos(gamma),-sin(gamma)),c(sin(gamma),cos(gamma)))
Sigma_z_init=matrix(c(c(1,0,0,0),c(0,1,0,0),c(0,0,cos(gamma),-sin(gamma)),c(0,0,sin(gamma),cos(gamma))),ndim*2,ndim*2)
ndim=2
Sigma_z_init=matrix(c(c(1,0,0,0),c(0,1,0,0),c(0,0,cos(gamma),-sin(gamma)),c(0,0,sin(gamma),cos(gamma))),ndim*2,ndim*2)
Sigma_z_init
Sigma_z_init=matrix(c(c(1,0,0,0),c(0,1,0,0),c(0,0,cos(gamma),sin(gamma)),c(0,0,-sin(gamma),cos(gamma))),ndim*2,ndim*2)
Sigma_z_init
gamma=base::pi/4
Sigma_z_init=matrix(c(c(1,0,0,0),c(0,1,0,0),c(0,0,cos(gamma),sin(gamma)),c(0,0,-sin(gamma),cos(gamma))),ndim*2,ndim*2)
Sigma_z_init
sin(gamma)
cos(gamma)
temp=matrix(c(c(1,0,0,0),c(0,1,0,0),c(0,0,cos(gamma),sin(gamma)),c(0,0,-sin(gamma),cos(gamma))),ndim*2,ndim*2)
help('pMatrix')
require('Matrix')
help('pMatrix')
x <- c(1,3,2,4)
diag(length(x))[x,]
x <- c(1,3,2,4)
P=diag(length(x))[x,]
M=P%*%temp%*%t(P)
M
M[x,x]
M=P%*%temp%*%t(P)
M
help resetClass()
??global
??appearence
??appearance
sAM20456#
sAM20456#
out_name=strcat(out_path,'Argo_data_r_ready_',num2str(ii,'%02.f'),'.mat');
matdat_filename=paste(path,'/RData/Argo_data_r_ready_',month_id,'.mat',sep='')
path='/home/sam/Dropbox/Argo Project/'
matdat_filename=paste(path,'/RData/Argo_data_r_ready_',month_id,'.mat',sep='')
str_pad(anim, 6, pad = "0")
str_pad(1, 6, pad = "0")
formatC('1', width = 2, format = "d", flag = "0")
formatC(anim, width = 6, format = "d", flag = "0")
formatC(1, width = 6, format = "d", flag = "0")
formatC(1, width = 2, format = "d", flag = "0")
formatC(12, width = 2, format = "d", flag = "0")
paste(path,'/RData/argo_data_',formatC(month_id,width = 2,format = "d",flag = "0"),'.Rdat',sep='')
month_id=1
paste(path,'/RData/argo_data_',formatC(month_id,width = 2,format = "d",flag = "0"),'.Rdat',sep='')\
paste(path,'/RData/argo_data_',formatC(month_id,width = 2,format = "d",flag = "0"),'.Rdat',sep='')
file.exists(paste(path,'MatData/Argo_data_r_ready_',formatC(month_id,width = 2,format = "d",flag = "0"),'.mat',sep=''))
month_id
paste(path,'MatData/Argo_data_r_ready_',formatC(month_id,width = 2,format = "d",flag = "0"),'.mat',sep='')
a<<-9
pi
source('C:/Users/samjb/Dropbox/LatentSpaceResponseModels/MCMC Template/mcmc_sampler.R', echo=TRUE)
setwd("C:/Users/samjb/Dropbox/LatentSpaceResponseModels/MCMC Template")
plot_fun
require('invgamma')
require('ggplot2')
require('pdist')
require('ggforce')
require('progress')
source('update_functions.R')
source('init_sampler.R')
source('data_funs.R')
plot_latent_cluster
source('C:/Users/samjb/Dropbox/LatentSpaceResponseModels/MCMC Template/mcmc_sampler.R', echo=TRUE)
source('C:/Users/samjb/Dropbox/LatentSpaceResponseModels/MCMC Template/mcmc_sampler.R', echo=TRUE)
source('C:/Users/samjb/Dropbox/LatentSpaceResponseModels/MCMC Template/mcmc_sampler.R', echo=TRUE)
source('C:/Users/samjb/Dropbox/LatentSpaceResponseModels/MCMC Template/mcmc_sampler.R', echo=TRUE)
source('C:/Users/samjb/Dropbox/LatentSpaceResponseModels/MCMC Template/mcmc_sampler.R', echo=TRUE)
help(progress_bar$new)
help(new)
source('C:/Users/samjb/Dropbox/LatentSpaceResponseModels/MCMC Template/mcmc_sampler.R', echo=TRUE)
source('C:/Users/samjb/Dropbox/LatentSpaceResponseModels/MCMC Template/mcmc_sampler.R', echo=TRUE)
source('C:/Users/samjb/Dropbox/LatentSpaceResponseModels/MCMC Template/mcmc_sampler.R', echo=TRUE)
help(progress_bar)
pb <- progress_bar$new(
format = " producing samples [:bar] :percent eta: :eta\n",
total = M, clear = T, width= 80)
pb$tick
pb$tick()
pb$tick()
pb$tick()
pb$tick()
pb$tick()
pb <- progress_bar$new(
format = " producing samples [:bar] :percent eta: :eta\n",
total = M, clear = T, width= 80)
pb$tick()
pb$tick()
pb <- progress_bar$new(
format = "  got :current rows at :tick_rate/sec",
clear = FALSE, total = NA, width = 60)
f <- function() {
for (i in 1:100) {
pb$tick(sample(1:100, 1))
Sys.sleep(2/100)
}
pb$terminate()
invisible()
}
f()
pb <- progress_bar$new(
format = "  downloading foobar at :rate, got :bytes in :elapsed",
clear = FALSE, total = NA, width = 60)
f <- function() {
for (i in 1:100) {
pb$tick(sample(1:100 * 1000, 1))
Sys.sleep(2/100)
}
pb$tick(1e7)
invisible()
}
f()
source('C:/Users/samjb/Dropbox/LatentSpaceResponseModels/MCMC Template/mcmc_sampler.R', echo=TRUE)
source('C:/Users/samjb/Dropbox/LatentSpaceResponseModels/MCMC Template/mcmc_sampler.R', echo=TRUE)
pb <- progress_bar$new(
format = "  downloading [:bar] :percent eta: :eta",
total = 100, clear = FALSE, width= 60)
for (i in 1:100) {
pb$tick()
Sys.sleep(1 / 100)
}
source('C:/Users/samjb/Dropbox/LatentSpaceResponseModels/MCMC Template/mcmc_sampler.R', echo=TRUE)
config_number=1
if(!file.exists('Saved_output')) {dir.create('Saved_output')}
if(!file.exists('Images')) {dir.create('Images')}
load(paste('Run_configs/config_',config_number,'.Rdat',sep=''))
#hyperparameters
hyperparameters=list()
hyperparameters$nu=nu_config
hyperparameters$invgam_shape_all=shape_all_config
hyperparameters$invgam_rate_all=rate_all_config
#configurable initialization parameters
omega_init=omega_init_config
sigma_theta_init=sigma_theta_config #sqrt(rinvgamma(1,shape=invgam_shape_additive,rate=invgam_rate_additive))
theta_init=matrix(rnorm(nz,0,sigma_theta_init),nz,1)
#initialize z:
lambda_init=rdirichlet(1,rep(hyperparameters$nu,ncluster))
K_z_init=sample(1:ncluster,nz,rep=T,prob=lambda_init)
if(ordinal)
{
K_w_init=sample(1:ncluster,nw*ntau,rep=T,prob=lambda_init)
}else{
K_w_init=sample(1:ncluster,nw,rep=T,prob=lambda_init)
}
mu_init=matrix(rnorm(2*ncluster,sd=sigma_mu_config),ncluster,2)
sigma_init=rep(cluster_sigma_config,ncluster) #sqrt(rinvgamma(ncluster,shape=invgam_shape_latent,rate=invgam_rate_latent))
z_init=matrix(NA,nz,2)
colnames(z_init)<-c('coord1','coord2')
if(ordinal)
{
w_init=matrix(NA,nw*ntau,2)
}else{
w_init=matrix(NA,nw,2)
}
colnames(w_init)<-c('coord1','coord2')
gms=rep(NA,ncluster)
gmeans=matrix(NA,ncluster,2)
gsd=rep(NA,ncluster)
for(ii in 1:ncluster)
{
gmw=sum(K_w_init==ii)
gmz=sum(K_z_init==ii)
gm=gmw+gmz
wii=cbind(rnorm(gmw,mean=mu_init[ii,1],sd=sigma_init[ii]),
rnorm(gmw,mean=mu_init[ii,2],sd=sigma_init[ii]))
zii=cbind(rnorm(gmz,mean=mu_init[ii,1],sd=sigma_init[ii]),
rnorm(gmz,mean=mu_init[ii,2],sd=sigma_init[ii]))
w_init[K_w_init==ii,]=wii
z_init[K_z_init==ii,]=zii
temp=rbind(wii,zii)
gms[ii]=gm
gmeans[ii,]=apply(temp,2,mean)
gsd[ii]=sqrt(sum((temp-gmeans[ii,])^2)/2)
}
all_latent_init=rbind(z_init,w_init)
mean(all_latent_init^2)
all_latent_init=rbind(z_init,w_init)
scale_init=sqrt(mean(all_latent_init^2))
scale_init
z_init=z_init/scale_init
w_init=w_init/scale_init
all_latent_init=rbind(z_init,w_init)
scale_init=sqrt(mean(all_latent_init^2))
scale_init
varname_list
all_latent_init=rbind(z_init,w_init)
scale_init=matrix(sqrt(mean(all_latent_init^2)),1,1)
scale_init
z_init=z_init/scale_init
w_init=w_init/scale_init
z_init=z_init/c(scale_init)
w_init=w_init/c(scale_init)
scale_init
source('C:/Users/samjb/Dropbox/LatentSpaceResponseModels/MCMC Template/mcmc_sampler.R', echo=TRUE)
source('C:/Users/samjb/Dropbox/LatentSpaceResponseModels/MCMC Template/likelihood_functions_cluster.R', echo=TRUE)
source('C:/Users/samjb/Dropbox/LatentSpaceResponseModels/MCMC Template/mcmc_sampler.R', echo=TRUE)
sqrt(mean(rbind(current_values$z,current_values$w)^2))
source('C:/Users/samjb/Dropbox/LatentSpaceResponseModels/MCMC Template/mcmc_sampler.R', echo=TRUE)
sqrt(mean(rbind(current_values$z,current_values$w)^2))
source('C:/Users/samjb/Dropbox/LatentSpaceResponseModels/MCMC Template/mcmc_sampler.R', echo=TRUE)
source('C:/Users/samjb/Dropbox/LatentSpaceResponseModels/MCMC Template/mcmc_sampler.R', echo=TRUE)
source('C:/Users/samjb/Dropbox/LatentSpaceResponseModels/MCMC Template/mcmc_sampler.R', echo=TRUE)
source('C:/Users/samjb/Dropbox/LatentSpaceResponseModels/MCMC Template/mcmc_sampler.R', echo=TRUE)
source('C:/Users/samjb/Dropbox/LatentSpaceResponseModels/MCMC Template/mcmc_sampler.R', echo=TRUE)
source('C:/Users/samjb/Dropbox/LatentSpaceResponseModels/MCMC Template/mcmc_sampler.R', echo=TRUE)
source('C:/Users/samjb/Dropbox/LatentSpaceResponseModels/MCMC Template/mcmc_sampler.R', echo=TRUE)
current_values
current_values$w
current_values$z
current_values$mu
source('C:/Users/samjb/Dropbox/LatentSpaceResponseModels/MCMC Template/make_config.R', echo=TRUE)
source('C:/Users/samjb/Dropbox/LatentSpaceResponseModels/MCMC Template/mcmc_sampler.R', echo=TRUE)
current_values$sigma
normscale=sqrt(mean(rbind(current_values$z,current_values$w)^2))
normscale
source('C:/Users/samjb/Dropbox/LatentSpaceResponseModels/MCMC Template/mcmc_sampler.R', echo=TRUE)
source('C:/Users/samjb/Dropbox/LatentSpaceResponseModels/MCMC Template/mcmc_sampler.R', echo=TRUE)
source('C:/Users/samjb/Dropbox/LatentSpaceResponseModels/MCMC Template/make_config.R', echo=TRUE)
source('C:/Users/samjb/Dropbox/LatentSpaceResponseModels/MCMC Template/mcmc_sampler.R', echo=TRUE)
rbind(z_init,w_init)
if(!file.exists('Saved_output')) {dir.create('Saved_output')}
if(!file.exists('Images')) {dir.create('Images')}
load(paste('Run_configs/config_',config_number,'.Rdat',sep=''))
#hyperparameters
hyperparameters=list()
hyperparameters$nu=nu_config
hyperparameters$invgam_shape_all=shape_all_config
hyperparameters$invgam_rate_all=rate_all_config
#configurable initialization parameters
omega_init=omega_init_config
sigma_theta_init=sigma_theta_config #sqrt(rinvgamma(1,shape=invgam_shape_additive,rate=invgam_rate_additive))
theta_init=matrix(rnorm(nz,0,sigma_theta_init),nz,1)
#initialize z:
lambda_init=rdirichlet(1,rep(hyperparameters$nu,ncluster))
K_z_init=sample(1:ncluster,nz,rep=T,prob=lambda_init)
if(ordinal)
{
K_w_init=sample(1:ncluster,nw*ntau,rep=T,prob=lambda_init)
}else{
K_w_init=sample(1:ncluster,nw,rep=T,prob=lambda_init)
}
mu_init=matrix(rnorm(2*ncluster,sd=sigma_mu_config),ncluster,2)
sigma_init=rep(cluster_sigma_config,ncluster) #sqrt(rinvgamma(ncluster,shape=invgam_shape_latent,rate=invgam_rate_latent))
z_init=matrix(NA,nz,2)
colnames(z_init)<-c('coord1','coord2')
if(ordinal)
{
w_init=matrix(NA,nw*ntau,2)
}else{
w_init=matrix(NA,nw,2)
}
colnames(w_init)<-c('coord1','coord2')
gms=rep(NA,ncluster)
gmeans=matrix(NA,ncluster,2)
gsd=rep(NA,ncluster)
for(ii in 1:ncluster)
{
gmw=sum(K_w_init==ii)
gmz=sum(K_z_init==ii)
gm=gmw+gmz
wii=cbind(rnorm(gmw,mean=mu_init[ii,1],sd=sigma_init[ii]),
rnorm(gmw,mean=mu_init[ii,2],sd=sigma_init[ii]))
zii=cbind(rnorm(gmz,mean=mu_init[ii,1],sd=sigma_init[ii]),
rnorm(gmz,mean=mu_init[ii,2],sd=sigma_init[ii]))
w_init[K_w_init==ii,]=wii
z_init[K_z_init==ii,]=zii
temp=rbind(wii,zii)
gms[ii]=gm
gmeans[ii,]=apply(temp,2,mean)
gsd[ii]=sqrt(sum((temp-gmeans[ii,])^2)/2)
}
all_latent_init=rbind(z_init,w_init)
sd(c(all_latent_init))
logscale_init=matrix(log(sqrt(mean(all_latent_init^2))),1,1)
z_init=z_init/c(exp(logscale_init))
w_init=w_init/c(exp(logscale_init))
all_latent_init=rbind(z_init,w_init)
sd(c(all_latent_init))
1.158063/c(exp(locscale_init))
1.158063/c(exp(logscale_init))
mean(c(all_latent_init))
source('C:/Users/samjb/Dropbox/LatentSpaceResponseModels/MCMC Template/mcmc_sampler.R', echo=TRUE)
max(current_values$z)
max(current_values$w)
stoer_index=40
z=data.frame(stored_parameters$z[[store_index]]) #data.frame(matrix(stored_parameters$z[M,],nz,2))
w=data.frame(stored_parameters$w[[store_index]]) #data.frame(matrix(stored_parameters$w[M,],nw,2))
save_filename=file.path(paste('Saved_output/saved_output_config_',config_number,'_seed_',myseed,'_data_',dataname,sep=''))
load(save_filename,verb=T)
z=data.frame(stored_parameters$z[[store_index]]) #data.frame(matrix(stored_parameters$z[M,],nz,2))
w=data.frame(stored_parameters$w[[store_index]]) #data.frame(matrix(stored_parameters$w[M,],nw,2))
store_index=40
z=data.frame(stored_parameters$z[[store_index]]) #data.frame(matrix(stored_parameters$z[M,],nz,2))
w=data.frame(stored_parameters$w[[store_index]]) #data.frame(matrix(stored_parameters$w[M,],nw,2))
names(z)<-c('coord1','coord2')
names(w)<-c('coord1','coord2')
temp_z=sapply(stored_parameters$K_z[[store_index]],function(x) paste(toString(x)))
z$K=as.factor(temp_z)
temp_w=sapply(stored_parameters$K_w[[store_index]],function(x) paste(toString(x)))
w$K=as.factor(temp_w)
w$wname=c(sapply(1:ntau,function(ii) rep(paste("w_k=",ii,sep=''),nw)))
mu=data.frame(stored_parameters$mu[[store_index]])
colnames(mu)<-c('coord1','coord2')
mu$wz="mu"
mu$K=sapply(1:ncluster,function(x) paste(toString(x)))
mu$r=stored_parameters$sigma[[store_index]]
p0<-ggplot()
p0<-p0+geom_point(aes(x=coord1,y=coord2,col=K,pch='z'),data=z,cex=2)
p0<-p0+geom_point(aes(x=coord1,y=coord2,col=K,pch=wname),data=w,cex=2)
p0<-p0+geom_point(aes(x=coord1,y=coord2,col=K,pch='mu'),data=mu)
p0<-p0+xlab('coordinate 1')+ylab('coordinate 2')+ggtitle(paste('Latent space sample at M=',mytitle,sep=''))
p0<-p0+geom_circle(aes(x0=coord1,y0=coord2,col=K,r=r),data=mu)
p0<-p0+scale_shape_manual(values=c("z"=16,"w k=1"=8,"w k=2"=9,"w k=3"=10,"w k=4"=11,
"w k=5" = 12, "mu"=4))
p0
w
p0<-ggplot()
p0<-p0+geom_point(aes(x=coord1,y=coord2,col=K,pch='z'),data=z,cex=2)
p0<-p0+geom_point(aes(x=coord1,y=coord2,col=K,pch=wname),data=w,cex=2)
p0<-p0+geom_point(aes(x=coord1,y=coord2,col=K,pch='mu'),data=mu)
p0<-p0+xlab('coordinate 1')+ylab('coordinate 2')+ggtitle(paste('Latent space sample at M=',mytitle,sep=''))
p0<-p0+geom_circle(aes(x0=coord1,y0=coord2,col=K,r=r),data=mu)
p0
p0<-ggplot()
p0<-p0+geom_point(aes(x=coord1,y=coord2,col=K,pch='z'),data=z,cex=2)
p0<-p0+geom_point(aes(x=coord1,y=coord2,col=K,pch=wname),data=w,cex=2)
p0<-p0+geom_point(aes(x=coord1,y=coord2,col=K,pch='mu'),data=mu)
p0<-p0+xlab('coordinate 1')+ylab('coordinate 2')+ggtitle(paste('Latent space sample at M=',mytitle,sep=''))
p0<-p0+geom_circle(aes(x0=coord1,y0=coord2,col=K,r=r),data=mu)
p0<-p0+scale_shape_manual(values=c("z"=16,"w_k=1"=8,"w_k=2"=9,"w_k=3"=10,"w_k=4"=11,
"w_k=5" = 12, "mu"=4))
p0
source('C:/Users/samjb/Dropbox/LatentSpaceResponseModels/MCMC Template/mcmc_sampler.R', echo=TRUE)
if(!file.exists('Saved_output')) {dir.create('Saved_output')}
if(!file.exists('Images')) {dir.create('Images')}
load(paste('Run_configs/config_',config_number,'.Rdat',sep=''))
#hyperparameters
hyperparameters=list()
hyperparameters$nu=nu_config
hyperparameters$invgam_shape_all=shape_all_config
hyperparameters$invgam_rate_all=rate_all_config
#configurable initialization parameters
omega_init=omega_init_config
sigma_theta_init=sigma_theta_config #sqrt(rinvgamma(1,shape=invgam_shape_additive,rate=invgam_rate_additive))
theta_init=matrix(rnorm(nz,0,sigma_theta_init),nz,1)
#initialize z:
lambda_init=rdirichlet(1,rep(hyperparameters$nu,ncluster))
K_z_init=sample(1:ncluster,nz,rep=T,prob=lambda_init)
if(ordinal)
{
K_w_init=sample(1:ncluster,nw*ntau,rep=T,prob=lambda_init)
}else{
K_w_init=sample(1:ncluster,nw,rep=T,prob=lambda_init)
}
mu_init=matrix(rnorm(2*ncluster,sd=sigma_mu_config),ncluster,2)
sigma_init=rep(cluster_sigma_config,ncluster) #sqrt(rinvgamma(ncluster,shape=invgam_shape_latent,rate=invgam_rate_latent))
z_init=matrix(NA,nz,2)
colnames(z_init)<-c('coord1','coord2')
if(ordinal)
{
w_init=matrix(NA,nw*ntau,2)
}else{
w_init=matrix(NA,nw,2)
}
colnames(w_init)<-c('coord1','coord2')
gms=rep(NA,ncluster)
gmeans=matrix(NA,ncluster,2)
gsd=rep(NA,ncluster)
for(ii in 1:ncluster)
{
gmw=sum(K_w_init==ii)
gmz=sum(K_z_init==ii)
gm=gmw+gmz
wii=cbind(rnorm(gmw,mean=mu_init[ii,1],sd=sigma_init[ii]),
rnorm(gmw,mean=mu_init[ii,2],sd=sigma_init[ii]))
zii=cbind(rnorm(gmz,mean=mu_init[ii,1],sd=sigma_init[ii]),
rnorm(gmz,mean=mu_init[ii,2],sd=sigma_init[ii]))
w_init[K_w_init==ii,]=wii
z_init[K_z_init==ii,]=zii
temp=rbind(wii,zii)
gms[ii]=gm
gmeans[ii,]=apply(temp,2,mean)
gsd[ii]=sqrt(sum((temp-gmeans[ii,])^2)/2)
}
all_latent_init=rbind(z_init,w_init)
rt(mean(all_latent_init^2))
srt(mean(all_latent_init^2))
sqrt(mean(all_latent_init^2))
all_latent_init=rbind(z_init,w_init)
z_init=z_init/c(sqrt(mean(z_init^2)))
w_init=w_init/c(sqrt(mean(w_init^2)))
logscale_init
#hyperparameters
hyperparameters=list()
hyperparameters$nu=nu_config
hyperparameters$invgam_shape_all=shape_all_config
hyperparameters$invgam_rate_all=rate_all_config
#configurable initialization parameters
omega_init=omega_init_config
sigma_theta_init=sigma_theta_config #sqrt(rinvgamma(1,shape=invgam_shape_additive,rate=invgam_rate_additive))
theta_init=matrix(rnorm(nz,0,sigma_theta_init),nz,1)
#initialize z:
lambda_init=rdirichlet(1,rep(hyperparameters$nu,ncluster))
K_z_init=sample(1:ncluster,nz,rep=T,prob=lambda_init)
if(ordinal)
{
K_w_init=sample(1:ncluster,nw*ntau,rep=T,prob=lambda_init)
}else{
K_w_init=sample(1:ncluster,nw,rep=T,prob=lambda_init)
}
mu_init=matrix(rnorm(2*ncluster,sd=sigma_mu_config),ncluster,2)
sigma_init=rep(cluster_sigma_config,ncluster) #sqrt(rinvgamma(ncluster,shape=invgam_shape_latent,rate=invgam_rate_latent))
z_init=matrix(NA,nz,2)
colnames(z_init)<-c('coord1','coord2')
if(ordinal)
{
w_init=matrix(NA,nw*ntau,2)
}else{
w_init=matrix(NA,nw,2)
}
colnames(w_init)<-c('coord1','coord2')
gms=rep(NA,ncluster)
gmeans=matrix(NA,ncluster,2)
gsd=rep(NA,ncluster)
for(ii in 1:ncluster)
{
gmw=sum(K_w_init==ii)
gmz=sum(K_z_init==ii)
gm=gmw+gmz
wii=cbind(rnorm(gmw,mean=mu_init[ii,1],sd=sigma_init[ii]),
rnorm(gmw,mean=mu_init[ii,2],sd=sigma_init[ii]))
zii=cbind(rnorm(gmz,mean=mu_init[ii,1],sd=sigma_init[ii]),
rnorm(gmz,mean=mu_init[ii,2],sd=sigma_init[ii]))
w_init[K_w_init==ii,]=wii
z_init[K_z_init==ii,]=zii
temp=rbind(wii,zii)
gms[ii]=gm
gmeans[ii,]=apply(temp,2,mean)
gsd[ii]=sqrt(sum((temp-gmeans[ii,])^2)/2)
}
all_latent_init=rbind(z_init,w_init)
logscale_init=matrix(log(sqrt(mean(all_latent_init^2))),1,1)
logscale_init
z_init=z_init/c(sqrt(mean(z_init^2)))
w_init=w_init/c(sqrt(mean(w_init^2)))
all_latent_init=rbind(z_init,w_init)
logscale_init=matrix(log(sqrt(mean(all_latent_init^2))),1,1)
logscale_init
z_init
w_init
sqrt(mean(all_latent_init^2)))
sqrt(mean(all_latent_init^2))
source('C:/Users/samjb/Dropbox/LatentSpaceResponseModels/MCMC Template/mcmc_sampler.R', echo=TRUE)
varname_list
proposal_sigs
source('C:/Users/samjb/Dropbox/LatentSpaceResponseModels/MCMC Template/mcmc_sampler.R', echo=TRUE)
source('C:/Users/samjb/Dropbox/LatentSpaceResponseModels/MCMC Template/mcmc_sampler.R', echo=TRUE)
source('C:/Users/samjb/Dropbox/LatentSpaceResponseModels/MCMC Template/mcmc_sampler.R', echo=TRUE)
source('C:/Users/samjb/Dropbox/LatentSpaceResponseModels/MCMC Template/mcmc_sampler.R', echo=TRUE)
source('C:/Users/samjb/Dropbox/LatentSpaceResponseModels/MCMC Template/mcmc_sampler.R', echo=TRUE)
current_values$sigma_logscale
current_values$theta
mean(current_values$theta)
mean(current_values$z)
mean(current_values$w)
mean(current_values$z^2)
mean(current_values$w^2)
current_values$logscale
exp(current_values$logscale)
current_values$sigma_theta
current_values$sigma
source('C:/Users/samjb/Dropbox/LatentSpaceResponseModels/MCMC Template/mcmc_sampler.R', echo=TRUE)
source('C:/Users/samjb/Dropbox/LatentSpaceResponseModels/MCMC Template/mcmc_sampler.R', echo=TRUE)
