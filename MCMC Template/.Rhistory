kable(tab2, col.names = c("Response", "Frequency (students)"))
school_US <- filter(school_US, SC042Q01TA != 9)
tab3 <- table(school_US$SC042Q01TA)
rownames(tab3) <- c("For all subjects", "For some subjects", "Not for any subject")
kable(tab3, col.names = c("Response", "Frequency (schools)"))
temp <- table(merged_SCST$tracking, merged_SCST$sch_tracking)
rownames(temp) <- c("Yes, I can choose freely", "No, not at all", "Yes, to a certain degree")
colnames(temp) <- c("For all subjects", "Not for any subject", "For some subjects")
kable(temp)
#race
merged_SCST <- merged_SCST %>% filter(!is.na(RACETHC) & RACETHC < 7)
merged_SCST$RACETHC <- dplyr::recode(merged_SCST$RACETHC, `1` = "White",
`2` = "Black",
`3` = "Hispanic",
`4` = "Asian",
`5` = "Multi-Racial",
`6` = "Other")
merged_SCST$RACETHC <- as.factor(merged_SCST$RACETHC)
#immigrant status
merged_SCST <- merged_SCST %>% filter(!is.na(IMMIG) & IMMIG < 4)
merged_SCST$IMMIG <- dplyr::recode(merged_SCST$IMMIG, `1` = "Native",
`2` = "SecGen",
`3` = "FirstGen")
merged_SCST$IMMIG <- as.factor(merged_SCST$IMMIG)
kable(table(merged_SCST$RACETHC, merged_SCST$IMMIG))
sch_dif <- filter(school_US, SC042Q01TA != 2, STRATIO != 99999999,
STUBEHA != 9999999, TEACHBEHA != 9999999,
SC048Q01NA != 999, SC048Q02NA != 999, SC048Q03NA != 999)
#Reponse of 3 signifies schools that do not track for any subject. I recode as 0 for the
#regression to work. This makes sense if you think of tracking as a treatment.
sch_dif$SC042Q01TA[sch_dif$SC042Q01TA == 3] <- 0
logist <- glm(SC042Q01TA ~ FRPL + STRATIO + SC048Q01NA + SC048Q02NA
+ SC048Q03NA + STUBEHA + TEACHBEHA, data = sch_dif, family = binomial("logit"))
summary(logist)
SES_summary <- group_by(sch_dif, SC042Q01TA) %>% summarise(
count = n(),
mean = mean(TEACHBEHA, na.rm = TRUE),
sd = sd(TEACHBEHA, na.rm = TRUE)
)
kable(SES_summary, col.names = c("Track by all subjects?", "count", "mean", "sd"))
pdata <- as.data.frame(cbind(logist$y, logist$fitted.values))
colnames(pdata) <- c("y", "fitted.values")
hist(pdata[pdata$y==1,]$fitted.values,main = "PScores of Tracked Schools",
xlab = "Propensity score")
hist(pdata[pdata$y==0,]$fitted.values,main = "PScores of Detracked Schools",
xlab = "Propensity score")
stu_dif <- filter(merged_SCST, tracking != "Some choice")
stu_dif <- droplevels(stu_dif)
logiststu <- glm(tracking ~ RACETHC + ESCS + IMMIG, data = stu_dif, family = binomial("logit"))
summary(logiststu)
SES_summary <- group_by(stu_dif, tracking) %>% summarise(
count = n(),
mean = mean(ESCS, na.rm = TRUE),
sd = sd(ESCS, na.rm = TRUE)
)
kable(SES_summary, col.names = c("Tracking", "count", "mean", "sd"))
merged_SCST <- merged_SCST %>%
mutate(adinst = (ST107Q01NA + ST107Q02NA + ST107Q03NA)/3) %>%
filter(!is.na(adinst))
adinst_summary <- group_by(merged_SCST, tracking) %>% summarise(
count = n(),
mean = mean(adinst, na.rm = TRUE),
sd = sd(adinst, na.rm = TRUE)
)
kable(adinst_summary)
merged_SCST$adinst <- as.numeric(merged_SCST$adinst)
boxplot(adinst ~ tracking, data = merged_SCST, xlab = "Type of Tracking/Response",
ylab = "Adaptation of instruction", main = "I can choose the level of difficulty")
results.aov <- aov(adinst ~ tracking, data = merged_SCST)
summary(results.aov)
TukeyHSD(results.aov)
leveneTest(adinst ~ tracking, data = merged_SCST)
adinst_1 <- lmer(adinst ~ 1 + (1|CNTSCHID), data = merged_SCST)
summary(adinst_1)
adinst_1.5 <- lmer(adinst ~ 1 + tracking + (1|CNTSCHID), data = merged_SCST)
summary(adinst_1.5)
adinst_3 <- lmer(adinst ~ 1 + tracking + sch_tracking + tracking * sch_tracking + (1|CNTSCHID), data = merged_SCST)
summary(adinst_3)
adinst_2 <- lmer(adinst ~ 1 + sch_tracking + ESCS + ESCS * sch_tracking + (1|CNTSCHID), data = merged_SCST)
summary(adinst_2)
# numeric quantities are on different scales
merged_SCST$ESCS <- scale(merged_SCST$ESCS)
merged_SCST$TEACHBEHA <- scale(merged_SCST$TEACHBEHA)
adinst_pro <- lmer(adinst ~ 1 + tracking + ESCS + RACETHC + IMMIG + sch_tracking +
TEACHBEHA + (1|CNTSCHID), data = merged_SCST)
summary(adinst_pro)
merged_black <- filter(merged_SCST, RACETHC == 2)
adinst_blk <- lmer(adinst ~ 1 + tracking + ESCS + IMMIG + sch_tracking +
TEACHBEHA + (1|CNTSCHID), data = merged_black)
names(merged_black)
table(merged_black$RACETHC)
merged_black <- filter(merged_SCST, RACETHC == "Black")
table(merged_black$RACETHC)
merged_black <- filter(merged_SCST, RACETHC == "Black")
adinst_blk <- lmer(adinst ~ 1 + tracking + ESCS + IMMIG + sch_tracking +
TEACHBEHA + (1|CNTSCHID), data = merged_black)
summary(adinst_blk)
x <- y <- 0
?rnorm
?std
z <- c("a", "b")
y <- c("b", "c")
cbind(z, y)
install.packages("kableExtra")
?round
library(tidyverse)
library(knitr)
library(car)
library(lme4)
library(lmerTest)
setwd("C:/Users/erich/OneDrive/Documents/UCLA/Tracking/PISA Project/Script")
load("school_US.RData")
load("student_US.RData")
load("teacher_US.RData")
load("merged_US.RData")
#student-level
names(merged_SCST)[names(merged_SCST)=="ST064Q02NA"] <- "tracking"
merged_SCST$tracking <- as.numeric(merged_SCST$tracking)
merged_SCST <- merged_SCST %>% filter(!is.na(tracking) & tracking < 4)
merged_SCST$tracking <- dplyr::recode(merged_SCST$tracking, `1` = "No choice",
`2` = "Some choice", `3` = "Complete choice")
merged_SCST$tracking <- as.factor(merged_SCST$tracking)
#school-level
names(merged_SCST)[names(merged_SCST)=="SC042Q01TA"] <- "sch_tracking"
merged_SCST$sch_tracking <- as.numeric(merged_SCST$sch_tracking)
merged_SCST <- merged_SCST %>% filter(!is.na(sch_tracking) & sch_tracking < 4)
merged_SCST$sch_tracking <- dplyr::recode(merged_SCST$sch_tracking, `1` = "All",
`2` = "Some", `3` = "None")
merged_SCST$sch_tracking <- as.factor(merged_SCST$sch_tracking)
tab <- table(merged_SCST$tracking)
rownames(tab) <- c("Yes, I can choose freely", "No, not at all", "Yes, to a certain degree")
kable(tab, col.names = c("Response", "Frequency (Students)"))
tab2 <- table(merged_SCST$sch_tracking)
rownames(tab2) <- c("For all subjects", "Not for any subject", "For some subjects")
kable(tab2, col.names = c("Response", "Frequency (students)"))
school_US <- filter(school_US, SC042Q01TA != 9)
tab3 <- table(school_US$SC042Q01TA)
rownames(tab3) <- c("For all subjects", "For some subjects", "Not for any subject")
kable(tab3, col.names = c("Response", "Frequency (schools)"))
temp <- table(merged_SCST$tracking, merged_SCST$sch_tracking)
rownames(temp) <- c("Yes, I can choose freely", "No, not at all", "Yes, to a certain degree")
colnames(temp) <- c("For all subjects", "Not for any subject", "For some subjects")
kable(temp)
#race
merged_SCST <- merged_SCST %>% filter(!is.na(RACETHC) & RACETHC < 7)
merged_SCST$RACETHC <- dplyr::recode(merged_SCST$RACETHC, `1` = "White",
`2` = "Black",
`3` = "Hispanic",
`4` = "Asian",
`5` = "Multi-Racial",
`6` = "Other")
merged_SCST$RACETHC <- as.factor(merged_SCST$RACETHC)
#immigrant status
merged_SCST <- merged_SCST %>% filter(!is.na(IMMIG) & IMMIG < 4)
merged_SCST$IMMIG <- dplyr::recode(merged_SCST$IMMIG, `1` = "Native",
`2` = "SecGen",
`3` = "FirstGen")
merged_SCST$IMMIG <- as.factor(merged_SCST$IMMIG)
kable(table(merged_SCST$RACETHC, merged_SCST$IMMIG))
sch_dif <- filter(school_US, SC042Q01TA != 2, STRATIO != 99999999,
STUBEHA != 9999999, TEACHBEHA != 9999999,
SC048Q01NA != 999, SC048Q02NA != 999, SC048Q03NA != 999)
#Reponse of 3 signifies schools that do not track for any subject. I recode as 0 for the
#regression to work. This makes sense if you think of tracking as a treatment.
sch_dif$SC042Q01TA[sch_dif$SC042Q01TA == 3] <- 0
logist <- glm(SC042Q01TA ~ FRPL + STRATIO + SC048Q01NA + SC048Q02NA
+ SC048Q03NA + STUBEHA + TEACHBEHA, data = sch_dif, family = binomial("logit"))
summary(logist)
SES_summary <- group_by(sch_dif, SC042Q01TA) %>% summarise(
count = n(),
mean = mean(TEACHBEHA, na.rm = TRUE),
sd = sd(TEACHBEHA, na.rm = TRUE)
)
kable(SES_summary, col.names = c("Track by all subjects?", "count", "mean", "sd"))
pdata <- as.data.frame(cbind(logist$y, logist$fitted.values))
colnames(pdata) <- c("y", "fitted.values")
hist(pdata[pdata$y==1,]$fitted.values,main = "PScores of Tracked Schools",
xlab = "Propensity score")
hist(pdata[pdata$y==0,]$fitted.values,main = "PScores of Detracked Schools",
xlab = "Propensity score")
stu_dif <- filter(merged_SCST, tracking != "Some choice")
stu_dif <- droplevels(stu_dif)
logiststu <- glm(tracking ~ RACETHC + ESCS + IMMIG, data = stu_dif, family = binomial("logit"))
summary(logiststu)
SES_summary <- group_by(stu_dif, tracking) %>% summarise(
count = n(),
mean = mean(ESCS, na.rm = TRUE),
sd = sd(ESCS, na.rm = TRUE)
)
kable(SES_summary, col.names = c("Tracking", "count", "mean", "sd"))
merged_SCST <- merged_SCST %>%
mutate(adinst = (ST107Q01NA + ST107Q02NA + ST107Q03NA)/3) %>%
filter(!is.na(adinst))
adinst_summary <- group_by(merged_SCST, tracking) %>% summarise(
count = n(),
mean = mean(adinst, na.rm = TRUE),
sd = sd(adinst, na.rm = TRUE)
)
kable(adinst_summary)
merged_SCST$adinst <- as.numeric(merged_SCST$adinst)
boxplot(adinst ~ tracking, data = merged_SCST, xlab = "Type of Tracking/Response",
ylab = "Adaptation of instruction", main = "I can choose the level of difficulty")
results.aov <- aov(adinst ~ tracking, data = merged_SCST)
summary(results.aov)
TukeyHSD(results.aov)
leveneTest(adinst ~ tracking, data = merged_SCST)
adinst_1 <- lmer(adinst ~ 1 + (1|CNTSCHID), data = merged_SCST)
summary(adinst_1)
adinst_1.5 <- lmer(adinst ~ 1 + tracking + (1|CNTSCHID), data = merged_SCST)
summary(adinst_1.5)
adinst_3 <- lmer(adinst ~ 1 + tracking + sch_tracking + tracking * sch_tracking + (1|CNTSCHID), data = merged_SCST)
summary(adinst_3)
adinst_2 <- lmer(adinst ~ 1 + sch_tracking + ESCS + ESCS * sch_tracking + (1|CNTSCHID), data = merged_SCST)
summary(adinst_2)
# numeric quantities are on different scales
merged_SCST$ESCS <- scale(merged_SCST$ESCS)
merged_SCST$TEACHBEHA <- scale(merged_SCST$TEACHBEHA)
adinst_pro <- lmer(adinst ~ 1 + tracking + ESCS + RACETHC + IMMIG + sch_tracking +
TEACHBEHA + (1|CNTSCHID), data = merged_SCST)
summary(adinst_pro)
merged_black <- filter(merged_SCST, RACETHC == "Black")
adinst_blk <- lmer(adinst ~ 1 + tracking + ESCS + IMMIG + sch_tracking +
TEACHBEHA + (1|CNTSCHID), data = merged_black)
summary(adinst_blk)
table(merged_SCST$IMMIG)
merged_black <- filter(merged_SCST, RACETHC == "FirstGen")
adinst_blk <- lmer(adinst ~ 1 + tracking + ESCS + IMMIG + sch_tracking +
TEACHBEHA + (1|CNTSCHID), data = merged_black)
merged_immig <- filter(merged_SCST, IMMIG == "FirstGen")
adinst_immig <- lmer(adinst ~ 1 + tracking + ESCS + IMMIG + sch_tracking +
TEACHBEHA + (1|CNTSCHID), data = merged_immig)
table(merged_immig$IMMIG)
merged_immig <- filter(merged_SCST, IMMIG == "FirstGen")
merged_immig <- droplevels(merged_immig)
adinst_immig <- lmer(adinst ~ 1 + tracking + ESCS + IMMIG + sch_tracking +
TEACHBEHA + (1|CNTSCHID), data = merged_immig)
merged_immig <- filter(merged_SCST, IMMIG == "FirstGen")
adinst_immig <- lmer(adinst ~ 1 + tracking + ESCS + RACETHC + sch_tracking +
TEACHBEHA + (1|CNTSCHID), data = merged_immig)
summary(adinst_blk)
tab
prop.table(merged_SCST$tracking)
prop.table(tab)
library(tidyverse)
library(knitr)
library(car)
library(lme4)
library(lmerTest)
setwd("C:/Users/erich/OneDrive/Documents/UCLA/Tracking/PISA Project/Script")
load("school_US.RData")
load("student_US.RData")
load("teacher_US.RData")
load("merged_US.RData")
#student-level
names(merged_SCST)[names(merged_SCST)=="ST064Q02NA"] <- "tracking"
merged_SCST$tracking <- as.numeric(merged_SCST$tracking)
merged_SCST <- merged_SCST %>% filter(!is.na(tracking) & tracking < 4)
merged_SCST$tracking <- dplyr::recode(merged_SCST$tracking, `1` = "No choice",
`2` = "Some choice", `3` = "Complete choice")
merged_SCST$tracking <- as.factor(merged_SCST$tracking)
#school-level
names(merged_SCST)[names(merged_SCST)=="SC042Q01TA"] <- "sch_tracking"
merged_SCST$sch_tracking <- as.numeric(merged_SCST$sch_tracking)
merged_SCST <- merged_SCST %>% filter(!is.na(sch_tracking) & sch_tracking < 4)
merged_SCST$sch_tracking <- dplyr::recode(merged_SCST$sch_tracking, `1` = "All",
`2` = "Some", `3` = "None")
merged_SCST$sch_tracking <- as.factor(merged_SCST$sch_tracking)
fivenum(merged_SCST$ESCS)
mean(merged_SCST$ESCS)
str(merged_SCST$ESCS)
?mean
fivenum(student_US$ESCS)
mean(student_US$ESCS)
sd(student_US$ESCS)
str(student_US$ESCS)
mean(merged_SCST$ESCS, na.rm = TRUE)
mean(student_US$ESCS, na.rm = TRUE)
sd(merged_SCST$ESCS, na.rm = TRUE)
?na.rm
fivenum(merged_SCST$teach)
fivenum(merged_SCST$TEACHBEHA)
?fivenum
merged_SCST$TEACHBEHA <- merged_SCST$TEAC
fivenum(merged_SCST$TEACHBEHA)
fivenum(merged_SCST$TEACHBEHA)
library(tidyverse)
library(knitr)
library(car)
library(lme4)
library(lmerTest)
setwd("C:/Users/erich/OneDrive/Documents/UCLA/Tracking/PISA Project/Script")
load("school_US.RData")
load("student_US.RData")
load("teacher_US.RData")
load("merged_US.RData")
merged_SCST$TEACHBEHA <- merged_SCST$TEACHBEHA[merged_SCST$TEACHBEHA != 9999999]
merged_SCST$TEACHBEHA <- merged_SCST$TEACHBEHA[merged_SCST$TEACHBEHA != 9999999,]
temp <- merged_SCST$TEACHBEHA[merged_SCST$TEACHBEHA != 9999999,]
temp <- merged_SCST$TEACHBEHA[merged_SCST$TEACHBEHA != 9999999]
fivenum(temp)
mean(temp)
sd(temp)
?scale
?prop.test
?chisq.test
matrix(c(22, 650, 39, 635),2,2)
matrix(c(22, 658, 39, 635),2,2)
?contours
?contour
?nlm
#####################################
## Educ 231A Spring 2019 - MJ Jeon
#####################################
# Smoking example
# two independent proportions
pL <- 83/86
pC <- 72/86
## unnormalized posterior in the alpha,eta parametrization
alpha <- seq(-1,6,.1) # log odds ratio
eta <- seq(2,10,.1) # log odds product
smoking.posterior <- function(p) {
# p is a vector of length 2
alpha <- p[1]
eta <- p[2]
t1 <- (eta+alpha)/2
t2 <- (eta-alpha)/2
(exp(83*t1)/(1+exp(t1))^86)*(exp(72*t2)/(1+exp(t2))^86)
}
smoking.post.exact <- matrix(0,length(alpha),length(eta))
for (i in 1:length(alpha)) {
for (j in 1:length(eta)) {
smoking.post.exact[i,j] <- smoking.posterior(c(alpha[i],eta[j]))
}
}
contour(alpha,eta,smoking.post.exact,drawlabels=F,levels=c(1e-23,1e-24,1e-25,1e-26),
xlab="Alpha: Log odds-ratio",ylab="Eta: Log ods product")
## Normal approximation to posterior
# find mode and covariance at the mode
smoking.nlog.posterior <- function(p) {
-log(smoking.posterior(p))
}
# nlm finds parameter values that minimizes a given function. That's why we add the
# negative sign.
smoking.nlm <- nlm(smoking.nlog.posterior,c(1,1),hessian=T)
m <- smoking.nlm$estimate
S <- solve(smoking.nlm$hessian)
S
library(MCMCpack)
?rinvgamma
library(tidyverse)
setwd("C:/Users/erich/OneDrive/Documents/UCLA/Fall 2019/STAT 201A/Week 1/Homework 1")
photoresist <- read.table("photoresist.dat", header = TRUE)
formulations <- read.table("formulations.dat", header = TRUE)
test_w <- t.test(photoresist$X95C, photoresist$X100C, paired = TRUE, alternative = "greater")
test_w$p.value
test_w$conf.int
qqnorm(photoresist$X95C, main = "95 degrees Celsius")
qqline(photoresist$X95C)
qqnorm(photoresist$X100C, main = "100 degrees Celsius")
qqline(photoresist$X100C)
qqnorm(formulations$Form1, main = "Form 1")
qqline(formulations$Form1)
qqnorm(formulations$Form2, main = "Form 2")
qqline(formulations$Form2)
test_f <- t.test(formulations$Form1, formulations$Form2, paired = FALSE,
alternative = "two.sided", conf.level = 0.99)
test_f$p.value
test_w
str(test_w)
?antilogi
setwd("C:/Users/erich/Desktop/LatentSpaceResponseModels/MCMC Template")
library(tidyverse)
require('invgamma')
require('ggplot2')
require('pdist')
require('ggforce')
source('update_functions.R')
source('init_sampler.R')
source('data_funs.R')
run_mcmc_sampler<-function(M,myseed,config_number,plot_iter=1000,load_data,ordinal)
{
if(ordinal){
source('likelihood_functions_ordinal.R')
plot_fun=plot_latent_ordinal_cluster
}else{
source('likelihood_functions_cluster.R')
plot_fun=plot_latent_cluster
}
load_data()
ndim<<-2
ncluster<<-2
store_iter=1
batch_size=2000
plot_dirname=file.path(paste('Images/plots_config_',config_number,'_seed_',myseed,'_data_',dataname,sep=''))
if(!file.exists(plot_dirname)) {dir.create(plot_dirname)}
save_filename=file.path(paste('Saved_output/saved_output_config_',config_number,'_seed_',myseed,'_data_',dataname,sep=''))
overwrite=F
if(file.exists(save_filename) & !overwrite)
{
load(save_filename,verb=T)
start_index=length(stored_parameters$z)
print(paste('Continuing from previous run at iteration:',start_index))
set.seed(current_seed)
assign("current_values",current_values,envir = .GlobalEnv)
assign("stored_vars",stored_vars,envir = .GlobalEnv)
assign("hyperparameters",hyperparameters,envir = .GlobalEnv)
assign("proposal_sigs",proposal_sigs,envir = .GlobalEnv)
}else
{
print('Starting from scratch.')
#initalize
set.seed(myseed)
init_out=initialize_sampler(config_number,ordinal=ordinal)
assign("current_values",init_out[['init_values']],envir = .GlobalEnv)
assign("stored_vars",init_out[['stored_vars']],envir = .GlobalEnv)
assign("hyperparameters",init_out[['hyperparameters']],envir = .GlobalEnv)
assign("proposal_sigs",init_out[['proposal_sigs']],envir = .GlobalEnv)
acceptance_rates=list()
for(varname in varname_list)
{
acceptance_rates[[varname]]=rep(NA,M)
}
stored_parameters=list()
for(varname in names(current_values))
{
stored_parameters[[varname]]=list()
stored_parameters[[varname]][[1]]=current_values[[varname]]
}
stored_likelihoods=rep(NA,M)
stored_likelihoods[1]=calculate_full_likelihood(stored_parameters,1)
###sample
plot_fun(stored_parameters,1,mytitle='Initial Configuration',save_fig=T,save_filename=paste(plot_dirname,'/initial_configuration.png',sep=''))
start_index=2
}
pb <- txtProgressBar(max = M, style = 3)
for(jj in start_index:M)
{
current_seed=runif(1)*1e9 #for continuation purposes
set.seed(current_seed)
store=jj%%store_iter==0
storej=floor(jj/store_iter)
setTxtProgressBar(pb, jj)
for(varname in varname_list)
{
out=update_vector(varname)
global_update("current_values",varname,out$newvalue)
if(store) {stored_parameters[[varname]][[storej]]=out$newvalue}
acceptance_rates[[varname]][jj]=mean(out$accepts)
if(update_sigma_tf[[varname]])
{
newsigma=update_sigma(varname)
sig_varname=paste("sigma",varname,sep="_")
if(store) {stored_parameters[[sig_varname]][[storej]]=newsigma}
global_update("current_values",sig_varname,newsigma)
}
}
assign("stored_vars",update_stored_vars(),envir = .GlobalEnv)
newK=update_K()
global_update("current_values","K_w",newK$K_w)
global_update("current_values","K_z",newK$K_z)
#store values for new Ks:
global_update("current_values","mu",update_mu_clusters())
global_update("current_values","sigma",update_sigma_clusters())
global_update("current_values","lambda",update_lambda())
global_update("current_values","omega",update_omega())
stored_likelihoods[jj]=calculate_full_likelihood(stored_parameters,jj)
if(store) {
stored_parameters$K_w[[storej]]=current_values$K_w
stored_parameters$K_z[[storej]]=current_values$K_z
stored_parameters$mu[[storej]]=current_values$mu
stored_parameters$sigma[[storej]]=current_values$sigma
stored_parameters$lambda[[storej]]=current_values$lambda
stored_parameters$omega[[storej]]=current_values$omega
}
mi=max(1,jj-batch_size)
for(varname in varname_list)
{
#rosenthall and roberts algorithm
delta=ifelse(mean(acceptance_rates[[varname]][batch_size:jj],na.rm=T)>.44,min(.01,1/sqrt(jj)),-min(.01,1/sqrt(jj)))
proposal_sigs[[varname]]=proposal_sigs[[varname]]*exp(delta)
}
assign("proposal_sigs",proposal_sigs,envir = .GlobalEnv)
if(jj%%plot_iter==0)
{
print('acceptance rates:')
print(sapply(acceptance_rates,function(x) mean(x,na.rm=T)))
print(data.frame(proposal_sigs))
save(stored_parameters,current_values,stored_likelihoods,stored_vars,hyperparameters,proposal_sigs,acceptance_rates,current_seed,varname_list,update_sigma_tf,X,file=save_filename)
plot_fun(stored_parameters,storej,mytitle=toString(jj),save_fig=T,save_filename=paste(plot_dirname,'/iteration_',jj,'.png',sep=''))
}
}
}
M=10000
myseed=1111
config_number=2
plot_iter=100
# load_data=load_spelling_data
# ordinal=F
#non-ordinal cluster:
# run_mcmc_sampler(M,myseed,config_number,plot_iter=plot_iter,load_data=load_spelling_data)
#ordinal cluster:
load_data=load_big5_data
ordinal=T
run_mcmc_sampler(M,myseed,config_number,plot_iter=plot_iter,load_data=load_data,ordinal=T)
# save_filename=file.path(paste('Saved_output/saved_output_config_',config_number,'_seed_',myseed,'_data_',dataname,sep=''))
# load(save_filename,verb=T)
# print(sapply(acceptance_rates,function(x) mean(x,na.rm=T)))
View(X)
str(current_values)
current_values$beta
current_values$theta
config_number
