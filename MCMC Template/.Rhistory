logdiff_prior=prior_fun(proposed_vector)-prior_fun(current_vector)
alpha=exp(logdiff_likelihood+logdiff_prior)
randnum=runif(n1) #one for each k or i
accepts=randnum<alpha
retval=matrix(ifelse(rep(accepts,n2),proposed_vector,current_vector),n1,n2)
print(sum(is.na(retval)))
current_vector=current_values[[varname]]
n1=dim(current_vector)[1]
n2=dim(current_vector)[2]
proposal_sig=proposal_sigs[[varname]]
proposed_vector=matrix(rnorm(n=n1*n2,mean=current_vector,sd=proposal_sig),n1,n2)
if(varname=='tau'){proposed_vector[,1]=0}
likelihood_fun<-function(x) {likelihood_funs[[varname]](x)}
prior_fun<-function(x) {prior_funs[[varname]](x)}
logdiff_likelihood=likelihood_fun(proposed_vector)-likelihood_fun(current_vector)
logdiff_prior=prior_fun(proposed_vector)-prior_fun(current_vector)
alpha=exp(logdiff_likelihood+logdiff_prior)
randnum=runif(n1) #one for each k or i
accepts=randnum<alpha
retval=matrix(ifelse(rep(accepts,n2),proposed_vector,current_vector),n1,n2)
print(sum(is.na(retval)))
current_vector=current_values[[varname]]
n1=dim(current_vector)[1]
n2=dim(current_vector)[2]
proposal_sig=proposal_sigs[[varname]]
proposed_vector=matrix(rnorm(n=n1*n2,mean=current_vector,sd=proposal_sig),n1,n2)
if(varname=='tau'){proposed_vector[,1]=0}
likelihood_fun<-function(x) {likelihood_funs[[varname]](x)}
prior_fun<-function(x) {prior_funs[[varname]](x)}
logdiff_likelihood=likelihood_fun(proposed_vector)-likelihood_fun(current_vector)
logdiff_prior=prior_fun(proposed_vector)-prior_fun(current_vector)
alpha=exp(logdiff_likelihood+logdiff_prior)
randnum=runif(n1) #one for each k or i
accepts=randnum<alpha
retval=matrix(ifelse(rep(accepts,n2),proposed_vector,current_vector),n1,n2)
print(sum(is.na(retval)))
current_vector=current_values[[varname]]
n1=dim(current_vector)[1]
n2=dim(current_vector)[2]
proposal_sig=proposal_sigs[[varname]]
proposed_vector=matrix(rnorm(n=n1*n2,mean=current_vector,sd=proposal_sig),n1,n2)
if(varname=='tau'){proposed_vector[,1]=0}
likelihood_fun<-function(x) {likelihood_funs[[varname]](x)}
prior_fun<-function(x) {prior_funs[[varname]](x)}
logdiff_likelihood=likelihood_fun(proposed_vector)-likelihood_fun(current_vector)
logdiff_prior=prior_fun(proposed_vector)-prior_fun(current_vector)
alpha=exp(logdiff_likelihood+logdiff_prior)
randnum=runif(n1) #one for each k or i
accepts=randnum<alpha
retval=matrix(ifelse(rep(accepts,n2),proposed_vector,current_vector),n1,n2)
print(sum(is.na(retval)))
current_vector=current_values[[varname]]
n1=dim(current_vector)[1]
n2=dim(current_vector)[2]
proposal_sig=proposal_sigs[[varname]]
proposed_vector=matrix(rnorm(n=n1*n2,mean=current_vector,sd=proposal_sig),n1,n2)
if(varname=='tau'){proposed_vector[,1]=0}
likelihood_fun<-function(x) {likelihood_funs[[varname]](x)}
prior_fun<-function(x) {prior_funs[[varname]](x)}
logdiff_likelihood=likelihood_fun(proposed_vector)-likelihood_fun(current_vector)
logdiff_prior=prior_fun(proposed_vector)-prior_fun(current_vector)
alpha=exp(logdiff_likelihood+logdiff_prior)
randnum=runif(n1) #one for each k or i
accepts=randnum<alpha
retval=matrix(ifelse(rep(accepts,n2),proposed_vector,current_vector),n1,n2)
print(sum(is.na(retval)))
current_vector=current_values[[varname]]
n1=dim(current_vector)[1]
n2=dim(current_vector)[2]
proposal_sig=proposal_sigs[[varname]]
proposed_vector=matrix(rnorm(n=n1*n2,mean=current_vector,sd=proposal_sig),n1,n2)
if(varname=='tau'){proposed_vector[,1]=0}
likelihood_fun<-function(x) {likelihood_funs[[varname]](x)}
prior_fun<-function(x) {prior_funs[[varname]](x)}
logdiff_likelihood=likelihood_fun(proposed_vector)-likelihood_fun(current_vector)
logdiff_prior=prior_fun(proposed_vector)-prior_fun(current_vector)
alpha=exp(logdiff_likelihood+logdiff_prior)
randnum=runif(n1) #one for each k or i
accepts=randnum<alpha
retval=matrix(ifelse(rep(accepts,n2),proposed_vector,current_vector),n1,n2)
print(sum(is.na(retval)))
current_vector=current_values[[varname]]
n1=dim(current_vector)[1]
n2=dim(current_vector)[2]
proposal_sig=proposal_sigs[[varname]]
proposed_vector=matrix(rnorm(n=n1*n2,mean=current_vector,sd=proposal_sig),n1,n2)
if(varname=='tau'){proposed_vector[,1]=0}
likelihood_fun<-function(x) {likelihood_funs[[varname]](x)}
prior_fun<-function(x) {prior_funs[[varname]](x)}
logdiff_likelihood=likelihood_fun(proposed_vector)-likelihood_fun(current_vector)
logdiff_prior=prior_fun(proposed_vector)-prior_fun(current_vector)
alpha=exp(logdiff_likelihood+logdiff_prior)
randnum=runif(n1) #one for each k or i
accepts=randnum<alpha
retval=matrix(ifelse(rep(accepts,n2),proposed_vector,current_vector),n1,n2)
print(sum(is.na(retval)))
current_vector=current_values[[varname]]
n1=dim(current_vector)[1]
n2=dim(current_vector)[2]
proposal_sig=proposal_sigs[[varname]]
proposed_vector=matrix(rnorm(n=n1*n2,mean=current_vector,sd=proposal_sig),n1,n2)
if(varname=='tau'){proposed_vector[,1]=0}
likelihood_fun<-function(x) {likelihood_funs[[varname]](x)}
prior_fun<-function(x) {prior_funs[[varname]](x)}
logdiff_likelihood=likelihood_fun(proposed_vector)-likelihood_fun(current_vector)
logdiff_prior=prior_fun(proposed_vector)-prior_fun(current_vector)
alpha=exp(logdiff_likelihood+logdiff_prior)
randnum=runif(n1) #one for each k or i
accepts=randnum<alpha
retval=matrix(ifelse(rep(accepts,n2),proposed_vector,current_vector),n1,n2)
print(sum(is.na(retval)))
current_vector=current_values[[varname]]
n1=dim(current_vector)[1]
n2=dim(current_vector)[2]
proposal_sig=proposal_sigs[[varname]]
proposed_vector=matrix(rnorm(n=n1*n2,mean=current_vector,sd=proposal_sig),n1,n2)
if(varname=='tau'){proposed_vector[,1]=0}
likelihood_fun<-function(x) {likelihood_funs[[varname]](x)}
prior_fun<-function(x) {prior_funs[[varname]](x)}
logdiff_likelihood=likelihood_fun(proposed_vector)-likelihood_fun(current_vector)
logdiff_prior=prior_fun(proposed_vector)-prior_fun(current_vector)
alpha=exp(logdiff_likelihood+logdiff_prior)
randnum=runif(n1) #one for each k or i
accepts=randnum<alpha
retval=matrix(ifelse(rep(accepts,n2),proposed_vector,current_vector),n1,n2)
print(sum(is.na(retval)))
current_vector=current_values[[varname]]
n1=dim(current_vector)[1]
n2=dim(current_vector)[2]
proposal_sig=proposal_sigs[[varname]]
proposed_vector=matrix(rnorm(n=n1*n2,mean=current_vector,sd=proposal_sig),n1,n2)
if(varname=='tau'){proposed_vector[,1]=0}
likelihood_fun<-function(x) {likelihood_funs[[varname]](x)}
prior_fun<-function(x) {prior_funs[[varname]](x)}
logdiff_likelihood=likelihood_fun(proposed_vector)-likelihood_fun(current_vector)
logdiff_prior=prior_fun(proposed_vector)-prior_fun(current_vector)
alpha=exp(logdiff_likelihood+logdiff_prior)
randnum=runif(n1) #one for each k or i
accepts=randnum<alpha
retval=matrix(ifelse(rep(accepts,n2),proposed_vector,current_vector),n1,n2)
print(sum(is.na(retval)))
current_vector=current_values[[varname]]
n1=dim(current_vector)[1]
n2=dim(current_vector)[2]
proposal_sig=proposal_sigs[[varname]]
proposed_vector=matrix(rnorm(n=n1*n2,mean=current_vector,sd=proposal_sig),n1,n2)
if(varname=='tau'){proposed_vector[,1]=0}
likelihood_fun<-function(x) {likelihood_funs[[varname]](x)}
prior_fun<-function(x) {prior_funs[[varname]](x)}
logdiff_likelihood=likelihood_fun(proposed_vector)-likelihood_fun(current_vector)
logdiff_prior=prior_fun(proposed_vector)-prior_fun(current_vector)
alpha=exp(logdiff_likelihood+logdiff_prior)
randnum=runif(n1) #one for each k or i
accepts=randnum<alpha
retval=matrix(ifelse(rep(accepts,n2),proposed_vector,current_vector),n1,n2)
print(sum(is.na(retval)))
current_vector=current_values[[varname]]
n1=dim(current_vector)[1]
n2=dim(current_vector)[2]
proposal_sig=proposal_sigs[[varname]]
proposed_vector=matrix(rnorm(n=n1*n2,mean=current_vector,sd=proposal_sig),n1,n2)
if(varname=='tau'){proposed_vector[,1]=0}
likelihood_fun<-function(x) {likelihood_funs[[varname]](x)}
prior_fun<-function(x) {prior_funs[[varname]](x)}
logdiff_likelihood=likelihood_fun(proposed_vector)-likelihood_fun(current_vector)
logdiff_prior=prior_fun(proposed_vector)-prior_fun(current_vector)
alpha=exp(logdiff_likelihood+logdiff_prior)
randnum=runif(n1) #one for each k or i
accepts=randnum<alpha
retval=matrix(ifelse(rep(accepts,n2),proposed_vector,current_vector),n1,n2)
print(sum(is.na(retval)))
current_vector=current_values[[varname]]
n1=dim(current_vector)[1]
n2=dim(current_vector)[2]
proposal_sig=proposal_sigs[[varname]]
proposed_vector=matrix(rnorm(n=n1*n2,mean=current_vector,sd=proposal_sig),n1,n2)
if(varname=='tau'){proposed_vector[,1]=0}
likelihood_fun<-function(x) {likelihood_funs[[varname]](x)}
prior_fun<-function(x) {prior_funs[[varname]](x)}
logdiff_likelihood=likelihood_fun(proposed_vector)-likelihood_fun(current_vector)
logdiff_prior=prior_fun(proposed_vector)-prior_fun(current_vector)
alpha=exp(logdiff_likelihood+logdiff_prior)
randnum=runif(n1) #one for each k or i
accepts=randnum<alpha
retval=matrix(ifelse(rep(accepts,n2),proposed_vector,current_vector),n1,n2)
print(sum(is.na(retval)))
current_vector=current_values[[varname]]
n1=dim(current_vector)[1]
n2=dim(current_vector)[2]
proposal_sig=proposal_sigs[[varname]]
proposed_vector=matrix(rnorm(n=n1*n2,mean=current_vector,sd=proposal_sig),n1,n2)
if(varname=='tau'){proposed_vector[,1]=0}
likelihood_fun<-function(x) {likelihood_funs[[varname]](x)}
prior_fun<-function(x) {prior_funs[[varname]](x)}
logdiff_likelihood=likelihood_fun(proposed_vector)-likelihood_fun(current_vector)
logdiff_prior=prior_fun(proposed_vector)-prior_fun(current_vector)
alpha=exp(logdiff_likelihood+logdiff_prior)
randnum=runif(n1) #one for each k or i
accepts=randnum<alpha
retval=matrix(ifelse(rep(accepts,n2),proposed_vector,current_vector),n1,n2)
print(sum(is.na(retval)))
current_vector=current_values[[varname]]
n1=dim(current_vector)[1]
n2=dim(current_vector)[2]
proposal_sig=proposal_sigs[[varname]]
proposed_vector=matrix(rnorm(n=n1*n2,mean=current_vector,sd=proposal_sig),n1,n2)
if(varname=='tau'){proposed_vector[,1]=0}
likelihood_fun<-function(x) {likelihood_funs[[varname]](x)}
prior_fun<-function(x) {prior_funs[[varname]](x)}
logdiff_likelihood=likelihood_fun(proposed_vector)-likelihood_fun(current_vector)
logdiff_prior=prior_fun(proposed_vector)-prior_fun(current_vector)
alpha=exp(logdiff_likelihood+logdiff_prior)
randnum=runif(n1) #one for each k or i
accepts=randnum<alpha
retval=matrix(ifelse(rep(accepts,n2),proposed_vector,current_vector),n1,n2)
print(sum(is.na(retval)))
current_vector=current_values[[varname]]
n1=dim(current_vector)[1]
n2=dim(current_vector)[2]
proposal_sig=proposal_sigs[[varname]]
proposed_vector=matrix(rnorm(n=n1*n2,mean=current_vector,sd=proposal_sig),n1,n2)
if(varname=='tau'){proposed_vector[,1]=0}
likelihood_fun<-function(x) {likelihood_funs[[varname]](x)}
prior_fun<-function(x) {prior_funs[[varname]](x)}
logdiff_likelihood=likelihood_fun(proposed_vector)-likelihood_fun(current_vector)
logdiff_prior=prior_fun(proposed_vector)-prior_fun(current_vector)
alpha=exp(logdiff_likelihood+logdiff_prior)
randnum=runif(n1) #one for each k or i
accepts=randnum<alpha
retval=matrix(ifelse(rep(accepts,n2),proposed_vector,current_vector),n1,n2)
print(sum(is.na(retval)))
current_vector=current_values[[varname]]
n1=dim(current_vector)[1]
n2=dim(current_vector)[2]
proposal_sig=proposal_sigs[[varname]]
proposed_vector=matrix(rnorm(n=n1*n2,mean=current_vector,sd=proposal_sig),n1,n2)
if(varname=='tau'){proposed_vector[,1]=0}
likelihood_fun<-function(x) {likelihood_funs[[varname]](x)}
prior_fun<-function(x) {prior_funs[[varname]](x)}
logdiff_likelihood=likelihood_fun(proposed_vector)-likelihood_fun(current_vector)
logdiff_prior=prior_fun(proposed_vector)-prior_fun(current_vector)
alpha=exp(logdiff_likelihood+logdiff_prior)
randnum=runif(n1) #one for each k or i
accepts=randnum<alpha
retval=matrix(ifelse(rep(accepts,n2),proposed_vector,current_vector),n1,n2)
print(sum(is.na(retval)))
current_vector=current_values[[varname]]
n1=dim(current_vector)[1]
n2=dim(current_vector)[2]
proposal_sig=proposal_sigs[[varname]]
proposed_vector=matrix(rnorm(n=n1*n2,mean=current_vector,sd=proposal_sig),n1,n2)
if(varname=='tau'){proposed_vector[,1]=0}
likelihood_fun<-function(x) {likelihood_funs[[varname]](x)}
prior_fun<-function(x) {prior_funs[[varname]](x)}
logdiff_likelihood=likelihood_fun(proposed_vector)-likelihood_fun(current_vector)
logdiff_prior=prior_fun(proposed_vector)-prior_fun(current_vector)
alpha=exp(logdiff_likelihood+logdiff_prior)
randnum=runif(n1) #one for each k or i
accepts=randnum<alpha
retval=matrix(ifelse(rep(accepts,n2),proposed_vector,current_vector),n1,n2)
print(sum(is.na(retval)))
current_vector=current_values[[varname]]
n1=dim(current_vector)[1]
n2=dim(current_vector)[2]
proposal_sig=proposal_sigs[[varname]]
proposed_vector=matrix(rnorm(n=n1*n2,mean=current_vector,sd=proposal_sig),n1,n2)
if(varname=='tau'){proposed_vector[,1]=0}
likelihood_fun<-function(x) {likelihood_funs[[varname]](x)}
prior_fun<-function(x) {prior_funs[[varname]](x)}
logdiff_likelihood=likelihood_fun(proposed_vector)-likelihood_fun(current_vector)
logdiff_prior=prior_fun(proposed_vector)-prior_fun(current_vector)
alpha=exp(logdiff_likelihood+logdiff_prior)
randnum=runif(n1) #one for each k or i
accepts=randnum<alpha
retval=matrix(ifelse(rep(accepts,n2),proposed_vector,current_vector),n1,n2)
print(sum(is.na(retval)))
current_vector=current_values[[varname]]
n1=dim(current_vector)[1]
n2=dim(current_vector)[2]
proposal_sig=proposal_sigs[[varname]]
proposed_vector=matrix(rnorm(n=n1*n2,mean=current_vector,sd=proposal_sig),n1,n2)
if(varname=='tau'){proposed_vector[,1]=0}
likelihood_fun<-function(x) {likelihood_funs[[varname]](x)}
prior_fun<-function(x) {prior_funs[[varname]](x)}
logdiff_likelihood=likelihood_fun(proposed_vector)-likelihood_fun(current_vector)
logdiff_prior=prior_fun(proposed_vector)-prior_fun(current_vector)
alpha=exp(logdiff_likelihood+logdiff_prior)
randnum=runif(n1) #one for each k or i
accepts=randnum<alpha
retval=matrix(ifelse(rep(accepts,n2),proposed_vector,current_vector),n1,n2)
print(sum(is.na(retval)))
source('~/Dropbox/LatentSpaceResponseModels/MCMC Template/update_functions.R')
source('~/Dropbox/LatentSpaceResponseModels/MCMC Template/update_functions.R')
source('~/Dropbox/LatentSpaceResponseModels/MCMC Template/update_functions.R')
source('~/Dropbox/LatentSpaceResponseModels/MCMC Template/mcmc_sampler.R')
debugSource('~/Dropbox/LatentSpaceResponseModels/MCMC Template/update_functions.R')
source('~/Dropbox/LatentSpaceResponseModels/MCMC Template/mcmc_sampler.R')
debugSource('~/Dropbox/LatentSpaceResponseModels/MCMC Template/update_functions.R')
source('~/Dropbox/LatentSpaceResponseModels/MCMC Template/mcmc_sampler.R')
error(e)
error()
save(list=ls(),file='temp_save_delete.Rdat')
source('~/Dropbox/LatentSpaceResponseModels/MCMC Template/mcmc_sampler.R')
load('temp_save_delete.Rdat')
load('temp_save_delete.Rdat',verb=T)
varname
current_vector
sum(is.na(proposed_vector))
sum(is.na(current_vector))
sum(is.na(logdiff_likelihood))
which(is.na(logdiff_likelihood))
likelihood_fun(proposed_vector)[315]
likelihood_fun(current_vector)[315]
likelihood_fun(current_vector)
given_theta=current_vector
tau_mat=aperm(array(rep(current_values$tau,nz),dim=c(nw,ntau,nz)),perm=c(3,1,2))
wz_dist=euc_dist_ordinal(current_values$z,current_values$w)
bt_mat=array(rep(outer(c(given_theta),c(current_values$beta),'+'),ntau),dim=c(nz,nw,ntau))
term_mat_unnorm=sigmoid(tau_mat+bt_mat-wz_dist)
term_mat_norm=aperm(apply(term_mat_unnorm,c(1,2),function(r) r/sum(r)),c(2,3,1)) #normalize
retval=sapply(1:nw,function(jj)
sapply(1:nz,function(ii) term_mat_norm[ii,jj,][X[ii,jj]-minord+1]))
retval
rowSums(log(retval))
which(rowSums(log(retval))==0)
log(1)
tau_mat=aperm(array(rep(current_values$tau,nz),dim=c(nw,ntau,nz)),perm=c(3,1,2))
wz_dist=euc_dist_ordinal(current_values$z,current_values$w)
bt_mat=array(rep(outer(c(given_theta),c(current_values$beta),'+'),ntau),dim=c(nz,nw,ntau))
term_mat_unnorm=sigmoid(tau_mat+bt_mat-wz_dist)
term_mat_norm=aperm(apply(term_mat_unnorm,c(1,2),function(r) r/sum(r)),c(2,3,1)) #normalize
retval=sapply(1:nw,function(jj)
sapply(1:nz,function(ii) term_mat_norm[ii,jj,][X[ii,jj]-minord+1]))
retval
term_mat_norm
given_theta=proposed_vector
tau_mat=aperm(array(rep(current_values$tau,nz),dim=c(nw,ntau,nz)),perm=c(3,1,2))
wz_dist=euc_dist_ordinal(current_values$z,current_values$w)
bt_mat=array(rep(outer(c(given_theta),c(current_values$beta),'+'),ntau),dim=c(nz,nw,ntau))
term_mat_unnorm=sigmoid(tau_mat+bt_mat-wz_dist)
term_mat_norm=aperm(apply(term_mat_unnorm,c(1,2),function(r) r/sum(r)),c(2,3,1)) #normalize
retval=sapply(1:nw,function(jj)
sapply(1:nz,function(ii) term_mat_norm[ii,jj,][X[ii,jj]-minord+1]))
which(is.na(logdiff_likelihood))
retval[315,]
retval[,315]
retval[315,]
retval[314,]
sum(log(retval[314,]))
rowSums(log(retval))[314]
sapply(1:nw,function(jj)
sapply(c(315),function(ii) term_mat_norm[ii,jj,][X[ii,jj]-minord+1]))
sapply(1:nw,function(jj) term_mat_norm[315,jj,][X[315,jj]-minord+1])
term_mat_norm[315,,]
term_mat_unnorm[315,,]
term_mat_unnorm[314,,]
tau_mat[315,,]
bt_mat[315,,]
wz_dist[315,,]
aa=tau_mat+bt_mat-wz_dist
aa[315,,]
sigmoid(aa[315,,])
1e-500
1e-400
1e-300
1e-320
1e-321
1e-322
1e-40
1e-400
1e-350
1e-320
mean(rep(3,1e-320))
rep(1e-320,3)
mean(rep(1e-320,3))
rep(1e-320,3)/mean(rep(1e-320,3))
rep(1e-320,3)/sum(rep(1e-320,3))
source('~/Dropbox/LatentSpaceResponseModels/MCMC Template/mcmc_sampler.R')
source('~/Dropbox/LatentSpaceResponseModels/MCMC Template/mcmc_sampler.R')
machine_tol
source('~/Dropbox/LatentSpaceResponseModels/MCMC Template/mcmc_sampler.R')
current_values
current_values$beta
stored_likelihoods
gplot<-function(x) {ggplot()+geom_line(aes(x=1:length(x),y=x))}
gplot(stored_likelihoods[1:sum(!is.na(stored_likelihoods))])
length(sstored_parameters$tau)
length(stored_parameters$tau)
current_values$tau
calculate_full_likelihood(stored_parameters,312)
calculate_full_likelihood(stored_parameters,300)
calculate_full_likelihood(stored_parameters,100)
plot_fun
plot_fun(stored_parameters,312)
plot_fun(stored_parameters,313)
plot_fun(stored_parameters,312)
kk=312
tau_mat=aperm(array(rep(stored_parameters$tau[[kk]],nz),dim=c(nw,ntau,nz)),perm=c(3,1,2))
euc_dist_ordinal
w=current_values$w
z=current_values$z
w
ggplot()+geom_point(data=w,mapping=aes(x=w[,1],y=w[,2]))
data.frame(w,names=c('coord1','coord2'))
data.frame(w
)
data.frame(w,names=c('X1','X2'))
ggplot()+geom_point(data=data.frame(w),mapping=aes(x=X1,y=X2))
w_flattened=matrix(w,nw*ntau,2)
distout=pdist(z,w_flattened)
dmat=array(as.matrix(distout),dim=c(nz,nw,ntau))
w
w-w_flattened
w_init=array(matrix(NA,nw*ntau,2),dim=c(nw,ntau,2))
w_init
w_init=array(matrix(NA,nw*ntau,2),dim=c(nw,2,ntau))
w_init
nw
array(as.matrix(distout),dim=c(nz,nw,ntau)
)
array(as.matrix(distout),dim=c(nz,nw,ntau))
aa=array(as.matrix(distout),dim=c(nz,nw,ntau))
w
aa
dim(aa)
aa[,,1]-as.matrix(dist(z,w[1:5,]))
as.matrix(dist(z,w[1:5,]))
as.matrix(pdist(z,w[1:5,]))
aa[,,1]-as.matrix(pdist(z,w[1:5,]))
aa[,,2]-as.matrix(pdist(z,w[6:10,]))
aa[,,3]-as.matrix(pdist(z,w[11:15,]))
tau_mat=aperm(array(rep(current_values$tau,nz),dim=c(nw,ntau,nz)),perm=c(3,1,2))
tau_mat
tau_mat[,,1]
tau_mat[1,,]
tau_mat[2,,]
wz_dist=euc_dist_ordinal(given_z,current_values$w)
bt_mat=array(rep(outer(c(current_values$theta),c(current_values$beta),'+'),ntau),dim=c(nz,nw,ntau))
euc_dist_ordinal <- function(z,w)
{
distout=pdist(z,w)
return(array(as.matrix(distout),dim=c(nz,nw,ntau)))
}
given_z=current_values$z
tau_mat=aperm(array(rep(current_values$tau,nz),dim=c(nw,ntau,nz)),perm=c(3,1,2))
wz_dist=euc_dist_ordinal(given_z,current_values$w)
bt_mat=array(rep(outer(c(current_values$theta),c(current_values$beta),'+'),ntau),dim=c(nz,nw,ntau))
wz_dist[1,,]
pdist(current_values$z[1,],current_values$w)
as.matrix(pdist(current_values$z[1,],current_values$w))
as.matrix(pdist(current_values$z[1,],current_values$w),5,4)
matrix(pdist(current_values$z[1,],current_values$w),5,4)
matrix(as.matrix(pdist(current_values$z[1,],current_values$w)),5,4)
matrix(as.matrix(pdist(current_values$z[1,],current_values$w[,1:5])),5,4)
matrix(as.matrix(pdist(current_values$z[1,],current_values$w[,1:5])))
matrix(as.matrix(pdist(current_values$z[1,],current_values$w[1:5,])))
tau_mat[1,,]
matrix(as.matrix(pdist(current_values$z[1,],current_values$w[6:10,])))
tau_mat[2,,]
tau_mat[3,,]
bt_mat[1,,]
bt_mat[2,,]
bt_mat[1,,]
current_values$theta[1,]
current_values$theta[2,]
term_mat_unnorm=sigmoid(tau_mat+bt_mat-wz_dist)
term_mat_unnorm[1,,]
term_mat_unnorm[2,,]
term_mat_unnorm[3,,]
X[1,]
X[2,]
term_mat_norm[ii,jj,][X[ii,jj]-minord+1]
ii=1
jj=1
term_mat_norm[ii,jj,][X[ii,jj]-minord+1]
ii=10
jj=10
term_mat_norm[ii,jj,][X[ii,jj]-minord+1]
jj=4
term_mat_norm[ii,jj,][X[ii,jj]-minord+1]
term_mat_norm[ii,jj,X[ii,jj]-minord+1]
retval
term_mat_unnorm
term_mat_norm
term_mat_unnorm
term_mat_unnorm[40,4]
term_mat_unnorm[40,4,]
term_mat_norm[40,4,]
source('~/Dropbox/LatentSpaceResponseModels/MCMC Template/make_config.R')
source('~/Dropbox/LatentSpaceResponseModels/MCMC Template/mcmc_sampler.R')
source('~/Dropbox/LatentSpaceResponseModels/MCMC Template/make_config.R')
source('~/Dropbox/LatentSpaceResponseModels/MCMC Template/make_config.R')
source('~/Dropbox/LatentSpaceResponseModels/MCMC Template/mcmc_sampler.R')
source('~/Dropbox/LatentSpaceResponseModels/MCMC Template/mcmc_sampler.R')
current_values$tau
current_values
source('~/Dropbox/LatentSpaceResponseModels/Test Runs/MCMC Longitudinal/mcmc_sampler.R', echo=TRUE)
setwd("~/Dropbox/LatentSpaceResponseModels/MCMC Template")
source('~/Dropbox/LatentSpaceResponseModels/Test Runs/MCMC Longitudinal/mcmc_sampler.R', echo=TRUE)
source('~/Dropbox/LatentSpaceResponseModels/MCMC Template/mcmc_sampler.R', echo=TRUE)
install.packages("tidyverse")
source('~/Dropbox/LatentSpaceResponseModels/MCMC Template/make_config.R', echo=TRUE)
source('~/Dropbox/LatentSpaceResponseModels/MCMC Template/mcmc_sampler.R', echo=TRUE)
install.packages("tidyverse")
install.packages('httr'); install.packages('rvest')
install.packages('httr');
install.packages('openssl');
install.packages('libssl-dev');
install.packages('openssl');
install.packages("tidyverse")
source('~/Dropbox/LatentSpaceResponseModels/MCMC Template/mcmc_sampler.R', echo=TRUE)
View(initialize_sampler)
