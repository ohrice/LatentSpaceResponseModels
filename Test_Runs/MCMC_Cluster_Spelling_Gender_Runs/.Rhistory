summary(b)  #This gives the maximum distance (among other things!)
summary(b)  #This gives the maximum distance (among other things!)
bCd <- as.geodata(a[, c(1,2,5)])
varCd <- variog(bCd, max.dist=3)
plot(varCd)
lines.variomodel(cov.model="sph", cov.pars=c(.2,1.5), nug=0.5, max.dist=3.5)
lines.variomodel(cov.model="sph", cov.pars=c(.2,1.5), nug=0.5, max.dist=3.5)
plot(varCd)
lines.variomodel(cov.model="sph", cov.pars=c(.2,1.5), nug=0.5, max.dist=3.5)
===========
#Extra questions:
#Similarly do the same for the other variables.  For example, Zn:
bZn <- as.geodata(a[, c(1,2,11)])
varZn <- variog(bZn, max.dist=3)
plot(varZn)
===========
#Question (d):
#Indicator semivariograms:
#Transform your data into 0, 1 data based on some threshold.  Use variable Cd:
I <- ifelse(a$Cd >= 1.1, 1,0)
===========
#Question (d):
#Indicator semivariograms:
#Transform your data into 0, 1 data based on some threshold.  Use variable Cd:
I <- ifelse(a$Cd >= 1.1, 1,0)
===========
#Question (d):
#Indicator semivariograms:
#Transform your data into 0, 1 data based on some threshold.  Use variable Cd:
I <- ifelse(a$Cd >= 1.1, 1,0)
I <- ifelse(a$Cd >= 1.1, 1,0)
bI <- as.geodata(cbind(a[,c(1,2)],I))
varI <- variog(bI)
plot(varI)
lines.variomodel(cov.model="gaussian", cov.pars=c(0.05,2), nug=0.2, max.dist=5.5)
lines.variomodel(cov.model="gaussian", cov.pars=c(0.05,2), nug=0.2, max.dist=5.5)
I <- ifelse(a$Cd >= 1, 1,0)
bI <- as.geodata(cbind(a[,c(1,2)],I))
varI <- variog(bI, max.dist=2)
plot(varI)
lines.variomodel(cov.model="sph", cov.pars=c(0.1,1.0), nug=0.15, max.dist=5.5)
================================================================================
================================================================================
================================================================================
================================================================================
#Exercise 2:
#Access the soil data:
a <- read.table("http://www.stat.ucla.edu/~nchristo/statistics_c173_c273/soil.txt",
header=TRUE)
library(geoR)
b <- as.geodata(a)
var1 <- variog(b, max.dist=1800)
plot(var1)
lines.variomodel(cov.model="sph", cov.pars=c(10000,1000), nug=5000, max.dist=1800, lty=2)
fit1 <- variofit(var1, cov.model="sph", ini.cov.pars=c(10000,1000),
fix.nugget=FALSE, nugget=5000)
lines(fit1, lty=1)
fit3 <- variofit(var1, cov.model="sph", ini.cov.pars=c(10000,1000), weights="equal"
fix.nugget=FALSE, nugget=5000)
lines(fit3, lty=1, col="orange")
================================================================================
================================================================================
#Exercise 3:
#Coal ash data:
a <- read.table("http://www.stat.ucla.edu/~nchristo/statistics_c173_c273/coal_ash.txt", header=TRUE)
library(geoR)
b <- as.geodata(a)
summary(b)  #Get maximum distance.
a <- read.table("http://www.stat.ucla.edu/~nchristo/statistics_c173_c273/jura.txt", header=TRUE)
#Compute semivariograms using geoR:
library(geoR)
#Question (a):
#First, get the maximum distance:
b <- as.geodata(a)
summary(b)  #This gives the maximum distance (among other things!)
#Use variable Cd:
bCd <- as.geodata(a[, c(1,2,5)])
#Question (b):
varCd <- variog(bCd, max.dist=3)
plot(varCd)
#Question (c):
#Fit "by eye" a theoretical variogram:
lines.variomodel(cov.model="sph", cov.pars=c(.2,1.5), nug=0.5, max.dist=3.5)
help(variog)
strategy_grid_A=cbind(c(30,20,15)-c(0,1,2,3)*ticket_price,
c(40,30,24)-c(0,1,2,3)*ticket_price,
c(45,36,30)-c(0,1,2,3)*ticket_price)
ticket_price=10
strategy_grid_A=cbind(c(30,20,15)-c(0,1,2,3)*ticket_price,
c(40,30,24)-c(0,1,2,3)*ticket_price,
c(45,36,30)-c(0,1,2,3)*ticket_price)
ticket_price=10
strategy_grid_A=cbind(c(0,30,20,15)-c(0,1,2,3)*ticket_price,
c(0,40,30,24)-c(0,1,2,3)*ticket_price,
c(0,45,36,30)-c(0,1,2,3)*ticket_price)
strategy_grid_A
ticket_price=10
strategy_grid_A=rbind(c(0,30,20,15)-c(0,1,2,3)*ticket_price,
c(0,40,30,24)-c(0,1,2,3)*ticket_price,
c(0,45,36,30)-c(0,1,2,3)*ticket_price)
ticket_price=10
strategy_grid_A=rbind(c(60,60,60,60)-c(0,1,2,3)*ticket_price,
c(0,30,20,15)-c(0,1,2,3)*ticket_price,
c(0,40,30,24)-c(0,1,2,3)*ticket_price,
c(0,45,36,30)-c(0,1,2,3)*ticket_price)
strategy_grid_B
strategy_grid
ticket_price=10
strategy_grid=rbind(c(60,60,60,60)-c(0,1,2,3)*ticket_price,
c(0,30,20,15)-c(0,1,2,3)*ticket_price,
c(0,40,30,24)-c(0,1,2,3)*ticket_price,
c(0,45,36,30)-c(0,1,2,3)*ticket_price)
strategy_grid
i+"s"
i=1
i+"s"
paste(str(i),"s")
print(paste(str(i),"s"))
print(paste(str(23),"s"))
print(paste(num2str(23),"s"))
print(paste(toString(23),"s"))
print(paste(toString(23),"s",toString(4)))
source('C:/Users/samjb/Dropbox/Game Theory/hw2_problem1_code.R', echo=TRUE)
source('C:/Users/samjb/Dropbox/Game Theory/hw2_problem1_code.R', echo=TRUE)
source('C:/Users/samjb/Dropbox/Game Theory/hw2_problem1_code.R', echo=TRUE)
dim(strategy_grid)
n1,n2=dim(strategy_grid)
n1, n2=dim(strategy_grid)
n1=dim(strategy_gird)[1]
n1=dim(strategy_grid)[1]
strategy_grid
strategy_grid=strategy_grid[-1]
strategy_grid
strategy_grid=rbind(c(60,60,60,60)-c(0,1,2,3)*ticket_price,
c(0,30,20,15)-c(0,1,2,3)*ticket_price,
c(0,40,30,24)-c(0,1,2,3)*ticket_price,
c(0,45,36,30)-c(0,1,2,3)*ticket_price)
strategy_grid
strategy_grid[i]
strategy_grid[i,]
i=2
strategy_grid[i,]
ticket_price=10
strategy_grid=rbind(c(0,0,0,0)-0*ticket_price,
c(60,30,20,15)-1*ticket_rice,
c(60,40,30,24)-2*ticket_price,
c(60,45,36,30)-3*ticket_price)
strategy_grid
ticket_price=10
strategy_grid=rbind(c(0,0,0,0)-0*ticket_price,
c(60,30,20,15)-1*ticket_rice,
c(60,40,30,24)-2*ticket_price,
c(60,45,36,30)-3*ticket_price)
n1=dim(strategy_gri
strategy_grid
ticket_price=10
strategy_grid=rbind(c(0,0,0,0)-0*ticket_price,
c(60,30,20,15)-1*ticket_price,
c(60,40,30,24)-2*ticket_price,
c(60,45,36,30)-3*ticket_pr
ticket_price=10
strategy_grid=rbind(c(0,0,0,0)-0*ticket_price,
c(60,30,20,15)-1*ticket_price,
c(60,40,30,24)-2*ticket_price,
c(60,45,36,30)-3*ticket_price)
strategy_grid
strictly_dominated_strategies=rep(False,nA)
strictly_dominated_strategies=rep(false,nA)
strictly_dominated_strategies=rep(FALSE,nA)
strictkly_dominated_strategies=c(FALSE,FALSE,TRUE,FALSE)
strictkly_dominated_strategies
strateg_grid
strategy_grid
strategy_grid[strictkly_dominated_strategies]
strategy_grid[~strictkly_dominated_strategies]
strategy_grid[!strictkly_dominated_strategies]
strategy_grid[!strictkly_dominated_strategies,]
t(strategy_grid)
strategy_grid=strategy_grid[,!strictkly_dominated_strategies]
strategy_grid
ticket_price=10
strategy_grid=rbind(c(0,0,0,0)-0*ticket_price,
c(60,30,20,15)-1*ticket_price,
c(60,40,30,24)-2*ticket_price,
c(60,45,36,30)-3*ticket_price)
nA=dim(strategy_grid)[1]
nB=dim(strategy_grid)[2]
strictly_dominated_strategies=rep(FALSE,nA)
for(i in 1:nA)
{
for(j in 1:nA)
{
if(all(strategy_grid[i,]<strategy_grid[j,]))
{
print(paste(toString(i),"is dominated by",toString(j)))
strictly_dominated_strategies[i]=TRUE
}
}
}
strategy_grid=strategy_grid[,!strictkly_dominated_strategies]
strategy_grid
strategy_grid=strategy_grid[,!strictkly_dominated_strategies]
ticket_price=10
strategy_grid=rbind(c(0,0,0,0)-0*ticket_price,
c(60,30,20,15)-1*ticket_price,
c(60,40,30,24)-2*ticket_price,
c(60,45,36,30)-3*ticket_price)
nA=dim(strategy_grid)[1]
nB=dim(strategy_grid)[2]
strictly_dominated_strategies=rep(FALSE,nA)
for(i in 1:nA)
{
for(j in 1:nA)
{
if(all(strategy_grid[i,]<strategy_grid[j,]))
{
print(paste(toString(i),"is dominated by",toString(j)))
strictly_dominated_strategies[i]=TRUE
}
}
}
strategy_grid=strategy_grid[,!strictkly_dominated_strategies]
strategy_grid
strictkly_dominated_strategies
source('C:/Users/samjb/Dropbox/Game Theory/hw2_problem1_code.R', echo=TRUE)
strategy_grid
nA=dim(strategy_grid)[1]
nB=dim(strategy_grid)[2]
strictly_dominated_strategies=rep(FALSE,nA)
for(i in 1:nA)
{
for(j in 1:nA)
{
if(all(strategy_grid[i,]<strategy_grid[j,]))
{
print(paste(toString(i),"is dominated by",toString(j)))
strictly_dominated_strategies[i]=TRUE
}
}
}
strategy_grid=strategy_grid[,!strictly_dominated_strategies]
nA=dim(strategy_grid)[1]
nB=dim(strategy_grid)[2]
strictly_dominated_strategies=rep(FALSE,nA)
for(i in 1:nA)
{
for(j in 1:nA)
{
if(all(strategy_grid[i,]<strategy_grid[j,]))
{
print(paste(toString(i),"is dominated by",toString(j)))
strictly_dominated_strategies[i]=TRUE
}
}
}
strategy_grid=strategy_grid[,!strictly_dominated_strategies]
source('C:/Users/samjb/Dropbox/Game Theory/hw2_problem1_code.R', echo=TRUE)
strategy_grid
strategy_grid=rbind(c(0,0,0,0)-0*ticket_price,
c(60,30,20,15)-1*ticket_price,
c(60,40,30,24)-2*ticket_price,
c(60,45,36,30)-3*ticket_price)
strategy_grid
source('C:/Users/samjb/Dropbox/Game Theory/hw2_problem1_code.R', echo=TRUE)
source('C:/Users/samjb/Dropbox/Game Theory/hw2_problem1_code.R', echo=TRUE)
source('C:/Users/samjb/Dropbox/Game Theory/hw2_problem1_code.R', echo=TRUE)
strictly_dominated_strategiesA
c(0,1,2,3)[strictly_dominated_strategiesA]
c(0,1,2,3)[!strictly_dominated_strategiesA]
source('C:/Users/samjb/Dropbox/Game Theory/hw2_problem1_code.R', echo=TRUE)
source('C:/Users/samjb/Dropbox/Game Theory/hw2_problem1_code.R', echo=TRUE)
source('C:/Users/samjb/Dropbox/Game Theory/hw2_problem1_code.R', echo=TRUE)
ticket_price=0
strategy_grid=rbind(c(0,0,0,0)-0*ticket_price,
c(60,30,20,15)-1*ticket_price,
c(60,40,30,24)-2*ticket_price,
c(60,45,36,30)-3*ticket_price)
nA=dim(strategy_grid)[1]
nB=dim(strategy_grid)[2]
strictly_dominated_strategiesA=rep(FALSE,nA)
for(i in 1:nA)
{
for(j in 1:nA)
{
if(all(strategy_grid[i,]<strategy_grid[j,]))
{
print(paste(toString(i),"is dominated by",toString(j)))
strictly_dominated_strategiesA[i]=TRUE
}
}
}
strategy_grid=strategy_grid[,!strictly_dominated_strategiesA]
strategy_grid
strictly_dominated_strategiesA
ticket_price=0
strategy_grid=rbind(c(0,0,0,0)-0*ticket_price,
c(60,30,20,15)-1*ticket_price,
c(60,40,30,24)-2*ticket_price,
c(60,45,36,30)-3*ticket_price)
nA=dim(strategy_grid)[1]
nB=dim(strategy_grid)[2]
strictly_dominated_strategiesA=rep(FALSE,nA)
for(i in 1:nA)
{
for(j in 1:nA)
{
if(all(strategy_grid[i,]<strategy_grid[j,]))
{
print(paste(toString(i),"is dominated by",toString(j)))
strictly_dominated_strategiesA[i]=TRUE
}
}
}
strategy_grid=strategy_grid[,!strictly_dominated_strategiesA]
strictly_dominated_strategiesA
ticket_price=0
strategy_grid=rbind(c(0,0,0,0)-0*ticket_price,
c(60,30,20,15)-1*ticket_price,
c(60,40,30,24)-2*ticket_price,
c(60,45,36,30)-3*ticket_price)
strategy_grid
source('C:/Users/samjb/Dropbox/Game Theory/hw2_problem1_code.R', echo=TRUE)
source('C:/Users/samjb/Dropbox/Game Theory/hw2_problem1_code.R', echo=TRUE)
source('C:/Users/samjb/Dropbox/Game Theory/hw2_problem1_code.R', echo=TRUE)
source('C:/Users/samjb/Dropbox/Game Theory/hw2_problem1_code.R', echo=TRUE)
source('C:/Users/samjb/Dropbox/Game Theory/hw2_problem1_code.R', echo=TRUE)
source('C:/Users/samjb/Dropbox/Game Theory/hw2_problem1_code.R', echo=TRUE)
source('C:/Users/samjb/Dropbox/Game Theory/hw2_problem1_code.R', echo=TRUE)
source('C:/Users/samjb/Dropbox/Game Theory/hw2_problem1_code.R', echo=TRUE)
source('C:/Users/samjb/Dropbox/Game Theory/hw2_problem1_code.R', echo=TRUE)
source('C:/Users/samjb/Dropbox/Game Theory/hw2_problem1_code.R', echo=TRUE)
source('C:/Users/samjb/Dropbox/Game Theory/hw2_problem1_code.R', echo=TRUE)
source('C:/Users/samjb/Dropbox/Game Theory/hw2_problem1_code.R', echo=TRUE)
ticket_price=12
strategy_grid=rbind(c(0,0,0,0)-0*ticket_price,
c(60,30,20,15)-1*ticket_price,
c(60,40,30,24)-2*ticket_price,
c(60,45,36,30)-3*ticket_price)
strategy_grid
ticket_price=15
strategy_grid=rbind(c(0,0,0,0)-0*ticket_price,
c(60,30,20,15)-1*ticket_price,
c(60,40,30,24)-2*ticket_price,
c(60,45,36,30)-3*ticket_price)
print(strategy_grid)
ticket_price=30
strategy_grid=rbind(c(0,0,0,0)-0*ticket_price,
c(60,30,20,15)-1*ticket_price,
c(60,40,30,24)-2*ticket_price,
c(60,45,36,30)-3*ticket_price)
print(strategy_grid)
x.range <- as.integer(range(a[,1]))
y.range <- as.integer(range(a[,2]))
grd <- expand.grid(x=seq(from=x.range[1], to=x.range[2], by=.1),
y=seq(from=y.range[1], to=y.range[2], by=.1))
x.range <- c(0,1)
y.range <- c(0,1)
grd <- expand.grid(x=seq(from=x.range[1], to=x.range[2], by=.1),
y=seq(from=y.range[1], to=y.range[2], by=.1))
require('gstat')
gstat(id="log_lead",formula=log(lead)~1,locations=~x+y,data=a)
a <- read.table("http://www.stat.ucla.edu/~nchristo/statistics_c173_c273/soil.txt", header=TRUE)
gstat(id="log_lead",formula=log(lead)~1,locations=~x+y,data=a)
help(gstat)
source('C:/Users/samjb/Dropbox/Argo Project/Rcode/argo_r_starter_code.R', echo=TRUE)
install.packages('R.matlab')
source('C:/Users/samjb/Dropbox/Argo Project/Rcode/argo_r_starter_code.R', echo=TRUE)
pmean <- ggplot()
pmean <- ggplot()
plot_region<-map("world",add=TRUE,col="black",fill=TRUE)
require('maps')
plot_region<-map("world",add=TRUE,col="black",fill=TRUE)
# p0 <- p0 + geom_polygon(data=plot_region,aes(x=long, y=lat, group = group),colour="black", fill="white" )
p0 <- ggplot()
p0 <- p0 + map("world",add=TRUE,col="black",fill=TRUE)
p0 <- p0 + geom_point(aes(x=lon,y=lat,color=mean_mean),cex=2,station_dat,alpha=.5) # + scale_colour_gradient(low = "white", high = "black")
p0 <- p0 + ggtitle('Mean Streamflow over 1950-2019')+labs(color="Mean Streamflow")+xlab('longitude')+ylab('latitude')
savePlot(p0,'mean_plot.png')
p0 <- ggplot()
p0 <- p0 + map("world",add=TRUE,col="black",fill=TRUE)
p0 <- p0 + geom_point(aes(x=lon,y=lat,color=mean_mean),cex=2,station_dat,alpha=.5) # + scale_colour_gradient(low = "white", high = "black")
p0 <- ggplot()
require('ggplot2')
p0 <- ggplot()
p0 <- p0 + map("world",add=TRUE,col="black",fill=TRUE)
# p0 <- p0 + geom_polygon(data=plot_region,aes(x=long, y=lat, group = group),colour="black", fill="white" )
p0 <- ggplot()
p0 <- p0 + borders("world",fill="black",colour="black")
p0
mat_object
load('january_argo_data.Rdat')
load('./MatData/january_argo_data.Rdat')
setwd('/home/sam/Dropbox/Argo Project')
A=matrix(rnorm(10000*10000),10000,10000
)
A=A+t(A)
system.time({chol(A)})
A=A+n*diag(n)
n=10000
diag(5)
A=A+n*diag(n)
system.time({chol(A)})
install.packages('vgam')
install.packages('VGAM')
require('VGAM')
help('erf')
for(i in 1:1000){a=a+rnorm(1)}
system.time({for(i in 1:10000){a=a+rnorm(1)}})
erf(rnorm(1))
erf(rnorm(1))
erf(rnorm(1))
system.time({for(i in 1:10000){a=a+erf(rnorm(1))}})
system.time({for(i in 1:10000){a=a+erf(rnorm(1))}})
erf
help('qnorm')
help('pnorm')
system.time({for(i in 1:1000){a=a+erf(rnorm(1))}})
system.time({for(i in 1:1000){a=a+(rnorm(1))}})
nums=rep(rnorm(1),100)
nums
nums=rnorm(1000)
system.time({for(i in 1:1000){a=a+nums[i]}})
system.time({for(i in 1:1000){a=a+erf(nums[i])}})
nums
system.time({for(i in 1:1000){a=a+nums[i]}})
system.time({for(i in 1:1000){a=a+erf(nums[i])}})
system.time({for(i in 1:1000){a=exp(-nums[i])}})
system.time({for(i in 1:10000){a=exp(-nums[i])}})
system.time({for(i in 1:100000){a=exp(-nums[i])}})
nums[1]
nums[2]
nums[10000]
nums=rep(rnorm(1),100000)
system.time({for(i in 1:100000){a=erf(nums[i])}})
system.time({for(i in 1:100000){a=exp(-nums[i])}})
erf(Inf)
??erf
require('VGAM')
erf(Inf)
erf(0)
erf(-Inf)
matrix(c(c(1,0,0,0),c(0,1,0,0),c(0,0,1,0),c(0,0,0,1)))
matrix(c(c(1,0,0,0),c(0,1,0,0),c(0,0,1,0),c(0,0,0,1)),4,4)
matrix(c(c(1,0,0,0),c(0,1,0,0),c(0,0,1,0),c(0,0,0,1)),4,4)
cbind(c(cos(gamma),-sin(gamma)),c(sin(gamma),cos(gamma)))
gamma=base::pi/2
sin(gamma)
cbind(c(cos(gamma),-sin(gamma)),c(sin(gamma),cos(gamma)))
rbind(c(cos(gamma),-sin(gamma)),c(sin(gamma),cos(gamma)))
Sigma_z_init=matrix(c(c(1,0,0,0),c(0,1,0,0),c(0,0,cos(gamma),-sin(gamma)),c(0,0,sin(gamma),cos(gamma))),ndim*2,ndim*2)
ndim=2
Sigma_z_init=matrix(c(c(1,0,0,0),c(0,1,0,0),c(0,0,cos(gamma),-sin(gamma)),c(0,0,sin(gamma),cos(gamma))),ndim*2,ndim*2)
Sigma_z_init
Sigma_z_init=matrix(c(c(1,0,0,0),c(0,1,0,0),c(0,0,cos(gamma),sin(gamma)),c(0,0,-sin(gamma),cos(gamma))),ndim*2,ndim*2)
Sigma_z_init
gamma=base::pi/4
Sigma_z_init=matrix(c(c(1,0,0,0),c(0,1,0,0),c(0,0,cos(gamma),sin(gamma)),c(0,0,-sin(gamma),cos(gamma))),ndim*2,ndim*2)
Sigma_z_init
sin(gamma)
cos(gamma)
temp=matrix(c(c(1,0,0,0),c(0,1,0,0),c(0,0,cos(gamma),sin(gamma)),c(0,0,-sin(gamma),cos(gamma))),ndim*2,ndim*2)
help('pMatrix')
require('Matrix')
help('pMatrix')
x <- c(1,3,2,4)
diag(length(x))[x,]
x <- c(1,3,2,4)
P=diag(length(x))[x,]
M=P%*%temp%*%t(P)
M
M[x,x]
M=P%*%temp%*%t(P)
M
help resetClass()
??global
??appearence
??appearance
sAM20456#
sAM20456#
out_name=strcat(out_path,'Argo_data_r_ready_',num2str(ii,'%02.f'),'.mat');
matdat_filename=paste(path,'/RData/Argo_data_r_ready_',month_id,'.mat',sep='')
path='/home/sam/Dropbox/Argo Project/'
matdat_filename=paste(path,'/RData/Argo_data_r_ready_',month_id,'.mat',sep='')
str_pad(anim, 6, pad = "0")
str_pad(1, 6, pad = "0")
formatC('1', width = 2, format = "d", flag = "0")
formatC(anim, width = 6, format = "d", flag = "0")
formatC(1, width = 6, format = "d", flag = "0")
formatC(1, width = 2, format = "d", flag = "0")
formatC(12, width = 2, format = "d", flag = "0")
paste(path,'/RData/argo_data_',formatC(month_id,width = 2,format = "d",flag = "0"),'.Rdat',sep='')
month_id=1
paste(path,'/RData/argo_data_',formatC(month_id,width = 2,format = "d",flag = "0"),'.Rdat',sep='')\
paste(path,'/RData/argo_data_',formatC(month_id,width = 2,format = "d",flag = "0"),'.Rdat',sep='')
file.exists(paste(path,'MatData/Argo_data_r_ready_',formatC(month_id,width = 2,format = "d",flag = "0"),'.mat',sep=''))
month_id
paste(path,'MatData/Argo_data_r_ready_',formatC(month_id,width = 2,format = "d",flag = "0"),'.mat',sep='')
a<<-9
pi
load_spelling_data<-function()
{
raw_data=read.table('../../Data/spelling.dat')
return(list('data'=raw_data[,2:5],'dataname'='spellingGender','gender'=factor(raw_data[,1],levels=c(0,1),labels=c('female','male'))))
}
X=load_spelling_data[['data']]
X=load_spelling_data()[['data']]
setwd("C:/Users/samjb/Dropbox/LatentSpaceResponseModels/Test Runs/MCMC Cluster Spelling Gender Runs")
X=load_spelling_data()[['data']]
gender=load_spelling_data()[['gender']]
summary(X[gender==0,])
summary(X[gender=='male',])
summary(X[gender=='female',])
